
blinky.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ebc  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  0800509c  0800509c  0001509c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005130  08005130  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08005130  08005130  00015130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005138  08005138  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005138  08005138  00015138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800513c  0800513c  0001513c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08005140  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000280  2000005c  0800519c  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002dc  0800519c  000202dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011dae  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022cd  00000000  00000000  00031e7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fa8  00000000  00000000  00034150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c3f  00000000  00000000  000350f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026403  00000000  00000000  00035d37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011fe9  00000000  00000000  0005c13a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fb839  00000000  00000000  0006e123  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000047b0  00000000  00000000  0016995c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  0016e10c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000005c 	.word	0x2000005c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08005084 	.word	0x08005084

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000060 	.word	0x20000060
 800021c:	08005084 	.word	0x08005084

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c0:	f000 fb3f 	bl	8000c42 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c4:	f000 f828 	bl	8000618 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c8:	f000 f934 	bl	8000834 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80005cc:	f000 f870 	bl	80006b0 <MX_LPUART1_UART_Init>
  MX_TIM2_Init();
 80005d0:	f000 f8b8 	bl	8000744 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 80005d4:	480b      	ldr	r0, [pc, #44]	; (8000604 <main+0x48>)
 80005d6:	f001 fee9 	bl	80023ac <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80005da:	2100      	movs	r1, #0
 80005dc:	4809      	ldr	r0, [pc, #36]	; (8000604 <main+0x48>)
 80005de:	f001 ffbf 	bl	8002560 <HAL_TIM_PWM_Start>


  uart_buf_len = sprintf(uart_buf, "Timer Test\r\n");
 80005e2:	4909      	ldr	r1, [pc, #36]	; (8000608 <main+0x4c>)
 80005e4:	4809      	ldr	r0, [pc, #36]	; (800060c <main+0x50>)
 80005e6:	f004 f8a9 	bl	800473c <siprintf>
 80005ea:	4603      	mov	r3, r0
 80005ec:	4a08      	ldr	r2, [pc, #32]	; (8000610 <main+0x54>)
 80005ee:	6013      	str	r3, [r2, #0]
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)uart_buf, uart_buf_len, 100);
 80005f0:	4b07      	ldr	r3, [pc, #28]	; (8000610 <main+0x54>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	b29a      	uxth	r2, r3
 80005f6:	2364      	movs	r3, #100	; 0x64
 80005f8:	4904      	ldr	r1, [pc, #16]	; (800060c <main+0x50>)
 80005fa:	4806      	ldr	r0, [pc, #24]	; (8000614 <main+0x58>)
 80005fc:	f003 fa54 	bl	8003aa8 <HAL_UART_Transmit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000600:	e7fe      	b.n	8000600 <main+0x44>
 8000602:	bf00      	nop
 8000604:	20000108 	.word	0x20000108
 8000608:	0800509c 	.word	0x0800509c
 800060c:	20000154 	.word	0x20000154
 8000610:	20000188 	.word	0x20000188
 8000614:	20000078 	.word	0x20000078

08000618 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b094      	sub	sp, #80	; 0x50
 800061c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061e:	f107 0318 	add.w	r3, r7, #24
 8000622:	2238      	movs	r2, #56	; 0x38
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f004 f8a8 	bl	800477c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800062c:	1d3b      	adds	r3, r7, #4
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]
 8000632:	605a      	str	r2, [r3, #4]
 8000634:	609a      	str	r2, [r3, #8]
 8000636:	60da      	str	r2, [r3, #12]
 8000638:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800063a:	2000      	movs	r0, #0
 800063c:	f000 fe28 	bl	8001290 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000640:	2302      	movs	r3, #2
 8000642:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000644:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000648:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800064a:	2340      	movs	r3, #64	; 0x40
 800064c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064e:	2302      	movs	r3, #2
 8000650:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000652:	2302      	movs	r3, #2
 8000654:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000656:	2304      	movs	r3, #4
 8000658:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800065a:	2355      	movs	r3, #85	; 0x55
 800065c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800065e:	2302      	movs	r3, #2
 8000660:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000662:	2302      	movs	r3, #2
 8000664:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000666:	2302      	movs	r3, #2
 8000668:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066a:	f107 0318 	add.w	r3, r7, #24
 800066e:	4618      	mov	r0, r3
 8000670:	f000 fec2 	bl	80013f8 <HAL_RCC_OscConfig>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800067a:	f000 f95b 	bl	8000934 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067e:	230f      	movs	r3, #15
 8000680:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000682:	2303      	movs	r3, #3
 8000684:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000686:	2300      	movs	r3, #0
 8000688:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800068a:	2300      	movs	r3, #0
 800068c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800068e:	2300      	movs	r3, #0
 8000690:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000692:	1d3b      	adds	r3, r7, #4
 8000694:	2104      	movs	r1, #4
 8000696:	4618      	mov	r0, r3
 8000698:	f001 f9c6 	bl	8001a28 <HAL_RCC_ClockConfig>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80006a2:	f000 f947 	bl	8000934 <Error_Handler>
  }
}
 80006a6:	bf00      	nop
 80006a8:	3750      	adds	r7, #80	; 0x50
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
	...

080006b0 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80006b4:	4b21      	ldr	r3, [pc, #132]	; (800073c <MX_LPUART1_UART_Init+0x8c>)
 80006b6:	4a22      	ldr	r2, [pc, #136]	; (8000740 <MX_LPUART1_UART_Init+0x90>)
 80006b8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80006ba:	4b20      	ldr	r3, [pc, #128]	; (800073c <MX_LPUART1_UART_Init+0x8c>)
 80006bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006c0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006c2:	4b1e      	ldr	r3, [pc, #120]	; (800073c <MX_LPUART1_UART_Init+0x8c>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80006c8:	4b1c      	ldr	r3, [pc, #112]	; (800073c <MX_LPUART1_UART_Init+0x8c>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80006ce:	4b1b      	ldr	r3, [pc, #108]	; (800073c <MX_LPUART1_UART_Init+0x8c>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80006d4:	4b19      	ldr	r3, [pc, #100]	; (800073c <MX_LPUART1_UART_Init+0x8c>)
 80006d6:	220c      	movs	r2, #12
 80006d8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006da:	4b18      	ldr	r3, [pc, #96]	; (800073c <MX_LPUART1_UART_Init+0x8c>)
 80006dc:	2200      	movs	r2, #0
 80006de:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006e0:	4b16      	ldr	r3, [pc, #88]	; (800073c <MX_LPUART1_UART_Init+0x8c>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006e6:	4b15      	ldr	r3, [pc, #84]	; (800073c <MX_LPUART1_UART_Init+0x8c>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006ec:	4b13      	ldr	r3, [pc, #76]	; (800073c <MX_LPUART1_UART_Init+0x8c>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80006f2:	4812      	ldr	r0, [pc, #72]	; (800073c <MX_LPUART1_UART_Init+0x8c>)
 80006f4:	f003 f988 	bl	8003a08 <HAL_UART_Init>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80006fe:	f000 f919 	bl	8000934 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000702:	2100      	movs	r1, #0
 8000704:	480d      	ldr	r0, [pc, #52]	; (800073c <MX_LPUART1_UART_Init+0x8c>)
 8000706:	f003 ff4f 	bl	80045a8 <HAL_UARTEx_SetTxFifoThreshold>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000710:	f000 f910 	bl	8000934 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000714:	2100      	movs	r1, #0
 8000716:	4809      	ldr	r0, [pc, #36]	; (800073c <MX_LPUART1_UART_Init+0x8c>)
 8000718:	f003 ff84 	bl	8004624 <HAL_UARTEx_SetRxFifoThreshold>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000722:	f000 f907 	bl	8000934 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000726:	4805      	ldr	r0, [pc, #20]	; (800073c <MX_LPUART1_UART_Init+0x8c>)
 8000728:	f003 ff05 	bl	8004536 <HAL_UARTEx_DisableFifoMode>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000732:	f000 f8ff 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000736:	bf00      	nop
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	20000078 	.word	0x20000078
 8000740:	40008000 	.word	0x40008000

08000744 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b08e      	sub	sp, #56	; 0x38
 8000748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800074a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
 8000752:	605a      	str	r2, [r3, #4]
 8000754:	609a      	str	r2, [r3, #8]
 8000756:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000758:	f107 031c 	add.w	r3, r7, #28
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	605a      	str	r2, [r3, #4]
 8000762:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000764:	463b      	mov	r3, r7
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
 800076a:	605a      	str	r2, [r3, #4]
 800076c:	609a      	str	r2, [r3, #8]
 800076e:	60da      	str	r2, [r3, #12]
 8000770:	611a      	str	r2, [r3, #16]
 8000772:	615a      	str	r2, [r3, #20]
 8000774:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000776:	4b2e      	ldr	r3, [pc, #184]	; (8000830 <MX_TIM2_Init+0xec>)
 8000778:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800077c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10000-1;
 800077e:	4b2c      	ldr	r3, [pc, #176]	; (8000830 <MX_TIM2_Init+0xec>)
 8000780:	f242 720f 	movw	r2, #9999	; 0x270f
 8000784:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000786:	4b2a      	ldr	r3, [pc, #168]	; (8000830 <MX_TIM2_Init+0xec>)
 8000788:	2200      	movs	r2, #0
 800078a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 17000;
 800078c:	4b28      	ldr	r3, [pc, #160]	; (8000830 <MX_TIM2_Init+0xec>)
 800078e:	f244 2268 	movw	r2, #17000	; 0x4268
 8000792:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000794:	4b26      	ldr	r3, [pc, #152]	; (8000830 <MX_TIM2_Init+0xec>)
 8000796:	2200      	movs	r2, #0
 8000798:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800079a:	4b25      	ldr	r3, [pc, #148]	; (8000830 <MX_TIM2_Init+0xec>)
 800079c:	2200      	movs	r2, #0
 800079e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007a0:	4823      	ldr	r0, [pc, #140]	; (8000830 <MX_TIM2_Init+0xec>)
 80007a2:	f001 fdab 	bl	80022fc <HAL_TIM_Base_Init>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 80007ac:	f000 f8c2 	bl	8000934 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007b4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007ba:	4619      	mov	r1, r3
 80007bc:	481c      	ldr	r0, [pc, #112]	; (8000830 <MX_TIM2_Init+0xec>)
 80007be:	f002 fa75 	bl	8002cac <HAL_TIM_ConfigClockSource>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 80007c8:	f000 f8b4 	bl	8000934 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80007cc:	4818      	ldr	r0, [pc, #96]	; (8000830 <MX_TIM2_Init+0xec>)
 80007ce:	f001 fe65 	bl	800249c <HAL_TIM_PWM_Init>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80007d8:	f000 f8ac 	bl	8000934 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007dc:	2300      	movs	r3, #0
 80007de:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007e0:	2300      	movs	r3, #0
 80007e2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007e4:	f107 031c 	add.w	r3, r7, #28
 80007e8:	4619      	mov	r1, r3
 80007ea:	4811      	ldr	r0, [pc, #68]	; (8000830 <MX_TIM2_Init+0xec>)
 80007ec:	f003 f830 	bl	8003850 <HAL_TIMEx_MasterConfigSynchronization>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 80007f6:	f000 f89d 	bl	8000934 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007fa:	2360      	movs	r3, #96	; 0x60
 80007fc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 8500;
 80007fe:	f242 1334 	movw	r3, #8500	; 0x2134
 8000802:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000804:	2300      	movs	r3, #0
 8000806:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000808:	2300      	movs	r3, #0
 800080a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800080c:	463b      	mov	r3, r7
 800080e:	2200      	movs	r2, #0
 8000810:	4619      	mov	r1, r3
 8000812:	4807      	ldr	r0, [pc, #28]	; (8000830 <MX_TIM2_Init+0xec>)
 8000814:	f002 f936 	bl	8002a84 <HAL_TIM_PWM_ConfigChannel>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_TIM2_Init+0xde>
  {
    Error_Handler();
 800081e:	f000 f889 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000822:	4803      	ldr	r0, [pc, #12]	; (8000830 <MX_TIM2_Init+0xec>)
 8000824:	f000 f92c 	bl	8000a80 <HAL_TIM_MspPostInit>

}
 8000828:	bf00      	nop
 800082a:	3738      	adds	r7, #56	; 0x38
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	20000108 	.word	0x20000108

08000834 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b08a      	sub	sp, #40	; 0x28
 8000838:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083a:	f107 0314 	add.w	r3, r7, #20
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]
 8000844:	609a      	str	r2, [r3, #8]
 8000846:	60da      	str	r2, [r3, #12]
 8000848:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800084a:	4b25      	ldr	r3, [pc, #148]	; (80008e0 <MX_GPIO_Init+0xac>)
 800084c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084e:	4a24      	ldr	r2, [pc, #144]	; (80008e0 <MX_GPIO_Init+0xac>)
 8000850:	f043 0304 	orr.w	r3, r3, #4
 8000854:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000856:	4b22      	ldr	r3, [pc, #136]	; (80008e0 <MX_GPIO_Init+0xac>)
 8000858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085a:	f003 0304 	and.w	r3, r3, #4
 800085e:	613b      	str	r3, [r7, #16]
 8000860:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000862:	4b1f      	ldr	r3, [pc, #124]	; (80008e0 <MX_GPIO_Init+0xac>)
 8000864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000866:	4a1e      	ldr	r2, [pc, #120]	; (80008e0 <MX_GPIO_Init+0xac>)
 8000868:	f043 0320 	orr.w	r3, r3, #32
 800086c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800086e:	4b1c      	ldr	r3, [pc, #112]	; (80008e0 <MX_GPIO_Init+0xac>)
 8000870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000872:	f003 0320 	and.w	r3, r3, #32
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800087a:	4b19      	ldr	r3, [pc, #100]	; (80008e0 <MX_GPIO_Init+0xac>)
 800087c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087e:	4a18      	ldr	r2, [pc, #96]	; (80008e0 <MX_GPIO_Init+0xac>)
 8000880:	f043 0301 	orr.w	r3, r3, #1
 8000884:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000886:	4b16      	ldr	r3, [pc, #88]	; (80008e0 <MX_GPIO_Init+0xac>)
 8000888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088a:	f003 0301 	and.w	r3, r3, #1
 800088e:	60bb      	str	r3, [r7, #8]
 8000890:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000892:	4b13      	ldr	r3, [pc, #76]	; (80008e0 <MX_GPIO_Init+0xac>)
 8000894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000896:	4a12      	ldr	r2, [pc, #72]	; (80008e0 <MX_GPIO_Init+0xac>)
 8000898:	f043 0302 	orr.w	r3, r3, #2
 800089c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800089e:	4b10      	ldr	r3, [pc, #64]	; (80008e0 <MX_GPIO_Init+0xac>)
 80008a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a2:	f003 0302 	and.w	r3, r3, #2
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008b0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008ba:	f107 0314 	add.w	r3, r7, #20
 80008be:	4619      	mov	r1, r3
 80008c0:	4808      	ldr	r0, [pc, #32]	; (80008e4 <MX_GPIO_Init+0xb0>)
 80008c2:	f000 fb3f 	bl	8000f44 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80008c6:	2200      	movs	r2, #0
 80008c8:	2100      	movs	r1, #0
 80008ca:	2028      	movs	r0, #40	; 0x28
 80008cc:	f000 fb05 	bl	8000eda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008d0:	2028      	movs	r0, #40	; 0x28
 80008d2:	f000 fb1c 	bl	8000f0e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008d6:	bf00      	nop
 80008d8:	3728      	adds	r7, #40	; 0x28
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	40021000 	.word	0x40021000
 80008e4:	48000800 	.word	0x48000800

080008e8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim2 )
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	4a0b      	ldr	r2, [pc, #44]	; (8000920 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80008f4:	4293      	cmp	r3, r2
 80008f6:	d10e      	bne.n	8000916 <HAL_TIM_PeriodElapsedCallback+0x2e>
  {
	  uart_buf_len = sprintf(uart_buf, "Timer Event\r\n");
 80008f8:	490a      	ldr	r1, [pc, #40]	; (8000924 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80008fa:	480b      	ldr	r0, [pc, #44]	; (8000928 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80008fc:	f003 ff1e 	bl	800473c <siprintf>
 8000900:	4603      	mov	r3, r0
 8000902:	4a0a      	ldr	r2, [pc, #40]	; (800092c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000904:	6013      	str	r3, [r2, #0]
	  HAL_UART_Transmit(&hlpuart1, (uint8_t *)uart_buf, uart_buf_len, 100);
 8000906:	4b09      	ldr	r3, [pc, #36]	; (800092c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	b29a      	uxth	r2, r3
 800090c:	2364      	movs	r3, #100	; 0x64
 800090e:	4906      	ldr	r1, [pc, #24]	; (8000928 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000910:	4807      	ldr	r0, [pc, #28]	; (8000930 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000912:	f003 f8c9 	bl	8003aa8 <HAL_UART_Transmit>
  }
}
 8000916:	bf00      	nop
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	20000108 	.word	0x20000108
 8000924:	080050ac 	.word	0x080050ac
 8000928:	20000154 	.word	0x20000154
 800092c:	20000188 	.word	0x20000188
 8000930:	20000078 	.word	0x20000078

08000934 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000938:	b672      	cpsid	i
}
 800093a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800093c:	e7fe      	b.n	800093c <Error_Handler+0x8>
	...

08000940 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000946:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <HAL_MspInit+0x44>)
 8000948:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800094a:	4a0e      	ldr	r2, [pc, #56]	; (8000984 <HAL_MspInit+0x44>)
 800094c:	f043 0301 	orr.w	r3, r3, #1
 8000950:	6613      	str	r3, [r2, #96]	; 0x60
 8000952:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <HAL_MspInit+0x44>)
 8000954:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000956:	f003 0301 	and.w	r3, r3, #1
 800095a:	607b      	str	r3, [r7, #4]
 800095c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800095e:	4b09      	ldr	r3, [pc, #36]	; (8000984 <HAL_MspInit+0x44>)
 8000960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000962:	4a08      	ldr	r2, [pc, #32]	; (8000984 <HAL_MspInit+0x44>)
 8000964:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000968:	6593      	str	r3, [r2, #88]	; 0x58
 800096a:	4b06      	ldr	r3, [pc, #24]	; (8000984 <HAL_MspInit+0x44>)
 800096c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800096e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000972:	603b      	str	r3, [r7, #0]
 8000974:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000976:	f000 fd2f 	bl	80013d8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800097a:	bf00      	nop
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	40021000 	.word	0x40021000

08000988 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b09e      	sub	sp, #120	; 0x78
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000990:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	605a      	str	r2, [r3, #4]
 800099a:	609a      	str	r2, [r3, #8]
 800099c:	60da      	str	r2, [r3, #12]
 800099e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009a0:	f107 0310 	add.w	r3, r7, #16
 80009a4:	2254      	movs	r2, #84	; 0x54
 80009a6:	2100      	movs	r1, #0
 80009a8:	4618      	mov	r0, r3
 80009aa:	f003 fee7 	bl	800477c <memset>
  if(huart->Instance==LPUART1)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	4a1f      	ldr	r2, [pc, #124]	; (8000a30 <HAL_UART_MspInit+0xa8>)
 80009b4:	4293      	cmp	r3, r2
 80009b6:	d136      	bne.n	8000a26 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80009b8:	2320      	movs	r3, #32
 80009ba:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80009bc:	2300      	movs	r3, #0
 80009be:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009c0:	f107 0310 	add.w	r3, r7, #16
 80009c4:	4618      	mov	r0, r3
 80009c6:	f001 fa4b 	bl	8001e60 <HAL_RCCEx_PeriphCLKConfig>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80009d0:	f7ff ffb0 	bl	8000934 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80009d4:	4b17      	ldr	r3, [pc, #92]	; (8000a34 <HAL_UART_MspInit+0xac>)
 80009d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80009d8:	4a16      	ldr	r2, [pc, #88]	; (8000a34 <HAL_UART_MspInit+0xac>)
 80009da:	f043 0301 	orr.w	r3, r3, #1
 80009de:	65d3      	str	r3, [r2, #92]	; 0x5c
 80009e0:	4b14      	ldr	r3, [pc, #80]	; (8000a34 <HAL_UART_MspInit+0xac>)
 80009e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80009e4:	f003 0301 	and.w	r3, r3, #1
 80009e8:	60fb      	str	r3, [r7, #12]
 80009ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ec:	4b11      	ldr	r3, [pc, #68]	; (8000a34 <HAL_UART_MspInit+0xac>)
 80009ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f0:	4a10      	ldr	r2, [pc, #64]	; (8000a34 <HAL_UART_MspInit+0xac>)
 80009f2:	f043 0301 	orr.w	r3, r3, #1
 80009f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009f8:	4b0e      	ldr	r3, [pc, #56]	; (8000a34 <HAL_UART_MspInit+0xac>)
 80009fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009fc:	f003 0301 	and.w	r3, r3, #1
 8000a00:	60bb      	str	r3, [r7, #8]
 8000a02:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000a04:	230c      	movs	r3, #12
 8000a06:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a10:	2300      	movs	r3, #0
 8000a12:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000a14:	230c      	movs	r3, #12
 8000a16:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a18:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a22:	f000 fa8f 	bl	8000f44 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000a26:	bf00      	nop
 8000a28:	3778      	adds	r7, #120	; 0x78
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40008000 	.word	0x40008000
 8000a34:	40021000 	.word	0x40021000

08000a38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a48:	d113      	bne.n	8000a72 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a4a:	4b0c      	ldr	r3, [pc, #48]	; (8000a7c <HAL_TIM_Base_MspInit+0x44>)
 8000a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a4e:	4a0b      	ldr	r2, [pc, #44]	; (8000a7c <HAL_TIM_Base_MspInit+0x44>)
 8000a50:	f043 0301 	orr.w	r3, r3, #1
 8000a54:	6593      	str	r3, [r2, #88]	; 0x58
 8000a56:	4b09      	ldr	r3, [pc, #36]	; (8000a7c <HAL_TIM_Base_MspInit+0x44>)
 8000a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a5a:	f003 0301 	and.w	r3, r3, #1
 8000a5e:	60fb      	str	r3, [r7, #12]
 8000a60:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000a62:	2200      	movs	r2, #0
 8000a64:	2100      	movs	r1, #0
 8000a66:	201c      	movs	r0, #28
 8000a68:	f000 fa37 	bl	8000eda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a6c:	201c      	movs	r0, #28
 8000a6e:	f000 fa4e 	bl	8000f0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000a72:	bf00      	nop
 8000a74:	3710      	adds	r7, #16
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40021000 	.word	0x40021000

08000a80 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b088      	sub	sp, #32
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a88:	f107 030c 	add.w	r3, r7, #12
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	605a      	str	r2, [r3, #4]
 8000a92:	609a      	str	r2, [r3, #8]
 8000a94:	60da      	str	r2, [r3, #12]
 8000a96:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000aa0:	d11c      	bne.n	8000adc <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa2:	4b10      	ldr	r3, [pc, #64]	; (8000ae4 <HAL_TIM_MspPostInit+0x64>)
 8000aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa6:	4a0f      	ldr	r2, [pc, #60]	; (8000ae4 <HAL_TIM_MspPostInit+0x64>)
 8000aa8:	f043 0301 	orr.w	r3, r3, #1
 8000aac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aae:	4b0d      	ldr	r3, [pc, #52]	; (8000ae4 <HAL_TIM_MspPostInit+0x64>)
 8000ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab2:	f003 0301 	and.w	r3, r3, #1
 8000ab6:	60bb      	str	r3, [r7, #8]
 8000ab8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = tim2_ch1_out_Pin;
 8000aba:	2320      	movs	r3, #32
 8000abc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000abe:	2302      	movs	r3, #2
 8000ac0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac6:	2303      	movs	r3, #3
 8000ac8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000aca:	2301      	movs	r3, #1
 8000acc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(tim2_ch1_out_GPIO_Port, &GPIO_InitStruct);
 8000ace:	f107 030c 	add.w	r3, r7, #12
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ad8:	f000 fa34 	bl	8000f44 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000adc:	bf00      	nop
 8000ade:	3720      	adds	r7, #32
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	40021000 	.word	0x40021000

08000ae8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000aec:	e7fe      	b.n	8000aec <NMI_Handler+0x4>

08000aee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aee:	b480      	push	{r7}
 8000af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000af2:	e7fe      	b.n	8000af2 <HardFault_Handler+0x4>

08000af4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000af8:	e7fe      	b.n	8000af8 <MemManage_Handler+0x4>

08000afa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000afa:	b480      	push	{r7}
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000afe:	e7fe      	b.n	8000afe <BusFault_Handler+0x4>

08000b00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b04:	e7fe      	b.n	8000b04 <UsageFault_Handler+0x4>

08000b06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr

08000b14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr

08000b22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b22:	b480      	push	{r7}
 8000b24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b26:	bf00      	nop
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr

08000b30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b34:	f000 f8d8 	bl	8000ce8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b38:	bf00      	nop
 8000b3a:	bd80      	pop	{r7, pc}

08000b3c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b40:	4802      	ldr	r0, [pc, #8]	; (8000b4c <TIM2_IRQHandler+0x10>)
 8000b42:	f001 fe1f 	bl	8002784 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20000108 	.word	0x20000108

08000b50 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000b54:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000b58:	f000 fb76 	bl	8001248 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b5c:	bf00      	nop
 8000b5e:	bd80      	pop	{r7, pc}

08000b60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b086      	sub	sp, #24
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b68:	4a14      	ldr	r2, [pc, #80]	; (8000bbc <_sbrk+0x5c>)
 8000b6a:	4b15      	ldr	r3, [pc, #84]	; (8000bc0 <_sbrk+0x60>)
 8000b6c:	1ad3      	subs	r3, r2, r3
 8000b6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b74:	4b13      	ldr	r3, [pc, #76]	; (8000bc4 <_sbrk+0x64>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d102      	bne.n	8000b82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b7c:	4b11      	ldr	r3, [pc, #68]	; (8000bc4 <_sbrk+0x64>)
 8000b7e:	4a12      	ldr	r2, [pc, #72]	; (8000bc8 <_sbrk+0x68>)
 8000b80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b82:	4b10      	ldr	r3, [pc, #64]	; (8000bc4 <_sbrk+0x64>)
 8000b84:	681a      	ldr	r2, [r3, #0]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	4413      	add	r3, r2
 8000b8a:	693a      	ldr	r2, [r7, #16]
 8000b8c:	429a      	cmp	r2, r3
 8000b8e:	d207      	bcs.n	8000ba0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b90:	f003 fdfc 	bl	800478c <__errno>
 8000b94:	4603      	mov	r3, r0
 8000b96:	220c      	movs	r2, #12
 8000b98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b9e:	e009      	b.n	8000bb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ba0:	4b08      	ldr	r3, [pc, #32]	; (8000bc4 <_sbrk+0x64>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ba6:	4b07      	ldr	r3, [pc, #28]	; (8000bc4 <_sbrk+0x64>)
 8000ba8:	681a      	ldr	r2, [r3, #0]
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	4413      	add	r3, r2
 8000bae:	4a05      	ldr	r2, [pc, #20]	; (8000bc4 <_sbrk+0x64>)
 8000bb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bb2:	68fb      	ldr	r3, [r7, #12]
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3718      	adds	r7, #24
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	20020000 	.word	0x20020000
 8000bc0:	00000400 	.word	0x00000400
 8000bc4:	2000018c 	.word	0x2000018c
 8000bc8:	200002e0 	.word	0x200002e0

08000bcc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000bd0:	4b06      	ldr	r3, [pc, #24]	; (8000bec <SystemInit+0x20>)
 8000bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bd6:	4a05      	ldr	r2, [pc, #20]	; (8000bec <SystemInit+0x20>)
 8000bd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bdc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000be0:	bf00      	nop
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	e000ed00 	.word	0xe000ed00

08000bf0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bf0:	480d      	ldr	r0, [pc, #52]	; (8000c28 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bf2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bf4:	480d      	ldr	r0, [pc, #52]	; (8000c2c <LoopForever+0x6>)
  ldr r1, =_edata
 8000bf6:	490e      	ldr	r1, [pc, #56]	; (8000c30 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bf8:	4a0e      	ldr	r2, [pc, #56]	; (8000c34 <LoopForever+0xe>)
  movs r3, #0
 8000bfa:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000bfc:	e002      	b.n	8000c04 <LoopCopyDataInit>

08000bfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c02:	3304      	adds	r3, #4

08000c04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c08:	d3f9      	bcc.n	8000bfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c0a:	4a0b      	ldr	r2, [pc, #44]	; (8000c38 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c0c:	4c0b      	ldr	r4, [pc, #44]	; (8000c3c <LoopForever+0x16>)
  movs r3, #0
 8000c0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c10:	e001      	b.n	8000c16 <LoopFillZerobss>

08000c12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c14:	3204      	adds	r2, #4

08000c16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c18:	d3fb      	bcc.n	8000c12 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c1a:	f7ff ffd7 	bl	8000bcc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c1e:	f003 fdbb 	bl	8004798 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c22:	f7ff fccb 	bl	80005bc <main>

08000c26 <LoopForever>:

LoopForever:
    b LoopForever
 8000c26:	e7fe      	b.n	8000c26 <LoopForever>
  ldr   r0, =_estack
 8000c28:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c30:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000c34:	08005140 	.word	0x08005140
  ldr r2, =_sbss
 8000c38:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000c3c:	200002dc 	.word	0x200002dc

08000c40 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c40:	e7fe      	b.n	8000c40 <ADC1_2_IRQHandler>

08000c42 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c42:	b580      	push	{r7, lr}
 8000c44:	b082      	sub	sp, #8
 8000c46:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c4c:	2003      	movs	r0, #3
 8000c4e:	f000 f939 	bl	8000ec4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c52:	2000      	movs	r0, #0
 8000c54:	f000 f80e 	bl	8000c74 <HAL_InitTick>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d002      	beq.n	8000c64 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	71fb      	strb	r3, [r7, #7]
 8000c62:	e001      	b.n	8000c68 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c64:	f7ff fe6c 	bl	8000940 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c68:	79fb      	ldrb	r3, [r7, #7]

}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3708      	adds	r7, #8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
	...

08000c74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000c80:	4b16      	ldr	r3, [pc, #88]	; (8000cdc <HAL_InitTick+0x68>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d022      	beq.n	8000cce <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000c88:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <HAL_InitTick+0x6c>)
 8000c8a:	681a      	ldr	r2, [r3, #0]
 8000c8c:	4b13      	ldr	r3, [pc, #76]	; (8000cdc <HAL_InitTick+0x68>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c94:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f000 f944 	bl	8000f2a <HAL_SYSTICK_Config>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d10f      	bne.n	8000cc8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2b0f      	cmp	r3, #15
 8000cac:	d809      	bhi.n	8000cc2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	6879      	ldr	r1, [r7, #4]
 8000cb2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000cb6:	f000 f910 	bl	8000eda <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cba:	4a0a      	ldr	r2, [pc, #40]	; (8000ce4 <HAL_InitTick+0x70>)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	6013      	str	r3, [r2, #0]
 8000cc0:	e007      	b.n	8000cd2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	73fb      	strb	r3, [r7, #15]
 8000cc6:	e004      	b.n	8000cd2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	73fb      	strb	r3, [r7, #15]
 8000ccc:	e001      	b.n	8000cd2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000cd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3710      	adds	r7, #16
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	20000008 	.word	0x20000008
 8000ce0:	20000000 	.word	0x20000000
 8000ce4:	20000004 	.word	0x20000004

08000ce8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cec:	4b05      	ldr	r3, [pc, #20]	; (8000d04 <HAL_IncTick+0x1c>)
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	4b05      	ldr	r3, [pc, #20]	; (8000d08 <HAL_IncTick+0x20>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4413      	add	r3, r2
 8000cf6:	4a03      	ldr	r2, [pc, #12]	; (8000d04 <HAL_IncTick+0x1c>)
 8000cf8:	6013      	str	r3, [r2, #0]
}
 8000cfa:	bf00      	nop
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr
 8000d04:	20000190 	.word	0x20000190
 8000d08:	20000008 	.word	0x20000008

08000d0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d10:	4b03      	ldr	r3, [pc, #12]	; (8000d20 <HAL_GetTick+0x14>)
 8000d12:	681b      	ldr	r3, [r3, #0]
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	20000190 	.word	0x20000190

08000d24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b085      	sub	sp, #20
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	f003 0307 	and.w	r3, r3, #7
 8000d32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d34:	4b0c      	ldr	r3, [pc, #48]	; (8000d68 <__NVIC_SetPriorityGrouping+0x44>)
 8000d36:	68db      	ldr	r3, [r3, #12]
 8000d38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d3a:	68ba      	ldr	r2, [r7, #8]
 8000d3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d40:	4013      	ands	r3, r2
 8000d42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d56:	4a04      	ldr	r2, [pc, #16]	; (8000d68 <__NVIC_SetPriorityGrouping+0x44>)
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	60d3      	str	r3, [r2, #12]
}
 8000d5c:	bf00      	nop
 8000d5e:	3714      	adds	r7, #20
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr
 8000d68:	e000ed00 	.word	0xe000ed00

08000d6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d70:	4b04      	ldr	r3, [pc, #16]	; (8000d84 <__NVIC_GetPriorityGrouping+0x18>)
 8000d72:	68db      	ldr	r3, [r3, #12]
 8000d74:	0a1b      	lsrs	r3, r3, #8
 8000d76:	f003 0307 	and.w	r3, r3, #7
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr
 8000d84:	e000ed00 	.word	0xe000ed00

08000d88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	4603      	mov	r3, r0
 8000d90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	db0b      	blt.n	8000db2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d9a:	79fb      	ldrb	r3, [r7, #7]
 8000d9c:	f003 021f 	and.w	r2, r3, #31
 8000da0:	4907      	ldr	r1, [pc, #28]	; (8000dc0 <__NVIC_EnableIRQ+0x38>)
 8000da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da6:	095b      	lsrs	r3, r3, #5
 8000da8:	2001      	movs	r0, #1
 8000daa:	fa00 f202 	lsl.w	r2, r0, r2
 8000dae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000db2:	bf00      	nop
 8000db4:	370c      	adds	r7, #12
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	e000e100 	.word	0xe000e100

08000dc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	4603      	mov	r3, r0
 8000dcc:	6039      	str	r1, [r7, #0]
 8000dce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	db0a      	blt.n	8000dee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	b2da      	uxtb	r2, r3
 8000ddc:	490c      	ldr	r1, [pc, #48]	; (8000e10 <__NVIC_SetPriority+0x4c>)
 8000dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de2:	0112      	lsls	r2, r2, #4
 8000de4:	b2d2      	uxtb	r2, r2
 8000de6:	440b      	add	r3, r1
 8000de8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dec:	e00a      	b.n	8000e04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	b2da      	uxtb	r2, r3
 8000df2:	4908      	ldr	r1, [pc, #32]	; (8000e14 <__NVIC_SetPriority+0x50>)
 8000df4:	79fb      	ldrb	r3, [r7, #7]
 8000df6:	f003 030f 	and.w	r3, r3, #15
 8000dfa:	3b04      	subs	r3, #4
 8000dfc:	0112      	lsls	r2, r2, #4
 8000dfe:	b2d2      	uxtb	r2, r2
 8000e00:	440b      	add	r3, r1
 8000e02:	761a      	strb	r2, [r3, #24]
}
 8000e04:	bf00      	nop
 8000e06:	370c      	adds	r7, #12
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr
 8000e10:	e000e100 	.word	0xe000e100
 8000e14:	e000ed00 	.word	0xe000ed00

08000e18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b089      	sub	sp, #36	; 0x24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	60f8      	str	r0, [r7, #12]
 8000e20:	60b9      	str	r1, [r7, #8]
 8000e22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	f003 0307 	and.w	r3, r3, #7
 8000e2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e2c:	69fb      	ldr	r3, [r7, #28]
 8000e2e:	f1c3 0307 	rsb	r3, r3, #7
 8000e32:	2b04      	cmp	r3, #4
 8000e34:	bf28      	it	cs
 8000e36:	2304      	movcs	r3, #4
 8000e38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	3304      	adds	r3, #4
 8000e3e:	2b06      	cmp	r3, #6
 8000e40:	d902      	bls.n	8000e48 <NVIC_EncodePriority+0x30>
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	3b03      	subs	r3, #3
 8000e46:	e000      	b.n	8000e4a <NVIC_EncodePriority+0x32>
 8000e48:	2300      	movs	r3, #0
 8000e4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e50:	69bb      	ldr	r3, [r7, #24]
 8000e52:	fa02 f303 	lsl.w	r3, r2, r3
 8000e56:	43da      	mvns	r2, r3
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	401a      	ands	r2, r3
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e60:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	fa01 f303 	lsl.w	r3, r1, r3
 8000e6a:	43d9      	mvns	r1, r3
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e70:	4313      	orrs	r3, r2
         );
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3724      	adds	r7, #36	; 0x24
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
	...

08000e80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	3b01      	subs	r3, #1
 8000e8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e90:	d301      	bcc.n	8000e96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e92:	2301      	movs	r3, #1
 8000e94:	e00f      	b.n	8000eb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e96:	4a0a      	ldr	r2, [pc, #40]	; (8000ec0 <SysTick_Config+0x40>)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	3b01      	subs	r3, #1
 8000e9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e9e:	210f      	movs	r1, #15
 8000ea0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ea4:	f7ff ff8e 	bl	8000dc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ea8:	4b05      	ldr	r3, [pc, #20]	; (8000ec0 <SysTick_Config+0x40>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eae:	4b04      	ldr	r3, [pc, #16]	; (8000ec0 <SysTick_Config+0x40>)
 8000eb0:	2207      	movs	r2, #7
 8000eb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000eb4:	2300      	movs	r3, #0
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	e000e010 	.word	0xe000e010

08000ec4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ecc:	6878      	ldr	r0, [r7, #4]
 8000ece:	f7ff ff29 	bl	8000d24 <__NVIC_SetPriorityGrouping>
}
 8000ed2:	bf00      	nop
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eda:	b580      	push	{r7, lr}
 8000edc:	b086      	sub	sp, #24
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	60b9      	str	r1, [r7, #8]
 8000ee4:	607a      	str	r2, [r7, #4]
 8000ee6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ee8:	f7ff ff40 	bl	8000d6c <__NVIC_GetPriorityGrouping>
 8000eec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eee:	687a      	ldr	r2, [r7, #4]
 8000ef0:	68b9      	ldr	r1, [r7, #8]
 8000ef2:	6978      	ldr	r0, [r7, #20]
 8000ef4:	f7ff ff90 	bl	8000e18 <NVIC_EncodePriority>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000efe:	4611      	mov	r1, r2
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff ff5f 	bl	8000dc4 <__NVIC_SetPriority>
}
 8000f06:	bf00      	nop
 8000f08:	3718      	adds	r7, #24
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b082      	sub	sp, #8
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	4603      	mov	r3, r0
 8000f16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff ff33 	bl	8000d88 <__NVIC_EnableIRQ>
}
 8000f22:	bf00      	nop
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b082      	sub	sp, #8
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f32:	6878      	ldr	r0, [r7, #4]
 8000f34:	f7ff ffa4 	bl	8000e80 <SysTick_Config>
 8000f38:	4603      	mov	r3, r0
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
	...

08000f44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b087      	sub	sp, #28
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000f52:	e15a      	b.n	800120a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	2101      	movs	r1, #1
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f60:	4013      	ands	r3, r2
 8000f62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	f000 814c 	beq.w	8001204 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f003 0303 	and.w	r3, r3, #3
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d005      	beq.n	8000f84 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f80:	2b02      	cmp	r3, #2
 8000f82:	d130      	bne.n	8000fe6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	689b      	ldr	r3, [r3, #8]
 8000f88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	2203      	movs	r2, #3
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	43db      	mvns	r3, r3
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	4013      	ands	r3, r2
 8000f9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	68da      	ldr	r2, [r3, #12]
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	693a      	ldr	r2, [r7, #16]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	693a      	ldr	r2, [r7, #16]
 8000fb2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fba:	2201      	movs	r2, #1
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc2:	43db      	mvns	r3, r3
 8000fc4:	693a      	ldr	r2, [r7, #16]
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	091b      	lsrs	r3, r3, #4
 8000fd0:	f003 0201 	and.w	r2, r3, #1
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f003 0303 	and.w	r3, r3, #3
 8000fee:	2b03      	cmp	r3, #3
 8000ff0:	d017      	beq.n	8001022 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	68db      	ldr	r3, [r3, #12]
 8000ff6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	2203      	movs	r2, #3
 8000ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8001002:	43db      	mvns	r3, r3
 8001004:	693a      	ldr	r2, [r7, #16]
 8001006:	4013      	ands	r3, r2
 8001008:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	689a      	ldr	r2, [r3, #8]
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	fa02 f303 	lsl.w	r3, r2, r3
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	4313      	orrs	r3, r2
 800101a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	f003 0303 	and.w	r3, r3, #3
 800102a:	2b02      	cmp	r3, #2
 800102c:	d123      	bne.n	8001076 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	08da      	lsrs	r2, r3, #3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	3208      	adds	r2, #8
 8001036:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800103a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	f003 0307 	and.w	r3, r3, #7
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	220f      	movs	r2, #15
 8001046:	fa02 f303 	lsl.w	r3, r2, r3
 800104a:	43db      	mvns	r3, r3
 800104c:	693a      	ldr	r2, [r7, #16]
 800104e:	4013      	ands	r3, r2
 8001050:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	691a      	ldr	r2, [r3, #16]
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	f003 0307 	and.w	r3, r3, #7
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	4313      	orrs	r3, r2
 8001066:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	08da      	lsrs	r2, r3, #3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	3208      	adds	r2, #8
 8001070:	6939      	ldr	r1, [r7, #16]
 8001072:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	2203      	movs	r2, #3
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	43db      	mvns	r3, r3
 8001088:	693a      	ldr	r2, [r7, #16]
 800108a:	4013      	ands	r3, r2
 800108c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f003 0203 	and.w	r2, r3, #3
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	f000 80a6 	beq.w	8001204 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010b8:	4b5b      	ldr	r3, [pc, #364]	; (8001228 <HAL_GPIO_Init+0x2e4>)
 80010ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010bc:	4a5a      	ldr	r2, [pc, #360]	; (8001228 <HAL_GPIO_Init+0x2e4>)
 80010be:	f043 0301 	orr.w	r3, r3, #1
 80010c2:	6613      	str	r3, [r2, #96]	; 0x60
 80010c4:	4b58      	ldr	r3, [pc, #352]	; (8001228 <HAL_GPIO_Init+0x2e4>)
 80010c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010c8:	f003 0301 	and.w	r3, r3, #1
 80010cc:	60bb      	str	r3, [r7, #8]
 80010ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010d0:	4a56      	ldr	r2, [pc, #344]	; (800122c <HAL_GPIO_Init+0x2e8>)
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	089b      	lsrs	r3, r3, #2
 80010d6:	3302      	adds	r3, #2
 80010d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	f003 0303 	and.w	r3, r3, #3
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	220f      	movs	r2, #15
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	43db      	mvns	r3, r3
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	4013      	ands	r3, r2
 80010f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80010fa:	d01f      	beq.n	800113c <HAL_GPIO_Init+0x1f8>
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	4a4c      	ldr	r2, [pc, #304]	; (8001230 <HAL_GPIO_Init+0x2ec>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d019      	beq.n	8001138 <HAL_GPIO_Init+0x1f4>
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	4a4b      	ldr	r2, [pc, #300]	; (8001234 <HAL_GPIO_Init+0x2f0>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d013      	beq.n	8001134 <HAL_GPIO_Init+0x1f0>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	4a4a      	ldr	r2, [pc, #296]	; (8001238 <HAL_GPIO_Init+0x2f4>)
 8001110:	4293      	cmp	r3, r2
 8001112:	d00d      	beq.n	8001130 <HAL_GPIO_Init+0x1ec>
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	4a49      	ldr	r2, [pc, #292]	; (800123c <HAL_GPIO_Init+0x2f8>)
 8001118:	4293      	cmp	r3, r2
 800111a:	d007      	beq.n	800112c <HAL_GPIO_Init+0x1e8>
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	4a48      	ldr	r2, [pc, #288]	; (8001240 <HAL_GPIO_Init+0x2fc>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d101      	bne.n	8001128 <HAL_GPIO_Init+0x1e4>
 8001124:	2305      	movs	r3, #5
 8001126:	e00a      	b.n	800113e <HAL_GPIO_Init+0x1fa>
 8001128:	2306      	movs	r3, #6
 800112a:	e008      	b.n	800113e <HAL_GPIO_Init+0x1fa>
 800112c:	2304      	movs	r3, #4
 800112e:	e006      	b.n	800113e <HAL_GPIO_Init+0x1fa>
 8001130:	2303      	movs	r3, #3
 8001132:	e004      	b.n	800113e <HAL_GPIO_Init+0x1fa>
 8001134:	2302      	movs	r3, #2
 8001136:	e002      	b.n	800113e <HAL_GPIO_Init+0x1fa>
 8001138:	2301      	movs	r3, #1
 800113a:	e000      	b.n	800113e <HAL_GPIO_Init+0x1fa>
 800113c:	2300      	movs	r3, #0
 800113e:	697a      	ldr	r2, [r7, #20]
 8001140:	f002 0203 	and.w	r2, r2, #3
 8001144:	0092      	lsls	r2, r2, #2
 8001146:	4093      	lsls	r3, r2
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	4313      	orrs	r3, r2
 800114c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800114e:	4937      	ldr	r1, [pc, #220]	; (800122c <HAL_GPIO_Init+0x2e8>)
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	089b      	lsrs	r3, r3, #2
 8001154:	3302      	adds	r3, #2
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800115c:	4b39      	ldr	r3, [pc, #228]	; (8001244 <HAL_GPIO_Init+0x300>)
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	43db      	mvns	r3, r3
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	4013      	ands	r3, r2
 800116a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001174:	2b00      	cmp	r3, #0
 8001176:	d003      	beq.n	8001180 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001178:	693a      	ldr	r2, [r7, #16]
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	4313      	orrs	r3, r2
 800117e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001180:	4a30      	ldr	r2, [pc, #192]	; (8001244 <HAL_GPIO_Init+0x300>)
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001186:	4b2f      	ldr	r3, [pc, #188]	; (8001244 <HAL_GPIO_Init+0x300>)
 8001188:	68db      	ldr	r3, [r3, #12]
 800118a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	43db      	mvns	r3, r3
 8001190:	693a      	ldr	r2, [r7, #16]
 8001192:	4013      	ands	r3, r2
 8001194:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d003      	beq.n	80011aa <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80011aa:	4a26      	ldr	r2, [pc, #152]	; (8001244 <HAL_GPIO_Init+0x300>)
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80011b0:	4b24      	ldr	r3, [pc, #144]	; (8001244 <HAL_GPIO_Init+0x300>)
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	43db      	mvns	r3, r3
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	4013      	ands	r3, r2
 80011be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d003      	beq.n	80011d4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80011d4:	4a1b      	ldr	r2, [pc, #108]	; (8001244 <HAL_GPIO_Init+0x300>)
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80011da:	4b1a      	ldr	r3, [pc, #104]	; (8001244 <HAL_GPIO_Init+0x300>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	43db      	mvns	r3, r3
 80011e4:	693a      	ldr	r2, [r7, #16]
 80011e6:	4013      	ands	r3, r2
 80011e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d003      	beq.n	80011fe <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011fe:	4a11      	ldr	r2, [pc, #68]	; (8001244 <HAL_GPIO_Init+0x300>)
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	3301      	adds	r3, #1
 8001208:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	fa22 f303 	lsr.w	r3, r2, r3
 8001214:	2b00      	cmp	r3, #0
 8001216:	f47f ae9d 	bne.w	8000f54 <HAL_GPIO_Init+0x10>
  }
}
 800121a:	bf00      	nop
 800121c:	bf00      	nop
 800121e:	371c      	adds	r7, #28
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr
 8001228:	40021000 	.word	0x40021000
 800122c:	40010000 	.word	0x40010000
 8001230:	48000400 	.word	0x48000400
 8001234:	48000800 	.word	0x48000800
 8001238:	48000c00 	.word	0x48000c00
 800123c:	48001000 	.word	0x48001000
 8001240:	48001400 	.word	0x48001400
 8001244:	40010400 	.word	0x40010400

08001248 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001252:	4b08      	ldr	r3, [pc, #32]	; (8001274 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001254:	695a      	ldr	r2, [r3, #20]
 8001256:	88fb      	ldrh	r3, [r7, #6]
 8001258:	4013      	ands	r3, r2
 800125a:	2b00      	cmp	r3, #0
 800125c:	d006      	beq.n	800126c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800125e:	4a05      	ldr	r2, [pc, #20]	; (8001274 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001260:	88fb      	ldrh	r3, [r7, #6]
 8001262:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001264:	88fb      	ldrh	r3, [r7, #6]
 8001266:	4618      	mov	r0, r3
 8001268:	f000 f806 	bl	8001278 <HAL_GPIO_EXTI_Callback>
  }
}
 800126c:	bf00      	nop
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	40010400 	.word	0x40010400

08001278 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	4603      	mov	r3, r0
 8001280:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001282:	bf00      	nop
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
	...

08001290 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001290:	b480      	push	{r7}
 8001292:	b085      	sub	sp, #20
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d141      	bne.n	8001322 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800129e:	4b4b      	ldr	r3, [pc, #300]	; (80013cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80012a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012aa:	d131      	bne.n	8001310 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80012ac:	4b47      	ldr	r3, [pc, #284]	; (80013cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80012b2:	4a46      	ldr	r2, [pc, #280]	; (80013cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80012b8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80012bc:	4b43      	ldr	r3, [pc, #268]	; (80013cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012c4:	4a41      	ldr	r2, [pc, #260]	; (80013cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012ca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80012cc:	4b40      	ldr	r3, [pc, #256]	; (80013d0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	2232      	movs	r2, #50	; 0x32
 80012d2:	fb02 f303 	mul.w	r3, r2, r3
 80012d6:	4a3f      	ldr	r2, [pc, #252]	; (80013d4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80012d8:	fba2 2303 	umull	r2, r3, r2, r3
 80012dc:	0c9b      	lsrs	r3, r3, #18
 80012de:	3301      	adds	r3, #1
 80012e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012e2:	e002      	b.n	80012ea <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	3b01      	subs	r3, #1
 80012e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012ea:	4b38      	ldr	r3, [pc, #224]	; (80013cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012ec:	695b      	ldr	r3, [r3, #20]
 80012ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012f6:	d102      	bne.n	80012fe <HAL_PWREx_ControlVoltageScaling+0x6e>
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d1f2      	bne.n	80012e4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012fe:	4b33      	ldr	r3, [pc, #204]	; (80013cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001300:	695b      	ldr	r3, [r3, #20]
 8001302:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001306:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800130a:	d158      	bne.n	80013be <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800130c:	2303      	movs	r3, #3
 800130e:	e057      	b.n	80013c0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001310:	4b2e      	ldr	r3, [pc, #184]	; (80013cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001312:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001316:	4a2d      	ldr	r2, [pc, #180]	; (80013cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001318:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800131c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001320:	e04d      	b.n	80013be <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001328:	d141      	bne.n	80013ae <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800132a:	4b28      	ldr	r3, [pc, #160]	; (80013cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001332:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001336:	d131      	bne.n	800139c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001338:	4b24      	ldr	r3, [pc, #144]	; (80013cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800133a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800133e:	4a23      	ldr	r2, [pc, #140]	; (80013cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001340:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001344:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001348:	4b20      	ldr	r3, [pc, #128]	; (80013cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001350:	4a1e      	ldr	r2, [pc, #120]	; (80013cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001352:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001356:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001358:	4b1d      	ldr	r3, [pc, #116]	; (80013d0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	2232      	movs	r2, #50	; 0x32
 800135e:	fb02 f303 	mul.w	r3, r2, r3
 8001362:	4a1c      	ldr	r2, [pc, #112]	; (80013d4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001364:	fba2 2303 	umull	r2, r3, r2, r3
 8001368:	0c9b      	lsrs	r3, r3, #18
 800136a:	3301      	adds	r3, #1
 800136c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800136e:	e002      	b.n	8001376 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	3b01      	subs	r3, #1
 8001374:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001376:	4b15      	ldr	r3, [pc, #84]	; (80013cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001378:	695b      	ldr	r3, [r3, #20]
 800137a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800137e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001382:	d102      	bne.n	800138a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d1f2      	bne.n	8001370 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800138a:	4b10      	ldr	r3, [pc, #64]	; (80013cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800138c:	695b      	ldr	r3, [r3, #20]
 800138e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001392:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001396:	d112      	bne.n	80013be <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001398:	2303      	movs	r3, #3
 800139a:	e011      	b.n	80013c0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800139c:	4b0b      	ldr	r3, [pc, #44]	; (80013cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800139e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80013a2:	4a0a      	ldr	r2, [pc, #40]	; (80013cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80013ac:	e007      	b.n	80013be <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80013ae:	4b07      	ldr	r3, [pc, #28]	; (80013cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80013b6:	4a05      	ldr	r2, [pc, #20]	; (80013cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013bc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80013be:	2300      	movs	r3, #0
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3714      	adds	r7, #20
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr
 80013cc:	40007000 	.word	0x40007000
 80013d0:	20000000 	.word	0x20000000
 80013d4:	431bde83 	.word	0x431bde83

080013d8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80013dc:	4b05      	ldr	r3, [pc, #20]	; (80013f4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	4a04      	ldr	r2, [pc, #16]	; (80013f4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80013e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013e6:	6093      	str	r3, [r2, #8]
}
 80013e8:	bf00      	nop
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	40007000 	.word	0x40007000

080013f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b088      	sub	sp, #32
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d101      	bne.n	800140a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e306      	b.n	8001a18 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f003 0301 	and.w	r3, r3, #1
 8001412:	2b00      	cmp	r3, #0
 8001414:	d075      	beq.n	8001502 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001416:	4b97      	ldr	r3, [pc, #604]	; (8001674 <HAL_RCC_OscConfig+0x27c>)
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	f003 030c 	and.w	r3, r3, #12
 800141e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001420:	4b94      	ldr	r3, [pc, #592]	; (8001674 <HAL_RCC_OscConfig+0x27c>)
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	f003 0303 	and.w	r3, r3, #3
 8001428:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	2b0c      	cmp	r3, #12
 800142e:	d102      	bne.n	8001436 <HAL_RCC_OscConfig+0x3e>
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	2b03      	cmp	r3, #3
 8001434:	d002      	beq.n	800143c <HAL_RCC_OscConfig+0x44>
 8001436:	69bb      	ldr	r3, [r7, #24]
 8001438:	2b08      	cmp	r3, #8
 800143a:	d10b      	bne.n	8001454 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800143c:	4b8d      	ldr	r3, [pc, #564]	; (8001674 <HAL_RCC_OscConfig+0x27c>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001444:	2b00      	cmp	r3, #0
 8001446:	d05b      	beq.n	8001500 <HAL_RCC_OscConfig+0x108>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d157      	bne.n	8001500 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001450:	2301      	movs	r3, #1
 8001452:	e2e1      	b.n	8001a18 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800145c:	d106      	bne.n	800146c <HAL_RCC_OscConfig+0x74>
 800145e:	4b85      	ldr	r3, [pc, #532]	; (8001674 <HAL_RCC_OscConfig+0x27c>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a84      	ldr	r2, [pc, #528]	; (8001674 <HAL_RCC_OscConfig+0x27c>)
 8001464:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001468:	6013      	str	r3, [r2, #0]
 800146a:	e01d      	b.n	80014a8 <HAL_RCC_OscConfig+0xb0>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001474:	d10c      	bne.n	8001490 <HAL_RCC_OscConfig+0x98>
 8001476:	4b7f      	ldr	r3, [pc, #508]	; (8001674 <HAL_RCC_OscConfig+0x27c>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a7e      	ldr	r2, [pc, #504]	; (8001674 <HAL_RCC_OscConfig+0x27c>)
 800147c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001480:	6013      	str	r3, [r2, #0]
 8001482:	4b7c      	ldr	r3, [pc, #496]	; (8001674 <HAL_RCC_OscConfig+0x27c>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a7b      	ldr	r2, [pc, #492]	; (8001674 <HAL_RCC_OscConfig+0x27c>)
 8001488:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800148c:	6013      	str	r3, [r2, #0]
 800148e:	e00b      	b.n	80014a8 <HAL_RCC_OscConfig+0xb0>
 8001490:	4b78      	ldr	r3, [pc, #480]	; (8001674 <HAL_RCC_OscConfig+0x27c>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a77      	ldr	r2, [pc, #476]	; (8001674 <HAL_RCC_OscConfig+0x27c>)
 8001496:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800149a:	6013      	str	r3, [r2, #0]
 800149c:	4b75      	ldr	r3, [pc, #468]	; (8001674 <HAL_RCC_OscConfig+0x27c>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a74      	ldr	r2, [pc, #464]	; (8001674 <HAL_RCC_OscConfig+0x27c>)
 80014a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d013      	beq.n	80014d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014b0:	f7ff fc2c 	bl	8000d0c <HAL_GetTick>
 80014b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014b6:	e008      	b.n	80014ca <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014b8:	f7ff fc28 	bl	8000d0c <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	2b64      	cmp	r3, #100	; 0x64
 80014c4:	d901      	bls.n	80014ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80014c6:	2303      	movs	r3, #3
 80014c8:	e2a6      	b.n	8001a18 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014ca:	4b6a      	ldr	r3, [pc, #424]	; (8001674 <HAL_RCC_OscConfig+0x27c>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d0f0      	beq.n	80014b8 <HAL_RCC_OscConfig+0xc0>
 80014d6:	e014      	b.n	8001502 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014d8:	f7ff fc18 	bl	8000d0c <HAL_GetTick>
 80014dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014de:	e008      	b.n	80014f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014e0:	f7ff fc14 	bl	8000d0c <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	2b64      	cmp	r3, #100	; 0x64
 80014ec:	d901      	bls.n	80014f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	e292      	b.n	8001a18 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014f2:	4b60      	ldr	r3, [pc, #384]	; (8001674 <HAL_RCC_OscConfig+0x27c>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d1f0      	bne.n	80014e0 <HAL_RCC_OscConfig+0xe8>
 80014fe:	e000      	b.n	8001502 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001500:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f003 0302 	and.w	r3, r3, #2
 800150a:	2b00      	cmp	r3, #0
 800150c:	d075      	beq.n	80015fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800150e:	4b59      	ldr	r3, [pc, #356]	; (8001674 <HAL_RCC_OscConfig+0x27c>)
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	f003 030c 	and.w	r3, r3, #12
 8001516:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001518:	4b56      	ldr	r3, [pc, #344]	; (8001674 <HAL_RCC_OscConfig+0x27c>)
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	f003 0303 	and.w	r3, r3, #3
 8001520:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001522:	69bb      	ldr	r3, [r7, #24]
 8001524:	2b0c      	cmp	r3, #12
 8001526:	d102      	bne.n	800152e <HAL_RCC_OscConfig+0x136>
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	2b02      	cmp	r3, #2
 800152c:	d002      	beq.n	8001534 <HAL_RCC_OscConfig+0x13c>
 800152e:	69bb      	ldr	r3, [r7, #24]
 8001530:	2b04      	cmp	r3, #4
 8001532:	d11f      	bne.n	8001574 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001534:	4b4f      	ldr	r3, [pc, #316]	; (8001674 <HAL_RCC_OscConfig+0x27c>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800153c:	2b00      	cmp	r3, #0
 800153e:	d005      	beq.n	800154c <HAL_RCC_OscConfig+0x154>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d101      	bne.n	800154c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001548:	2301      	movs	r3, #1
 800154a:	e265      	b.n	8001a18 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800154c:	4b49      	ldr	r3, [pc, #292]	; (8001674 <HAL_RCC_OscConfig+0x27c>)
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	691b      	ldr	r3, [r3, #16]
 8001558:	061b      	lsls	r3, r3, #24
 800155a:	4946      	ldr	r1, [pc, #280]	; (8001674 <HAL_RCC_OscConfig+0x27c>)
 800155c:	4313      	orrs	r3, r2
 800155e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001560:	4b45      	ldr	r3, [pc, #276]	; (8001678 <HAL_RCC_OscConfig+0x280>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff fb85 	bl	8000c74 <HAL_InitTick>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d043      	beq.n	80015f8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	e251      	b.n	8001a18 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d023      	beq.n	80015c4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800157c:	4b3d      	ldr	r3, [pc, #244]	; (8001674 <HAL_RCC_OscConfig+0x27c>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a3c      	ldr	r2, [pc, #240]	; (8001674 <HAL_RCC_OscConfig+0x27c>)
 8001582:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001586:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001588:	f7ff fbc0 	bl	8000d0c <HAL_GetTick>
 800158c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800158e:	e008      	b.n	80015a2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001590:	f7ff fbbc 	bl	8000d0c <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	2b02      	cmp	r3, #2
 800159c:	d901      	bls.n	80015a2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e23a      	b.n	8001a18 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015a2:	4b34      	ldr	r3, [pc, #208]	; (8001674 <HAL_RCC_OscConfig+0x27c>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d0f0      	beq.n	8001590 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015ae:	4b31      	ldr	r3, [pc, #196]	; (8001674 <HAL_RCC_OscConfig+0x27c>)
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	691b      	ldr	r3, [r3, #16]
 80015ba:	061b      	lsls	r3, r3, #24
 80015bc:	492d      	ldr	r1, [pc, #180]	; (8001674 <HAL_RCC_OscConfig+0x27c>)
 80015be:	4313      	orrs	r3, r2
 80015c0:	604b      	str	r3, [r1, #4]
 80015c2:	e01a      	b.n	80015fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015c4:	4b2b      	ldr	r3, [pc, #172]	; (8001674 <HAL_RCC_OscConfig+0x27c>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a2a      	ldr	r2, [pc, #168]	; (8001674 <HAL_RCC_OscConfig+0x27c>)
 80015ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015d0:	f7ff fb9c 	bl	8000d0c <HAL_GetTick>
 80015d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015d6:	e008      	b.n	80015ea <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015d8:	f7ff fb98 	bl	8000d0c <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d901      	bls.n	80015ea <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80015e6:	2303      	movs	r3, #3
 80015e8:	e216      	b.n	8001a18 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015ea:	4b22      	ldr	r3, [pc, #136]	; (8001674 <HAL_RCC_OscConfig+0x27c>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d1f0      	bne.n	80015d8 <HAL_RCC_OscConfig+0x1e0>
 80015f6:	e000      	b.n	80015fa <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015f8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 0308 	and.w	r3, r3, #8
 8001602:	2b00      	cmp	r3, #0
 8001604:	d041      	beq.n	800168a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	695b      	ldr	r3, [r3, #20]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d01c      	beq.n	8001648 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800160e:	4b19      	ldr	r3, [pc, #100]	; (8001674 <HAL_RCC_OscConfig+0x27c>)
 8001610:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001614:	4a17      	ldr	r2, [pc, #92]	; (8001674 <HAL_RCC_OscConfig+0x27c>)
 8001616:	f043 0301 	orr.w	r3, r3, #1
 800161a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800161e:	f7ff fb75 	bl	8000d0c <HAL_GetTick>
 8001622:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001624:	e008      	b.n	8001638 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001626:	f7ff fb71 	bl	8000d0c <HAL_GetTick>
 800162a:	4602      	mov	r2, r0
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	2b02      	cmp	r3, #2
 8001632:	d901      	bls.n	8001638 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001634:	2303      	movs	r3, #3
 8001636:	e1ef      	b.n	8001a18 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001638:	4b0e      	ldr	r3, [pc, #56]	; (8001674 <HAL_RCC_OscConfig+0x27c>)
 800163a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	2b00      	cmp	r3, #0
 8001644:	d0ef      	beq.n	8001626 <HAL_RCC_OscConfig+0x22e>
 8001646:	e020      	b.n	800168a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001648:	4b0a      	ldr	r3, [pc, #40]	; (8001674 <HAL_RCC_OscConfig+0x27c>)
 800164a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800164e:	4a09      	ldr	r2, [pc, #36]	; (8001674 <HAL_RCC_OscConfig+0x27c>)
 8001650:	f023 0301 	bic.w	r3, r3, #1
 8001654:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001658:	f7ff fb58 	bl	8000d0c <HAL_GetTick>
 800165c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800165e:	e00d      	b.n	800167c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001660:	f7ff fb54 	bl	8000d0c <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	2b02      	cmp	r3, #2
 800166c:	d906      	bls.n	800167c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e1d2      	b.n	8001a18 <HAL_RCC_OscConfig+0x620>
 8001672:	bf00      	nop
 8001674:	40021000 	.word	0x40021000
 8001678:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800167c:	4b8c      	ldr	r3, [pc, #560]	; (80018b0 <HAL_RCC_OscConfig+0x4b8>)
 800167e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001682:	f003 0302 	and.w	r3, r3, #2
 8001686:	2b00      	cmp	r3, #0
 8001688:	d1ea      	bne.n	8001660 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 0304 	and.w	r3, r3, #4
 8001692:	2b00      	cmp	r3, #0
 8001694:	f000 80a6 	beq.w	80017e4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001698:	2300      	movs	r3, #0
 800169a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800169c:	4b84      	ldr	r3, [pc, #528]	; (80018b0 <HAL_RCC_OscConfig+0x4b8>)
 800169e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d101      	bne.n	80016ac <HAL_RCC_OscConfig+0x2b4>
 80016a8:	2301      	movs	r3, #1
 80016aa:	e000      	b.n	80016ae <HAL_RCC_OscConfig+0x2b6>
 80016ac:	2300      	movs	r3, #0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d00d      	beq.n	80016ce <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016b2:	4b7f      	ldr	r3, [pc, #508]	; (80018b0 <HAL_RCC_OscConfig+0x4b8>)
 80016b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016b6:	4a7e      	ldr	r2, [pc, #504]	; (80018b0 <HAL_RCC_OscConfig+0x4b8>)
 80016b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016bc:	6593      	str	r3, [r2, #88]	; 0x58
 80016be:	4b7c      	ldr	r3, [pc, #496]	; (80018b0 <HAL_RCC_OscConfig+0x4b8>)
 80016c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016c6:	60fb      	str	r3, [r7, #12]
 80016c8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80016ca:	2301      	movs	r3, #1
 80016cc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016ce:	4b79      	ldr	r3, [pc, #484]	; (80018b4 <HAL_RCC_OscConfig+0x4bc>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d118      	bne.n	800170c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016da:	4b76      	ldr	r3, [pc, #472]	; (80018b4 <HAL_RCC_OscConfig+0x4bc>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a75      	ldr	r2, [pc, #468]	; (80018b4 <HAL_RCC_OscConfig+0x4bc>)
 80016e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016e6:	f7ff fb11 	bl	8000d0c <HAL_GetTick>
 80016ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016ec:	e008      	b.n	8001700 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016ee:	f7ff fb0d 	bl	8000d0c <HAL_GetTick>
 80016f2:	4602      	mov	r2, r0
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d901      	bls.n	8001700 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80016fc:	2303      	movs	r3, #3
 80016fe:	e18b      	b.n	8001a18 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001700:	4b6c      	ldr	r3, [pc, #432]	; (80018b4 <HAL_RCC_OscConfig+0x4bc>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001708:	2b00      	cmp	r3, #0
 800170a:	d0f0      	beq.n	80016ee <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	2b01      	cmp	r3, #1
 8001712:	d108      	bne.n	8001726 <HAL_RCC_OscConfig+0x32e>
 8001714:	4b66      	ldr	r3, [pc, #408]	; (80018b0 <HAL_RCC_OscConfig+0x4b8>)
 8001716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800171a:	4a65      	ldr	r2, [pc, #404]	; (80018b0 <HAL_RCC_OscConfig+0x4b8>)
 800171c:	f043 0301 	orr.w	r3, r3, #1
 8001720:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001724:	e024      	b.n	8001770 <HAL_RCC_OscConfig+0x378>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	2b05      	cmp	r3, #5
 800172c:	d110      	bne.n	8001750 <HAL_RCC_OscConfig+0x358>
 800172e:	4b60      	ldr	r3, [pc, #384]	; (80018b0 <HAL_RCC_OscConfig+0x4b8>)
 8001730:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001734:	4a5e      	ldr	r2, [pc, #376]	; (80018b0 <HAL_RCC_OscConfig+0x4b8>)
 8001736:	f043 0304 	orr.w	r3, r3, #4
 800173a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800173e:	4b5c      	ldr	r3, [pc, #368]	; (80018b0 <HAL_RCC_OscConfig+0x4b8>)
 8001740:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001744:	4a5a      	ldr	r2, [pc, #360]	; (80018b0 <HAL_RCC_OscConfig+0x4b8>)
 8001746:	f043 0301 	orr.w	r3, r3, #1
 800174a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800174e:	e00f      	b.n	8001770 <HAL_RCC_OscConfig+0x378>
 8001750:	4b57      	ldr	r3, [pc, #348]	; (80018b0 <HAL_RCC_OscConfig+0x4b8>)
 8001752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001756:	4a56      	ldr	r2, [pc, #344]	; (80018b0 <HAL_RCC_OscConfig+0x4b8>)
 8001758:	f023 0301 	bic.w	r3, r3, #1
 800175c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001760:	4b53      	ldr	r3, [pc, #332]	; (80018b0 <HAL_RCC_OscConfig+0x4b8>)
 8001762:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001766:	4a52      	ldr	r2, [pc, #328]	; (80018b0 <HAL_RCC_OscConfig+0x4b8>)
 8001768:	f023 0304 	bic.w	r3, r3, #4
 800176c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d016      	beq.n	80017a6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001778:	f7ff fac8 	bl	8000d0c <HAL_GetTick>
 800177c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800177e:	e00a      	b.n	8001796 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001780:	f7ff fac4 	bl	8000d0c <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	f241 3288 	movw	r2, #5000	; 0x1388
 800178e:	4293      	cmp	r3, r2
 8001790:	d901      	bls.n	8001796 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e140      	b.n	8001a18 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001796:	4b46      	ldr	r3, [pc, #280]	; (80018b0 <HAL_RCC_OscConfig+0x4b8>)
 8001798:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800179c:	f003 0302 	and.w	r3, r3, #2
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d0ed      	beq.n	8001780 <HAL_RCC_OscConfig+0x388>
 80017a4:	e015      	b.n	80017d2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017a6:	f7ff fab1 	bl	8000d0c <HAL_GetTick>
 80017aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017ac:	e00a      	b.n	80017c4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017ae:	f7ff faad 	bl	8000d0c <HAL_GetTick>
 80017b2:	4602      	mov	r2, r0
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80017bc:	4293      	cmp	r3, r2
 80017be:	d901      	bls.n	80017c4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80017c0:	2303      	movs	r3, #3
 80017c2:	e129      	b.n	8001a18 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017c4:	4b3a      	ldr	r3, [pc, #232]	; (80018b0 <HAL_RCC_OscConfig+0x4b8>)
 80017c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017ca:	f003 0302 	and.w	r3, r3, #2
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d1ed      	bne.n	80017ae <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80017d2:	7ffb      	ldrb	r3, [r7, #31]
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d105      	bne.n	80017e4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017d8:	4b35      	ldr	r3, [pc, #212]	; (80018b0 <HAL_RCC_OscConfig+0x4b8>)
 80017da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017dc:	4a34      	ldr	r2, [pc, #208]	; (80018b0 <HAL_RCC_OscConfig+0x4b8>)
 80017de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017e2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 0320 	and.w	r3, r3, #32
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d03c      	beq.n	800186a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	699b      	ldr	r3, [r3, #24]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d01c      	beq.n	8001832 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80017f8:	4b2d      	ldr	r3, [pc, #180]	; (80018b0 <HAL_RCC_OscConfig+0x4b8>)
 80017fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017fe:	4a2c      	ldr	r2, [pc, #176]	; (80018b0 <HAL_RCC_OscConfig+0x4b8>)
 8001800:	f043 0301 	orr.w	r3, r3, #1
 8001804:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001808:	f7ff fa80 	bl	8000d0c <HAL_GetTick>
 800180c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800180e:	e008      	b.n	8001822 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001810:	f7ff fa7c 	bl	8000d0c <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	2b02      	cmp	r3, #2
 800181c:	d901      	bls.n	8001822 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e0fa      	b.n	8001a18 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001822:	4b23      	ldr	r3, [pc, #140]	; (80018b0 <HAL_RCC_OscConfig+0x4b8>)
 8001824:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001828:	f003 0302 	and.w	r3, r3, #2
 800182c:	2b00      	cmp	r3, #0
 800182e:	d0ef      	beq.n	8001810 <HAL_RCC_OscConfig+0x418>
 8001830:	e01b      	b.n	800186a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001832:	4b1f      	ldr	r3, [pc, #124]	; (80018b0 <HAL_RCC_OscConfig+0x4b8>)
 8001834:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001838:	4a1d      	ldr	r2, [pc, #116]	; (80018b0 <HAL_RCC_OscConfig+0x4b8>)
 800183a:	f023 0301 	bic.w	r3, r3, #1
 800183e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001842:	f7ff fa63 	bl	8000d0c <HAL_GetTick>
 8001846:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001848:	e008      	b.n	800185c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800184a:	f7ff fa5f 	bl	8000d0c <HAL_GetTick>
 800184e:	4602      	mov	r2, r0
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	2b02      	cmp	r3, #2
 8001856:	d901      	bls.n	800185c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001858:	2303      	movs	r3, #3
 800185a:	e0dd      	b.n	8001a18 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800185c:	4b14      	ldr	r3, [pc, #80]	; (80018b0 <HAL_RCC_OscConfig+0x4b8>)
 800185e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001862:	f003 0302 	and.w	r3, r3, #2
 8001866:	2b00      	cmp	r3, #0
 8001868:	d1ef      	bne.n	800184a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	69db      	ldr	r3, [r3, #28]
 800186e:	2b00      	cmp	r3, #0
 8001870:	f000 80d1 	beq.w	8001a16 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001874:	4b0e      	ldr	r3, [pc, #56]	; (80018b0 <HAL_RCC_OscConfig+0x4b8>)
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	f003 030c 	and.w	r3, r3, #12
 800187c:	2b0c      	cmp	r3, #12
 800187e:	f000 808b 	beq.w	8001998 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	69db      	ldr	r3, [r3, #28]
 8001886:	2b02      	cmp	r3, #2
 8001888:	d15e      	bne.n	8001948 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800188a:	4b09      	ldr	r3, [pc, #36]	; (80018b0 <HAL_RCC_OscConfig+0x4b8>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a08      	ldr	r2, [pc, #32]	; (80018b0 <HAL_RCC_OscConfig+0x4b8>)
 8001890:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001894:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001896:	f7ff fa39 	bl	8000d0c <HAL_GetTick>
 800189a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800189c:	e00c      	b.n	80018b8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800189e:	f7ff fa35 	bl	8000d0c <HAL_GetTick>
 80018a2:	4602      	mov	r2, r0
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d905      	bls.n	80018b8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80018ac:	2303      	movs	r3, #3
 80018ae:	e0b3      	b.n	8001a18 <HAL_RCC_OscConfig+0x620>
 80018b0:	40021000 	.word	0x40021000
 80018b4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018b8:	4b59      	ldr	r3, [pc, #356]	; (8001a20 <HAL_RCC_OscConfig+0x628>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d1ec      	bne.n	800189e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018c4:	4b56      	ldr	r3, [pc, #344]	; (8001a20 <HAL_RCC_OscConfig+0x628>)
 80018c6:	68da      	ldr	r2, [r3, #12]
 80018c8:	4b56      	ldr	r3, [pc, #344]	; (8001a24 <HAL_RCC_OscConfig+0x62c>)
 80018ca:	4013      	ands	r3, r2
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	6a11      	ldr	r1, [r2, #32]
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80018d4:	3a01      	subs	r2, #1
 80018d6:	0112      	lsls	r2, r2, #4
 80018d8:	4311      	orrs	r1, r2
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80018de:	0212      	lsls	r2, r2, #8
 80018e0:	4311      	orrs	r1, r2
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80018e6:	0852      	lsrs	r2, r2, #1
 80018e8:	3a01      	subs	r2, #1
 80018ea:	0552      	lsls	r2, r2, #21
 80018ec:	4311      	orrs	r1, r2
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80018f2:	0852      	lsrs	r2, r2, #1
 80018f4:	3a01      	subs	r2, #1
 80018f6:	0652      	lsls	r2, r2, #25
 80018f8:	4311      	orrs	r1, r2
 80018fa:	687a      	ldr	r2, [r7, #4]
 80018fc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80018fe:	06d2      	lsls	r2, r2, #27
 8001900:	430a      	orrs	r2, r1
 8001902:	4947      	ldr	r1, [pc, #284]	; (8001a20 <HAL_RCC_OscConfig+0x628>)
 8001904:	4313      	orrs	r3, r2
 8001906:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001908:	4b45      	ldr	r3, [pc, #276]	; (8001a20 <HAL_RCC_OscConfig+0x628>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a44      	ldr	r2, [pc, #272]	; (8001a20 <HAL_RCC_OscConfig+0x628>)
 800190e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001912:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001914:	4b42      	ldr	r3, [pc, #264]	; (8001a20 <HAL_RCC_OscConfig+0x628>)
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	4a41      	ldr	r2, [pc, #260]	; (8001a20 <HAL_RCC_OscConfig+0x628>)
 800191a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800191e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001920:	f7ff f9f4 	bl	8000d0c <HAL_GetTick>
 8001924:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001926:	e008      	b.n	800193a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001928:	f7ff f9f0 	bl	8000d0c <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	2b02      	cmp	r3, #2
 8001934:	d901      	bls.n	800193a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e06e      	b.n	8001a18 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800193a:	4b39      	ldr	r3, [pc, #228]	; (8001a20 <HAL_RCC_OscConfig+0x628>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d0f0      	beq.n	8001928 <HAL_RCC_OscConfig+0x530>
 8001946:	e066      	b.n	8001a16 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001948:	4b35      	ldr	r3, [pc, #212]	; (8001a20 <HAL_RCC_OscConfig+0x628>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a34      	ldr	r2, [pc, #208]	; (8001a20 <HAL_RCC_OscConfig+0x628>)
 800194e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001952:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001954:	4b32      	ldr	r3, [pc, #200]	; (8001a20 <HAL_RCC_OscConfig+0x628>)
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	4a31      	ldr	r2, [pc, #196]	; (8001a20 <HAL_RCC_OscConfig+0x628>)
 800195a:	f023 0303 	bic.w	r3, r3, #3
 800195e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001960:	4b2f      	ldr	r3, [pc, #188]	; (8001a20 <HAL_RCC_OscConfig+0x628>)
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	4a2e      	ldr	r2, [pc, #184]	; (8001a20 <HAL_RCC_OscConfig+0x628>)
 8001966:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800196a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800196e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001970:	f7ff f9cc 	bl	8000d0c <HAL_GetTick>
 8001974:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001976:	e008      	b.n	800198a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001978:	f7ff f9c8 	bl	8000d0c <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	2b02      	cmp	r3, #2
 8001984:	d901      	bls.n	800198a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e046      	b.n	8001a18 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800198a:	4b25      	ldr	r3, [pc, #148]	; (8001a20 <HAL_RCC_OscConfig+0x628>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d1f0      	bne.n	8001978 <HAL_RCC_OscConfig+0x580>
 8001996:	e03e      	b.n	8001a16 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	69db      	ldr	r3, [r3, #28]
 800199c:	2b01      	cmp	r3, #1
 800199e:	d101      	bne.n	80019a4 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e039      	b.n	8001a18 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80019a4:	4b1e      	ldr	r3, [pc, #120]	; (8001a20 <HAL_RCC_OscConfig+0x628>)
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	f003 0203 	and.w	r2, r3, #3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6a1b      	ldr	r3, [r3, #32]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d12c      	bne.n	8001a12 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c2:	3b01      	subs	r3, #1
 80019c4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d123      	bne.n	8001a12 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d11b      	bne.n	8001a12 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d113      	bne.n	8001a12 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f4:	085b      	lsrs	r3, r3, #1
 80019f6:	3b01      	subs	r3, #1
 80019f8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d109      	bne.n	8001a12 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a08:	085b      	lsrs	r3, r3, #1
 8001a0a:	3b01      	subs	r3, #1
 8001a0c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d001      	beq.n	8001a16 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e000      	b.n	8001a18 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8001a16:	2300      	movs	r3, #0
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3720      	adds	r7, #32
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	40021000 	.word	0x40021000
 8001a24:	019f800c 	.word	0x019f800c

08001a28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b086      	sub	sp, #24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001a32:	2300      	movs	r3, #0
 8001a34:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d101      	bne.n	8001a40 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e11e      	b.n	8001c7e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a40:	4b91      	ldr	r3, [pc, #580]	; (8001c88 <HAL_RCC_ClockConfig+0x260>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 030f 	and.w	r3, r3, #15
 8001a48:	683a      	ldr	r2, [r7, #0]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d910      	bls.n	8001a70 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a4e:	4b8e      	ldr	r3, [pc, #568]	; (8001c88 <HAL_RCC_ClockConfig+0x260>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f023 020f 	bic.w	r2, r3, #15
 8001a56:	498c      	ldr	r1, [pc, #560]	; (8001c88 <HAL_RCC_ClockConfig+0x260>)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a5e:	4b8a      	ldr	r3, [pc, #552]	; (8001c88 <HAL_RCC_ClockConfig+0x260>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 030f 	and.w	r3, r3, #15
 8001a66:	683a      	ldr	r2, [r7, #0]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d001      	beq.n	8001a70 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e106      	b.n	8001c7e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0301 	and.w	r3, r3, #1
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d073      	beq.n	8001b64 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	2b03      	cmp	r3, #3
 8001a82:	d129      	bne.n	8001ad8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a84:	4b81      	ldr	r3, [pc, #516]	; (8001c8c <HAL_RCC_ClockConfig+0x264>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d101      	bne.n	8001a94 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e0f4      	b.n	8001c7e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001a94:	f000 f99e 	bl	8001dd4 <RCC_GetSysClockFreqFromPLLSource>
 8001a98:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	4a7c      	ldr	r2, [pc, #496]	; (8001c90 <HAL_RCC_ClockConfig+0x268>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d93f      	bls.n	8001b22 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001aa2:	4b7a      	ldr	r3, [pc, #488]	; (8001c8c <HAL_RCC_ClockConfig+0x264>)
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d009      	beq.n	8001ac2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d033      	beq.n	8001b22 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d12f      	bne.n	8001b22 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001ac2:	4b72      	ldr	r3, [pc, #456]	; (8001c8c <HAL_RCC_ClockConfig+0x264>)
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001aca:	4a70      	ldr	r2, [pc, #448]	; (8001c8c <HAL_RCC_ClockConfig+0x264>)
 8001acc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ad0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001ad2:	2380      	movs	r3, #128	; 0x80
 8001ad4:	617b      	str	r3, [r7, #20]
 8001ad6:	e024      	b.n	8001b22 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d107      	bne.n	8001af0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ae0:	4b6a      	ldr	r3, [pc, #424]	; (8001c8c <HAL_RCC_ClockConfig+0x264>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d109      	bne.n	8001b00 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e0c6      	b.n	8001c7e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001af0:	4b66      	ldr	r3, [pc, #408]	; (8001c8c <HAL_RCC_ClockConfig+0x264>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d101      	bne.n	8001b00 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e0be      	b.n	8001c7e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001b00:	f000 f8ce 	bl	8001ca0 <HAL_RCC_GetSysClockFreq>
 8001b04:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	4a61      	ldr	r2, [pc, #388]	; (8001c90 <HAL_RCC_ClockConfig+0x268>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d909      	bls.n	8001b22 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001b0e:	4b5f      	ldr	r3, [pc, #380]	; (8001c8c <HAL_RCC_ClockConfig+0x264>)
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b16:	4a5d      	ldr	r2, [pc, #372]	; (8001c8c <HAL_RCC_ClockConfig+0x264>)
 8001b18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b1c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001b1e:	2380      	movs	r3, #128	; 0x80
 8001b20:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b22:	4b5a      	ldr	r3, [pc, #360]	; (8001c8c <HAL_RCC_ClockConfig+0x264>)
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	f023 0203 	bic.w	r2, r3, #3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	4957      	ldr	r1, [pc, #348]	; (8001c8c <HAL_RCC_ClockConfig+0x264>)
 8001b30:	4313      	orrs	r3, r2
 8001b32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b34:	f7ff f8ea 	bl	8000d0c <HAL_GetTick>
 8001b38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b3a:	e00a      	b.n	8001b52 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b3c:	f7ff f8e6 	bl	8000d0c <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d901      	bls.n	8001b52 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e095      	b.n	8001c7e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b52:	4b4e      	ldr	r3, [pc, #312]	; (8001c8c <HAL_RCC_ClockConfig+0x264>)
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	f003 020c 	and.w	r2, r3, #12
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d1eb      	bne.n	8001b3c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 0302 	and.w	r3, r3, #2
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d023      	beq.n	8001bb8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0304 	and.w	r3, r3, #4
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d005      	beq.n	8001b88 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b7c:	4b43      	ldr	r3, [pc, #268]	; (8001c8c <HAL_RCC_ClockConfig+0x264>)
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	4a42      	ldr	r2, [pc, #264]	; (8001c8c <HAL_RCC_ClockConfig+0x264>)
 8001b82:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001b86:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0308 	and.w	r3, r3, #8
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d007      	beq.n	8001ba4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001b94:	4b3d      	ldr	r3, [pc, #244]	; (8001c8c <HAL_RCC_ClockConfig+0x264>)
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001b9c:	4a3b      	ldr	r2, [pc, #236]	; (8001c8c <HAL_RCC_ClockConfig+0x264>)
 8001b9e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001ba2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ba4:	4b39      	ldr	r3, [pc, #228]	; (8001c8c <HAL_RCC_ClockConfig+0x264>)
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	4936      	ldr	r1, [pc, #216]	; (8001c8c <HAL_RCC_ClockConfig+0x264>)
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	608b      	str	r3, [r1, #8]
 8001bb6:	e008      	b.n	8001bca <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	2b80      	cmp	r3, #128	; 0x80
 8001bbc:	d105      	bne.n	8001bca <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001bbe:	4b33      	ldr	r3, [pc, #204]	; (8001c8c <HAL_RCC_ClockConfig+0x264>)
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	4a32      	ldr	r2, [pc, #200]	; (8001c8c <HAL_RCC_ClockConfig+0x264>)
 8001bc4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001bc8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bca:	4b2f      	ldr	r3, [pc, #188]	; (8001c88 <HAL_RCC_ClockConfig+0x260>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 030f 	and.w	r3, r3, #15
 8001bd2:	683a      	ldr	r2, [r7, #0]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d21d      	bcs.n	8001c14 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bd8:	4b2b      	ldr	r3, [pc, #172]	; (8001c88 <HAL_RCC_ClockConfig+0x260>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f023 020f 	bic.w	r2, r3, #15
 8001be0:	4929      	ldr	r1, [pc, #164]	; (8001c88 <HAL_RCC_ClockConfig+0x260>)
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001be8:	f7ff f890 	bl	8000d0c <HAL_GetTick>
 8001bec:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bee:	e00a      	b.n	8001c06 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bf0:	f7ff f88c 	bl	8000d0c <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d901      	bls.n	8001c06 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e03b      	b.n	8001c7e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c06:	4b20      	ldr	r3, [pc, #128]	; (8001c88 <HAL_RCC_ClockConfig+0x260>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 030f 	and.w	r3, r3, #15
 8001c0e:	683a      	ldr	r2, [r7, #0]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d1ed      	bne.n	8001bf0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 0304 	and.w	r3, r3, #4
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d008      	beq.n	8001c32 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c20:	4b1a      	ldr	r3, [pc, #104]	; (8001c8c <HAL_RCC_ClockConfig+0x264>)
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	4917      	ldr	r1, [pc, #92]	; (8001c8c <HAL_RCC_ClockConfig+0x264>)
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0308 	and.w	r3, r3, #8
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d009      	beq.n	8001c52 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c3e:	4b13      	ldr	r3, [pc, #76]	; (8001c8c <HAL_RCC_ClockConfig+0x264>)
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	691b      	ldr	r3, [r3, #16]
 8001c4a:	00db      	lsls	r3, r3, #3
 8001c4c:	490f      	ldr	r1, [pc, #60]	; (8001c8c <HAL_RCC_ClockConfig+0x264>)
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c52:	f000 f825 	bl	8001ca0 <HAL_RCC_GetSysClockFreq>
 8001c56:	4602      	mov	r2, r0
 8001c58:	4b0c      	ldr	r3, [pc, #48]	; (8001c8c <HAL_RCC_ClockConfig+0x264>)
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	091b      	lsrs	r3, r3, #4
 8001c5e:	f003 030f 	and.w	r3, r3, #15
 8001c62:	490c      	ldr	r1, [pc, #48]	; (8001c94 <HAL_RCC_ClockConfig+0x26c>)
 8001c64:	5ccb      	ldrb	r3, [r1, r3]
 8001c66:	f003 031f 	and.w	r3, r3, #31
 8001c6a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c6e:	4a0a      	ldr	r2, [pc, #40]	; (8001c98 <HAL_RCC_ClockConfig+0x270>)
 8001c70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001c72:	4b0a      	ldr	r3, [pc, #40]	; (8001c9c <HAL_RCC_ClockConfig+0x274>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7fe fffc 	bl	8000c74 <HAL_InitTick>
 8001c7c:	4603      	mov	r3, r0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3718      	adds	r7, #24
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	40022000 	.word	0x40022000
 8001c8c:	40021000 	.word	0x40021000
 8001c90:	04c4b400 	.word	0x04c4b400
 8001c94:	080050bc 	.word	0x080050bc
 8001c98:	20000000 	.word	0x20000000
 8001c9c:	20000004 	.word	0x20000004

08001ca0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b087      	sub	sp, #28
 8001ca4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001ca6:	4b2c      	ldr	r3, [pc, #176]	; (8001d58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	f003 030c 	and.w	r3, r3, #12
 8001cae:	2b04      	cmp	r3, #4
 8001cb0:	d102      	bne.n	8001cb8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001cb2:	4b2a      	ldr	r3, [pc, #168]	; (8001d5c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001cb4:	613b      	str	r3, [r7, #16]
 8001cb6:	e047      	b.n	8001d48 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001cb8:	4b27      	ldr	r3, [pc, #156]	; (8001d58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	f003 030c 	and.w	r3, r3, #12
 8001cc0:	2b08      	cmp	r3, #8
 8001cc2:	d102      	bne.n	8001cca <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001cc4:	4b26      	ldr	r3, [pc, #152]	; (8001d60 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001cc6:	613b      	str	r3, [r7, #16]
 8001cc8:	e03e      	b.n	8001d48 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001cca:	4b23      	ldr	r3, [pc, #140]	; (8001d58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	f003 030c 	and.w	r3, r3, #12
 8001cd2:	2b0c      	cmp	r3, #12
 8001cd4:	d136      	bne.n	8001d44 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001cd6:	4b20      	ldr	r3, [pc, #128]	; (8001d58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cd8:	68db      	ldr	r3, [r3, #12]
 8001cda:	f003 0303 	and.w	r3, r3, #3
 8001cde:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ce0:	4b1d      	ldr	r3, [pc, #116]	; (8001d58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	091b      	lsrs	r3, r3, #4
 8001ce6:	f003 030f 	and.w	r3, r3, #15
 8001cea:	3301      	adds	r3, #1
 8001cec:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2b03      	cmp	r3, #3
 8001cf2:	d10c      	bne.n	8001d0e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001cf4:	4a1a      	ldr	r2, [pc, #104]	; (8001d60 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cfc:	4a16      	ldr	r2, [pc, #88]	; (8001d58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cfe:	68d2      	ldr	r2, [r2, #12]
 8001d00:	0a12      	lsrs	r2, r2, #8
 8001d02:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001d06:	fb02 f303 	mul.w	r3, r2, r3
 8001d0a:	617b      	str	r3, [r7, #20]
      break;
 8001d0c:	e00c      	b.n	8001d28 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d0e:	4a13      	ldr	r2, [pc, #76]	; (8001d5c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d16:	4a10      	ldr	r2, [pc, #64]	; (8001d58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d18:	68d2      	ldr	r2, [r2, #12]
 8001d1a:	0a12      	lsrs	r2, r2, #8
 8001d1c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001d20:	fb02 f303 	mul.w	r3, r2, r3
 8001d24:	617b      	str	r3, [r7, #20]
      break;
 8001d26:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d28:	4b0b      	ldr	r3, [pc, #44]	; (8001d58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	0e5b      	lsrs	r3, r3, #25
 8001d2e:	f003 0303 	and.w	r3, r3, #3
 8001d32:	3301      	adds	r3, #1
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001d38:	697a      	ldr	r2, [r7, #20]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d40:	613b      	str	r3, [r7, #16]
 8001d42:	e001      	b.n	8001d48 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001d44:	2300      	movs	r3, #0
 8001d46:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001d48:	693b      	ldr	r3, [r7, #16]
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	371c      	adds	r7, #28
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	40021000 	.word	0x40021000
 8001d5c:	00f42400 	.word	0x00f42400
 8001d60:	016e3600 	.word	0x016e3600

08001d64 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d68:	4b03      	ldr	r3, [pc, #12]	; (8001d78 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	20000000 	.word	0x20000000

08001d7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001d80:	f7ff fff0 	bl	8001d64 <HAL_RCC_GetHCLKFreq>
 8001d84:	4602      	mov	r2, r0
 8001d86:	4b06      	ldr	r3, [pc, #24]	; (8001da0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	0a1b      	lsrs	r3, r3, #8
 8001d8c:	f003 0307 	and.w	r3, r3, #7
 8001d90:	4904      	ldr	r1, [pc, #16]	; (8001da4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d92:	5ccb      	ldrb	r3, [r1, r3]
 8001d94:	f003 031f 	and.w	r3, r3, #31
 8001d98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	40021000 	.word	0x40021000
 8001da4:	080050cc 	.word	0x080050cc

08001da8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001dac:	f7ff ffda 	bl	8001d64 <HAL_RCC_GetHCLKFreq>
 8001db0:	4602      	mov	r2, r0
 8001db2:	4b06      	ldr	r3, [pc, #24]	; (8001dcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	0adb      	lsrs	r3, r3, #11
 8001db8:	f003 0307 	and.w	r3, r3, #7
 8001dbc:	4904      	ldr	r1, [pc, #16]	; (8001dd0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001dbe:	5ccb      	ldrb	r3, [r1, r3]
 8001dc0:	f003 031f 	and.w	r3, r3, #31
 8001dc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	40021000 	.word	0x40021000
 8001dd0:	080050cc 	.word	0x080050cc

08001dd4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b087      	sub	sp, #28
 8001dd8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001dda:	4b1e      	ldr	r3, [pc, #120]	; (8001e54 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001ddc:	68db      	ldr	r3, [r3, #12]
 8001dde:	f003 0303 	and.w	r3, r3, #3
 8001de2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001de4:	4b1b      	ldr	r3, [pc, #108]	; (8001e54 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	091b      	lsrs	r3, r3, #4
 8001dea:	f003 030f 	and.w	r3, r3, #15
 8001dee:	3301      	adds	r3, #1
 8001df0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	2b03      	cmp	r3, #3
 8001df6:	d10c      	bne.n	8001e12 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001df8:	4a17      	ldr	r2, [pc, #92]	; (8001e58 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e00:	4a14      	ldr	r2, [pc, #80]	; (8001e54 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e02:	68d2      	ldr	r2, [r2, #12]
 8001e04:	0a12      	lsrs	r2, r2, #8
 8001e06:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001e0a:	fb02 f303 	mul.w	r3, r2, r3
 8001e0e:	617b      	str	r3, [r7, #20]
    break;
 8001e10:	e00c      	b.n	8001e2c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e12:	4a12      	ldr	r2, [pc, #72]	; (8001e5c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e1a:	4a0e      	ldr	r2, [pc, #56]	; (8001e54 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e1c:	68d2      	ldr	r2, [r2, #12]
 8001e1e:	0a12      	lsrs	r2, r2, #8
 8001e20:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001e24:	fb02 f303 	mul.w	r3, r2, r3
 8001e28:	617b      	str	r3, [r7, #20]
    break;
 8001e2a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e2c:	4b09      	ldr	r3, [pc, #36]	; (8001e54 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	0e5b      	lsrs	r3, r3, #25
 8001e32:	f003 0303 	and.w	r3, r3, #3
 8001e36:	3301      	adds	r3, #1
 8001e38:	005b      	lsls	r3, r3, #1
 8001e3a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001e3c:	697a      	ldr	r2, [r7, #20]
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e44:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001e46:	687b      	ldr	r3, [r7, #4]
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	371c      	adds	r7, #28
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr
 8001e54:	40021000 	.word	0x40021000
 8001e58:	016e3600 	.word	0x016e3600
 8001e5c:	00f42400 	.word	0x00f42400

08001e60 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b086      	sub	sp, #24
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001e68:	2300      	movs	r3, #0
 8001e6a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	f000 8098 	beq.w	8001fae <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e82:	4b43      	ldr	r3, [pc, #268]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d10d      	bne.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e8e:	4b40      	ldr	r3, [pc, #256]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e92:	4a3f      	ldr	r2, [pc, #252]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e98:	6593      	str	r3, [r2, #88]	; 0x58
 8001e9a:	4b3d      	ldr	r3, [pc, #244]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea2:	60bb      	str	r3, [r7, #8]
 8001ea4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001eaa:	4b3a      	ldr	r3, [pc, #232]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a39      	ldr	r2, [pc, #228]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001eb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eb4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001eb6:	f7fe ff29 	bl	8000d0c <HAL_GetTick>
 8001eba:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ebc:	e009      	b.n	8001ed2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ebe:	f7fe ff25 	bl	8000d0c <HAL_GetTick>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d902      	bls.n	8001ed2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	74fb      	strb	r3, [r7, #19]
        break;
 8001ed0:	e005      	b.n	8001ede <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ed2:	4b30      	ldr	r3, [pc, #192]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d0ef      	beq.n	8001ebe <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001ede:	7cfb      	ldrb	r3, [r7, #19]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d159      	bne.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001ee4:	4b2a      	ldr	r3, [pc, #168]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001eee:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d01e      	beq.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001efa:	697a      	ldr	r2, [r7, #20]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d019      	beq.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001f00:	4b23      	ldr	r3, [pc, #140]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f0a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001f0c:	4b20      	ldr	r3, [pc, #128]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f12:	4a1f      	ldr	r2, [pc, #124]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001f1c:	4b1c      	ldr	r3, [pc, #112]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f22:	4a1b      	ldr	r2, [pc, #108]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001f2c:	4a18      	ldr	r2, [pc, #96]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d016      	beq.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f3e:	f7fe fee5 	bl	8000d0c <HAL_GetTick>
 8001f42:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f44:	e00b      	b.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f46:	f7fe fee1 	bl	8000d0c <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d902      	bls.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	74fb      	strb	r3, [r7, #19]
            break;
 8001f5c:	e006      	b.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f5e:	4b0c      	ldr	r3, [pc, #48]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f64:	f003 0302 	and.w	r3, r3, #2
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d0ec      	beq.n	8001f46 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001f6c:	7cfb      	ldrb	r3, [r7, #19]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d10b      	bne.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f72:	4b07      	ldr	r3, [pc, #28]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f80:	4903      	ldr	r1, [pc, #12]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f82:	4313      	orrs	r3, r2
 8001f84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001f88:	e008      	b.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001f8a:	7cfb      	ldrb	r3, [r7, #19]
 8001f8c:	74bb      	strb	r3, [r7, #18]
 8001f8e:	e005      	b.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001f90:	40021000 	.word	0x40021000
 8001f94:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f98:	7cfb      	ldrb	r3, [r7, #19]
 8001f9a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f9c:	7c7b      	ldrb	r3, [r7, #17]
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d105      	bne.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fa2:	4ba7      	ldr	r3, [pc, #668]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fa6:	4aa6      	ldr	r2, [pc, #664]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fa8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fac:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d00a      	beq.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001fba:	4ba1      	ldr	r3, [pc, #644]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fc0:	f023 0203 	bic.w	r2, r3, #3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	499d      	ldr	r1, [pc, #628]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0302 	and.w	r3, r3, #2
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d00a      	beq.n	8001ff2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001fdc:	4b98      	ldr	r3, [pc, #608]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fe2:	f023 020c 	bic.w	r2, r3, #12
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	4995      	ldr	r1, [pc, #596]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fec:	4313      	orrs	r3, r2
 8001fee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0304 	and.w	r3, r3, #4
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d00a      	beq.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001ffe:	4b90      	ldr	r3, [pc, #576]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002000:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002004:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	498c      	ldr	r1, [pc, #560]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800200e:	4313      	orrs	r3, r2
 8002010:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0308 	and.w	r3, r3, #8
 800201c:	2b00      	cmp	r3, #0
 800201e:	d00a      	beq.n	8002036 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002020:	4b87      	ldr	r3, [pc, #540]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002026:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	691b      	ldr	r3, [r3, #16]
 800202e:	4984      	ldr	r1, [pc, #528]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002030:	4313      	orrs	r3, r2
 8002032:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0310 	and.w	r3, r3, #16
 800203e:	2b00      	cmp	r3, #0
 8002040:	d00a      	beq.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002042:	4b7f      	ldr	r3, [pc, #508]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002044:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002048:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	695b      	ldr	r3, [r3, #20]
 8002050:	497b      	ldr	r1, [pc, #492]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002052:	4313      	orrs	r3, r2
 8002054:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0320 	and.w	r3, r3, #32
 8002060:	2b00      	cmp	r3, #0
 8002062:	d00a      	beq.n	800207a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002064:	4b76      	ldr	r3, [pc, #472]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002066:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800206a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	699b      	ldr	r3, [r3, #24]
 8002072:	4973      	ldr	r1, [pc, #460]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002074:	4313      	orrs	r3, r2
 8002076:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002082:	2b00      	cmp	r3, #0
 8002084:	d00a      	beq.n	800209c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002086:	4b6e      	ldr	r3, [pc, #440]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002088:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800208c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	69db      	ldr	r3, [r3, #28]
 8002094:	496a      	ldr	r1, [pc, #424]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002096:	4313      	orrs	r3, r2
 8002098:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d00a      	beq.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80020a8:	4b65      	ldr	r3, [pc, #404]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020ae:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6a1b      	ldr	r3, [r3, #32]
 80020b6:	4962      	ldr	r1, [pc, #392]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020b8:	4313      	orrs	r3, r2
 80020ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d00a      	beq.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80020ca:	4b5d      	ldr	r3, [pc, #372]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d8:	4959      	ldr	r1, [pc, #356]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020da:	4313      	orrs	r3, r2
 80020dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d00a      	beq.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80020ec:	4b54      	ldr	r3, [pc, #336]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80020f2:	f023 0203 	bic.w	r2, r3, #3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020fa:	4951      	ldr	r1, [pc, #324]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020fc:	4313      	orrs	r3, r2
 80020fe:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800210a:	2b00      	cmp	r3, #0
 800210c:	d00a      	beq.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800210e:	4b4c      	ldr	r3, [pc, #304]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002110:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002114:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800211c:	4948      	ldr	r1, [pc, #288]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800211e:	4313      	orrs	r3, r2
 8002120:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800212c:	2b00      	cmp	r3, #0
 800212e:	d015      	beq.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002130:	4b43      	ldr	r3, [pc, #268]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002136:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213e:	4940      	ldr	r1, [pc, #256]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002140:	4313      	orrs	r3, r2
 8002142:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800214e:	d105      	bne.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002150:	4b3b      	ldr	r3, [pc, #236]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	4a3a      	ldr	r2, [pc, #232]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002156:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800215a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002164:	2b00      	cmp	r3, #0
 8002166:	d015      	beq.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002168:	4b35      	ldr	r3, [pc, #212]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800216a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800216e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002176:	4932      	ldr	r1, [pc, #200]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002178:	4313      	orrs	r3, r2
 800217a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002182:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002186:	d105      	bne.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002188:	4b2d      	ldr	r3, [pc, #180]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	4a2c      	ldr	r2, [pc, #176]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800218e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002192:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d015      	beq.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80021a0:	4b27      	ldr	r3, [pc, #156]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021a6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ae:	4924      	ldr	r1, [pc, #144]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021b0:	4313      	orrs	r3, r2
 80021b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021be:	d105      	bne.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021c0:	4b1f      	ldr	r3, [pc, #124]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	4a1e      	ldr	r2, [pc, #120]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021ca:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d015      	beq.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80021d8:	4b19      	ldr	r3, [pc, #100]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021e6:	4916      	ldr	r1, [pc, #88]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021e8:	4313      	orrs	r3, r2
 80021ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80021f6:	d105      	bne.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021f8:	4b11      	ldr	r3, [pc, #68]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	4a10      	ldr	r2, [pc, #64]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002202:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d019      	beq.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002210:	4b0b      	ldr	r3, [pc, #44]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002216:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221e:	4908      	ldr	r1, [pc, #32]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002220:	4313      	orrs	r3, r2
 8002222:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800222e:	d109      	bne.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002230:	4b03      	ldr	r3, [pc, #12]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	4a02      	ldr	r2, [pc, #8]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002236:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800223a:	60d3      	str	r3, [r2, #12]
 800223c:	e002      	b.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800223e:	bf00      	nop
 8002240:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d015      	beq.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002250:	4b29      	ldr	r3, [pc, #164]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002256:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800225e:	4926      	ldr	r1, [pc, #152]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002260:	4313      	orrs	r3, r2
 8002262:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800226a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800226e:	d105      	bne.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002270:	4b21      	ldr	r3, [pc, #132]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	4a20      	ldr	r2, [pc, #128]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002276:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800227a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d015      	beq.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002288:	4b1b      	ldr	r3, [pc, #108]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800228a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800228e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002296:	4918      	ldr	r1, [pc, #96]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002298:	4313      	orrs	r3, r2
 800229a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022a6:	d105      	bne.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80022a8:	4b13      	ldr	r3, [pc, #76]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	4a12      	ldr	r2, [pc, #72]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80022ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022b2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d015      	beq.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80022c0:	4b0d      	ldr	r3, [pc, #52]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80022c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80022c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ce:	490a      	ldr	r1, [pc, #40]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80022d0:	4313      	orrs	r3, r2
 80022d2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80022de:	d105      	bne.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022e0:	4b05      	ldr	r3, [pc, #20]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	4a04      	ldr	r2, [pc, #16]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80022e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022ea:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80022ec:	7cbb      	ldrb	r3, [r7, #18]
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3718      	adds	r7, #24
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	40021000 	.word	0x40021000

080022fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d101      	bne.n	800230e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e049      	b.n	80023a2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002314:	b2db      	uxtb	r3, r3
 8002316:	2b00      	cmp	r3, #0
 8002318:	d106      	bne.n	8002328 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f7fe fb88 	bl	8000a38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2202      	movs	r2, #2
 800232c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	3304      	adds	r3, #4
 8002338:	4619      	mov	r1, r3
 800233a:	4610      	mov	r0, r2
 800233c:	f000 fdf4 	bl	8002f28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2201      	movs	r2, #1
 8002344:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2201      	movs	r2, #1
 800234c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2201      	movs	r2, #1
 8002354:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2201      	movs	r2, #1
 800235c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2201      	movs	r2, #1
 8002364:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2201      	movs	r2, #1
 800236c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2201      	movs	r2, #1
 800237c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2201      	movs	r2, #1
 8002384:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2201      	movs	r2, #1
 800238c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2201      	movs	r2, #1
 8002394:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2201      	movs	r2, #1
 800239c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
	...

080023ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b085      	sub	sp, #20
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d001      	beq.n	80023c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e054      	b.n	800246e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2202      	movs	r2, #2
 80023c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	68da      	ldr	r2, [r3, #12]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f042 0201 	orr.w	r2, r2, #1
 80023da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a26      	ldr	r2, [pc, #152]	; (800247c <HAL_TIM_Base_Start_IT+0xd0>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d022      	beq.n	800242c <HAL_TIM_Base_Start_IT+0x80>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023ee:	d01d      	beq.n	800242c <HAL_TIM_Base_Start_IT+0x80>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a22      	ldr	r2, [pc, #136]	; (8002480 <HAL_TIM_Base_Start_IT+0xd4>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d018      	beq.n	800242c <HAL_TIM_Base_Start_IT+0x80>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a21      	ldr	r2, [pc, #132]	; (8002484 <HAL_TIM_Base_Start_IT+0xd8>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d013      	beq.n	800242c <HAL_TIM_Base_Start_IT+0x80>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a1f      	ldr	r2, [pc, #124]	; (8002488 <HAL_TIM_Base_Start_IT+0xdc>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d00e      	beq.n	800242c <HAL_TIM_Base_Start_IT+0x80>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a1e      	ldr	r2, [pc, #120]	; (800248c <HAL_TIM_Base_Start_IT+0xe0>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d009      	beq.n	800242c <HAL_TIM_Base_Start_IT+0x80>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a1c      	ldr	r2, [pc, #112]	; (8002490 <HAL_TIM_Base_Start_IT+0xe4>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d004      	beq.n	800242c <HAL_TIM_Base_Start_IT+0x80>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a1b      	ldr	r2, [pc, #108]	; (8002494 <HAL_TIM_Base_Start_IT+0xe8>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d115      	bne.n	8002458 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	689a      	ldr	r2, [r3, #8]
 8002432:	4b19      	ldr	r3, [pc, #100]	; (8002498 <HAL_TIM_Base_Start_IT+0xec>)
 8002434:	4013      	ands	r3, r2
 8002436:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2b06      	cmp	r3, #6
 800243c:	d015      	beq.n	800246a <HAL_TIM_Base_Start_IT+0xbe>
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002444:	d011      	beq.n	800246a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f042 0201 	orr.w	r2, r2, #1
 8002454:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002456:	e008      	b.n	800246a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f042 0201 	orr.w	r2, r2, #1
 8002466:	601a      	str	r2, [r3, #0]
 8002468:	e000      	b.n	800246c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800246a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800246c:	2300      	movs	r3, #0
}
 800246e:	4618      	mov	r0, r3
 8002470:	3714      	adds	r7, #20
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	40012c00 	.word	0x40012c00
 8002480:	40000400 	.word	0x40000400
 8002484:	40000800 	.word	0x40000800
 8002488:	40000c00 	.word	0x40000c00
 800248c:	40013400 	.word	0x40013400
 8002490:	40014000 	.word	0x40014000
 8002494:	40015000 	.word	0x40015000
 8002498:	00010007 	.word	0x00010007

0800249c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d101      	bne.n	80024ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e049      	b.n	8002542 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d106      	bne.n	80024c8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f000 f841 	bl	800254a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2202      	movs	r2, #2
 80024cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	3304      	adds	r3, #4
 80024d8:	4619      	mov	r1, r3
 80024da:	4610      	mov	r0, r2
 80024dc:	f000 fd24 	bl	8002f28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2201      	movs	r2, #1
 80024e4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2201      	movs	r2, #1
 80024ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2201      	movs	r2, #1
 80024f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2201      	movs	r2, #1
 80024fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2201      	movs	r2, #1
 8002504:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2201      	movs	r2, #1
 8002514:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2201      	movs	r2, #1
 8002524:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002540:	2300      	movs	r3, #0
}
 8002542:	4618      	mov	r0, r3
 8002544:	3708      	adds	r7, #8
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}

0800254a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800254a:	b480      	push	{r7}
 800254c:	b083      	sub	sp, #12
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002552:	bf00      	nop
 8002554:	370c      	adds	r7, #12
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
	...

08002560 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d109      	bne.n	8002584 <HAL_TIM_PWM_Start+0x24>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002576:	b2db      	uxtb	r3, r3
 8002578:	2b01      	cmp	r3, #1
 800257a:	bf14      	ite	ne
 800257c:	2301      	movne	r3, #1
 800257e:	2300      	moveq	r3, #0
 8002580:	b2db      	uxtb	r3, r3
 8002582:	e03c      	b.n	80025fe <HAL_TIM_PWM_Start+0x9e>
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	2b04      	cmp	r3, #4
 8002588:	d109      	bne.n	800259e <HAL_TIM_PWM_Start+0x3e>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002590:	b2db      	uxtb	r3, r3
 8002592:	2b01      	cmp	r3, #1
 8002594:	bf14      	ite	ne
 8002596:	2301      	movne	r3, #1
 8002598:	2300      	moveq	r3, #0
 800259a:	b2db      	uxtb	r3, r3
 800259c:	e02f      	b.n	80025fe <HAL_TIM_PWM_Start+0x9e>
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	2b08      	cmp	r3, #8
 80025a2:	d109      	bne.n	80025b8 <HAL_TIM_PWM_Start+0x58>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	bf14      	ite	ne
 80025b0:	2301      	movne	r3, #1
 80025b2:	2300      	moveq	r3, #0
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	e022      	b.n	80025fe <HAL_TIM_PWM_Start+0x9e>
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	2b0c      	cmp	r3, #12
 80025bc:	d109      	bne.n	80025d2 <HAL_TIM_PWM_Start+0x72>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	bf14      	ite	ne
 80025ca:	2301      	movne	r3, #1
 80025cc:	2300      	moveq	r3, #0
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	e015      	b.n	80025fe <HAL_TIM_PWM_Start+0x9e>
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	2b10      	cmp	r3, #16
 80025d6:	d109      	bne.n	80025ec <HAL_TIM_PWM_Start+0x8c>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	bf14      	ite	ne
 80025e4:	2301      	movne	r3, #1
 80025e6:	2300      	moveq	r3, #0
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	e008      	b.n	80025fe <HAL_TIM_PWM_Start+0x9e>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	bf14      	ite	ne
 80025f8:	2301      	movne	r3, #1
 80025fa:	2300      	moveq	r3, #0
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d001      	beq.n	8002606 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e0a6      	b.n	8002754 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d104      	bne.n	8002616 <HAL_TIM_PWM_Start+0xb6>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2202      	movs	r2, #2
 8002610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002614:	e023      	b.n	800265e <HAL_TIM_PWM_Start+0xfe>
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	2b04      	cmp	r3, #4
 800261a:	d104      	bne.n	8002626 <HAL_TIM_PWM_Start+0xc6>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2202      	movs	r2, #2
 8002620:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002624:	e01b      	b.n	800265e <HAL_TIM_PWM_Start+0xfe>
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	2b08      	cmp	r3, #8
 800262a:	d104      	bne.n	8002636 <HAL_TIM_PWM_Start+0xd6>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2202      	movs	r2, #2
 8002630:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002634:	e013      	b.n	800265e <HAL_TIM_PWM_Start+0xfe>
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	2b0c      	cmp	r3, #12
 800263a:	d104      	bne.n	8002646 <HAL_TIM_PWM_Start+0xe6>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2202      	movs	r2, #2
 8002640:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002644:	e00b      	b.n	800265e <HAL_TIM_PWM_Start+0xfe>
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	2b10      	cmp	r3, #16
 800264a:	d104      	bne.n	8002656 <HAL_TIM_PWM_Start+0xf6>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2202      	movs	r2, #2
 8002650:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002654:	e003      	b.n	800265e <HAL_TIM_PWM_Start+0xfe>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2202      	movs	r2, #2
 800265a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	2201      	movs	r2, #1
 8002664:	6839      	ldr	r1, [r7, #0]
 8002666:	4618      	mov	r0, r3
 8002668:	f001 f8cc 	bl	8003804 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a3a      	ldr	r2, [pc, #232]	; (800275c <HAL_TIM_PWM_Start+0x1fc>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d018      	beq.n	80026a8 <HAL_TIM_PWM_Start+0x148>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a39      	ldr	r2, [pc, #228]	; (8002760 <HAL_TIM_PWM_Start+0x200>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d013      	beq.n	80026a8 <HAL_TIM_PWM_Start+0x148>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a37      	ldr	r2, [pc, #220]	; (8002764 <HAL_TIM_PWM_Start+0x204>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d00e      	beq.n	80026a8 <HAL_TIM_PWM_Start+0x148>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a36      	ldr	r2, [pc, #216]	; (8002768 <HAL_TIM_PWM_Start+0x208>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d009      	beq.n	80026a8 <HAL_TIM_PWM_Start+0x148>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a34      	ldr	r2, [pc, #208]	; (800276c <HAL_TIM_PWM_Start+0x20c>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d004      	beq.n	80026a8 <HAL_TIM_PWM_Start+0x148>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a33      	ldr	r2, [pc, #204]	; (8002770 <HAL_TIM_PWM_Start+0x210>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d101      	bne.n	80026ac <HAL_TIM_PWM_Start+0x14c>
 80026a8:	2301      	movs	r3, #1
 80026aa:	e000      	b.n	80026ae <HAL_TIM_PWM_Start+0x14e>
 80026ac:	2300      	movs	r3, #0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d007      	beq.n	80026c2 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026c0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a25      	ldr	r2, [pc, #148]	; (800275c <HAL_TIM_PWM_Start+0x1fc>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d022      	beq.n	8002712 <HAL_TIM_PWM_Start+0x1b2>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026d4:	d01d      	beq.n	8002712 <HAL_TIM_PWM_Start+0x1b2>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a26      	ldr	r2, [pc, #152]	; (8002774 <HAL_TIM_PWM_Start+0x214>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d018      	beq.n	8002712 <HAL_TIM_PWM_Start+0x1b2>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a24      	ldr	r2, [pc, #144]	; (8002778 <HAL_TIM_PWM_Start+0x218>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d013      	beq.n	8002712 <HAL_TIM_PWM_Start+0x1b2>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a23      	ldr	r2, [pc, #140]	; (800277c <HAL_TIM_PWM_Start+0x21c>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d00e      	beq.n	8002712 <HAL_TIM_PWM_Start+0x1b2>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a19      	ldr	r2, [pc, #100]	; (8002760 <HAL_TIM_PWM_Start+0x200>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d009      	beq.n	8002712 <HAL_TIM_PWM_Start+0x1b2>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a18      	ldr	r2, [pc, #96]	; (8002764 <HAL_TIM_PWM_Start+0x204>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d004      	beq.n	8002712 <HAL_TIM_PWM_Start+0x1b2>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a18      	ldr	r2, [pc, #96]	; (8002770 <HAL_TIM_PWM_Start+0x210>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d115      	bne.n	800273e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	689a      	ldr	r2, [r3, #8]
 8002718:	4b19      	ldr	r3, [pc, #100]	; (8002780 <HAL_TIM_PWM_Start+0x220>)
 800271a:	4013      	ands	r3, r2
 800271c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2b06      	cmp	r3, #6
 8002722:	d015      	beq.n	8002750 <HAL_TIM_PWM_Start+0x1f0>
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800272a:	d011      	beq.n	8002750 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f042 0201 	orr.w	r2, r2, #1
 800273a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800273c:	e008      	b.n	8002750 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f042 0201 	orr.w	r2, r2, #1
 800274c:	601a      	str	r2, [r3, #0]
 800274e:	e000      	b.n	8002752 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002750:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002752:	2300      	movs	r3, #0
}
 8002754:	4618      	mov	r0, r3
 8002756:	3710      	adds	r7, #16
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}
 800275c:	40012c00 	.word	0x40012c00
 8002760:	40013400 	.word	0x40013400
 8002764:	40014000 	.word	0x40014000
 8002768:	40014400 	.word	0x40014400
 800276c:	40014800 	.word	0x40014800
 8002770:	40015000 	.word	0x40015000
 8002774:	40000400 	.word	0x40000400
 8002778:	40000800 	.word	0x40000800
 800277c:	40000c00 	.word	0x40000c00
 8002780:	00010007 	.word	0x00010007

08002784 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	f003 0302 	and.w	r3, r3, #2
 8002796:	2b02      	cmp	r3, #2
 8002798:	d122      	bne.n	80027e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	f003 0302 	and.w	r3, r3, #2
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d11b      	bne.n	80027e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f06f 0202 	mvn.w	r2, #2
 80027b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2201      	movs	r2, #1
 80027b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	699b      	ldr	r3, [r3, #24]
 80027be:	f003 0303 	and.w	r3, r3, #3
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d003      	beq.n	80027ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f000 fb90 	bl	8002eec <HAL_TIM_IC_CaptureCallback>
 80027cc:	e005      	b.n	80027da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f000 fb82 	bl	8002ed8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f000 fb93 	bl	8002f00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	691b      	ldr	r3, [r3, #16]
 80027e6:	f003 0304 	and.w	r3, r3, #4
 80027ea:	2b04      	cmp	r3, #4
 80027ec:	d122      	bne.n	8002834 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	f003 0304 	and.w	r3, r3, #4
 80027f8:	2b04      	cmp	r3, #4
 80027fa:	d11b      	bne.n	8002834 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f06f 0204 	mvn.w	r2, #4
 8002804:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2202      	movs	r2, #2
 800280a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	699b      	ldr	r3, [r3, #24]
 8002812:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002816:	2b00      	cmp	r3, #0
 8002818:	d003      	beq.n	8002822 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f000 fb66 	bl	8002eec <HAL_TIM_IC_CaptureCallback>
 8002820:	e005      	b.n	800282e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f000 fb58 	bl	8002ed8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f000 fb69 	bl	8002f00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	691b      	ldr	r3, [r3, #16]
 800283a:	f003 0308 	and.w	r3, r3, #8
 800283e:	2b08      	cmp	r3, #8
 8002840:	d122      	bne.n	8002888 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	f003 0308 	and.w	r3, r3, #8
 800284c:	2b08      	cmp	r3, #8
 800284e:	d11b      	bne.n	8002888 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f06f 0208 	mvn.w	r2, #8
 8002858:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2204      	movs	r2, #4
 800285e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	69db      	ldr	r3, [r3, #28]
 8002866:	f003 0303 	and.w	r3, r3, #3
 800286a:	2b00      	cmp	r3, #0
 800286c:	d003      	beq.n	8002876 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f000 fb3c 	bl	8002eec <HAL_TIM_IC_CaptureCallback>
 8002874:	e005      	b.n	8002882 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f000 fb2e 	bl	8002ed8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f000 fb3f 	bl	8002f00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2200      	movs	r2, #0
 8002886:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	f003 0310 	and.w	r3, r3, #16
 8002892:	2b10      	cmp	r3, #16
 8002894:	d122      	bne.n	80028dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	f003 0310 	and.w	r3, r3, #16
 80028a0:	2b10      	cmp	r3, #16
 80028a2:	d11b      	bne.n	80028dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f06f 0210 	mvn.w	r2, #16
 80028ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2208      	movs	r2, #8
 80028b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	69db      	ldr	r3, [r3, #28]
 80028ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d003      	beq.n	80028ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f000 fb12 	bl	8002eec <HAL_TIM_IC_CaptureCallback>
 80028c8:	e005      	b.n	80028d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f000 fb04 	bl	8002ed8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f000 fb15 	bl	8002f00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	691b      	ldr	r3, [r3, #16]
 80028e2:	f003 0301 	and.w	r3, r3, #1
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d10e      	bne.n	8002908 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	f003 0301 	and.w	r3, r3, #1
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d107      	bne.n	8002908 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f06f 0201 	mvn.w	r2, #1
 8002900:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f7fd fff0 	bl	80008e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	691b      	ldr	r3, [r3, #16]
 800290e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002912:	2b80      	cmp	r3, #128	; 0x80
 8002914:	d10e      	bne.n	8002934 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002920:	2b80      	cmp	r3, #128	; 0x80
 8002922:	d107      	bne.n	8002934 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800292c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f001 f82e 	bl	8003990 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800293e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002942:	d10e      	bne.n	8002962 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800294e:	2b80      	cmp	r3, #128	; 0x80
 8002950:	d107      	bne.n	8002962 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800295a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f001 f821 	bl	80039a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	691b      	ldr	r3, [r3, #16]
 8002968:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800296c:	2b40      	cmp	r3, #64	; 0x40
 800296e:	d10e      	bne.n	800298e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800297a:	2b40      	cmp	r3, #64	; 0x40
 800297c:	d107      	bne.n	800298e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002986:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f000 fac3 	bl	8002f14 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	691b      	ldr	r3, [r3, #16]
 8002994:	f003 0320 	and.w	r3, r3, #32
 8002998:	2b20      	cmp	r3, #32
 800299a:	d10e      	bne.n	80029ba <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	f003 0320 	and.w	r3, r3, #32
 80029a6:	2b20      	cmp	r3, #32
 80029a8:	d107      	bne.n	80029ba <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f06f 0220 	mvn.w	r2, #32
 80029b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f000 ffe1 	bl	800397c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	691b      	ldr	r3, [r3, #16]
 80029c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80029c8:	d10f      	bne.n	80029ea <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80029d8:	d107      	bne.n	80029ea <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80029e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f000 ffe7 	bl	80039b8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	691b      	ldr	r3, [r3, #16]
 80029f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80029f8:	d10f      	bne.n	8002a1a <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a04:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a08:	d107      	bne.n	8002a1a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8002a12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f000 ffd9 	bl	80039cc <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	691b      	ldr	r3, [r3, #16]
 8002a20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a28:	d10f      	bne.n	8002a4a <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a38:	d107      	bne.n	8002a4a <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8002a42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f000 ffcb 	bl	80039e0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	691b      	ldr	r3, [r3, #16]
 8002a50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a54:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002a58:	d10f      	bne.n	8002a7a <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a64:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002a68:	d107      	bne.n	8002a7a <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8002a72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f000 ffbd 	bl	80039f4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a7a:	bf00      	nop
 8002a7c:	3708      	adds	r7, #8
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
	...

08002a84 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b086      	sub	sp, #24
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	60b9      	str	r1, [r7, #8]
 8002a8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a90:	2300      	movs	r3, #0
 8002a92:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d101      	bne.n	8002aa2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002a9e:	2302      	movs	r3, #2
 8002aa0:	e0ff      	b.n	8002ca2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2b14      	cmp	r3, #20
 8002aae:	f200 80f0 	bhi.w	8002c92 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002ab2:	a201      	add	r2, pc, #4	; (adr r2, 8002ab8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ab8:	08002b0d 	.word	0x08002b0d
 8002abc:	08002c93 	.word	0x08002c93
 8002ac0:	08002c93 	.word	0x08002c93
 8002ac4:	08002c93 	.word	0x08002c93
 8002ac8:	08002b4d 	.word	0x08002b4d
 8002acc:	08002c93 	.word	0x08002c93
 8002ad0:	08002c93 	.word	0x08002c93
 8002ad4:	08002c93 	.word	0x08002c93
 8002ad8:	08002b8f 	.word	0x08002b8f
 8002adc:	08002c93 	.word	0x08002c93
 8002ae0:	08002c93 	.word	0x08002c93
 8002ae4:	08002c93 	.word	0x08002c93
 8002ae8:	08002bcf 	.word	0x08002bcf
 8002aec:	08002c93 	.word	0x08002c93
 8002af0:	08002c93 	.word	0x08002c93
 8002af4:	08002c93 	.word	0x08002c93
 8002af8:	08002c11 	.word	0x08002c11
 8002afc:	08002c93 	.word	0x08002c93
 8002b00:	08002c93 	.word	0x08002c93
 8002b04:	08002c93 	.word	0x08002c93
 8002b08:	08002c51 	.word	0x08002c51
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	68b9      	ldr	r1, [r7, #8]
 8002b12:	4618      	mov	r0, r3
 8002b14:	f000 fab0 	bl	8003078 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	699a      	ldr	r2, [r3, #24]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f042 0208 	orr.w	r2, r2, #8
 8002b26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	699a      	ldr	r2, [r3, #24]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f022 0204 	bic.w	r2, r2, #4
 8002b36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	6999      	ldr	r1, [r3, #24]
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	691a      	ldr	r2, [r3, #16]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	430a      	orrs	r2, r1
 8002b48:	619a      	str	r2, [r3, #24]
      break;
 8002b4a:	e0a5      	b.n	8002c98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	68b9      	ldr	r1, [r7, #8]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f000 fb2a 	bl	80031ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	699a      	ldr	r2, [r3, #24]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	699a      	ldr	r2, [r3, #24]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	6999      	ldr	r1, [r3, #24]
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	691b      	ldr	r3, [r3, #16]
 8002b82:	021a      	lsls	r2, r3, #8
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	430a      	orrs	r2, r1
 8002b8a:	619a      	str	r2, [r3, #24]
      break;
 8002b8c:	e084      	b.n	8002c98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	68b9      	ldr	r1, [r7, #8]
 8002b94:	4618      	mov	r0, r3
 8002b96:	f000 fb9d 	bl	80032d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	69da      	ldr	r2, [r3, #28]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f042 0208 	orr.w	r2, r2, #8
 8002ba8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	69da      	ldr	r2, [r3, #28]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f022 0204 	bic.w	r2, r2, #4
 8002bb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	69d9      	ldr	r1, [r3, #28]
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	691a      	ldr	r2, [r3, #16]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	430a      	orrs	r2, r1
 8002bca:	61da      	str	r2, [r3, #28]
      break;
 8002bcc:	e064      	b.n	8002c98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	68b9      	ldr	r1, [r7, #8]
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f000 fc0f 	bl	80033f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	69da      	ldr	r2, [r3, #28]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002be8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	69da      	ldr	r2, [r3, #28]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bf8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	69d9      	ldr	r1, [r3, #28]
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	691b      	ldr	r3, [r3, #16]
 8002c04:	021a      	lsls	r2, r3, #8
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	430a      	orrs	r2, r1
 8002c0c:	61da      	str	r2, [r3, #28]
      break;
 8002c0e:	e043      	b.n	8002c98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	68b9      	ldr	r1, [r7, #8]
 8002c16:	4618      	mov	r0, r3
 8002c18:	f000 fc82 	bl	8003520 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f042 0208 	orr.w	r2, r2, #8
 8002c2a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f022 0204 	bic.w	r2, r2, #4
 8002c3a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	691a      	ldr	r2, [r3, #16]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	430a      	orrs	r2, r1
 8002c4c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8002c4e:	e023      	b.n	8002c98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	68b9      	ldr	r1, [r7, #8]
 8002c56:	4618      	mov	r0, r3
 8002c58:	f000 fccc 	bl	80035f4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c6a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c7a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	691b      	ldr	r3, [r3, #16]
 8002c86:	021a      	lsls	r2, r3, #8
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	430a      	orrs	r2, r1
 8002c8e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8002c90:	e002      	b.n	8002c98 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	75fb      	strb	r3, [r7, #23]
      break;
 8002c96:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002ca0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3718      	adds	r7, #24
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop

08002cac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d101      	bne.n	8002cc8 <HAL_TIM_ConfigClockSource+0x1c>
 8002cc4:	2302      	movs	r3, #2
 8002cc6:	e0f6      	b.n	8002eb6 <HAL_TIM_ConfigClockSource+0x20a>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2202      	movs	r2, #2
 8002cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8002ce6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002cea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002cf2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	68ba      	ldr	r2, [r7, #8]
 8002cfa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a6f      	ldr	r2, [pc, #444]	; (8002ec0 <HAL_TIM_ConfigClockSource+0x214>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	f000 80c1 	beq.w	8002e8a <HAL_TIM_ConfigClockSource+0x1de>
 8002d08:	4a6d      	ldr	r2, [pc, #436]	; (8002ec0 <HAL_TIM_ConfigClockSource+0x214>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	f200 80c6 	bhi.w	8002e9c <HAL_TIM_ConfigClockSource+0x1f0>
 8002d10:	4a6c      	ldr	r2, [pc, #432]	; (8002ec4 <HAL_TIM_ConfigClockSource+0x218>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	f000 80b9 	beq.w	8002e8a <HAL_TIM_ConfigClockSource+0x1de>
 8002d18:	4a6a      	ldr	r2, [pc, #424]	; (8002ec4 <HAL_TIM_ConfigClockSource+0x218>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	f200 80be 	bhi.w	8002e9c <HAL_TIM_ConfigClockSource+0x1f0>
 8002d20:	4a69      	ldr	r2, [pc, #420]	; (8002ec8 <HAL_TIM_ConfigClockSource+0x21c>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	f000 80b1 	beq.w	8002e8a <HAL_TIM_ConfigClockSource+0x1de>
 8002d28:	4a67      	ldr	r2, [pc, #412]	; (8002ec8 <HAL_TIM_ConfigClockSource+0x21c>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	f200 80b6 	bhi.w	8002e9c <HAL_TIM_ConfigClockSource+0x1f0>
 8002d30:	4a66      	ldr	r2, [pc, #408]	; (8002ecc <HAL_TIM_ConfigClockSource+0x220>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	f000 80a9 	beq.w	8002e8a <HAL_TIM_ConfigClockSource+0x1de>
 8002d38:	4a64      	ldr	r2, [pc, #400]	; (8002ecc <HAL_TIM_ConfigClockSource+0x220>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	f200 80ae 	bhi.w	8002e9c <HAL_TIM_ConfigClockSource+0x1f0>
 8002d40:	4a63      	ldr	r2, [pc, #396]	; (8002ed0 <HAL_TIM_ConfigClockSource+0x224>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	f000 80a1 	beq.w	8002e8a <HAL_TIM_ConfigClockSource+0x1de>
 8002d48:	4a61      	ldr	r2, [pc, #388]	; (8002ed0 <HAL_TIM_ConfigClockSource+0x224>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	f200 80a6 	bhi.w	8002e9c <HAL_TIM_ConfigClockSource+0x1f0>
 8002d50:	4a60      	ldr	r2, [pc, #384]	; (8002ed4 <HAL_TIM_ConfigClockSource+0x228>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	f000 8099 	beq.w	8002e8a <HAL_TIM_ConfigClockSource+0x1de>
 8002d58:	4a5e      	ldr	r2, [pc, #376]	; (8002ed4 <HAL_TIM_ConfigClockSource+0x228>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	f200 809e 	bhi.w	8002e9c <HAL_TIM_ConfigClockSource+0x1f0>
 8002d60:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8002d64:	f000 8091 	beq.w	8002e8a <HAL_TIM_ConfigClockSource+0x1de>
 8002d68:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8002d6c:	f200 8096 	bhi.w	8002e9c <HAL_TIM_ConfigClockSource+0x1f0>
 8002d70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d74:	f000 8089 	beq.w	8002e8a <HAL_TIM_ConfigClockSource+0x1de>
 8002d78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d7c:	f200 808e 	bhi.w	8002e9c <HAL_TIM_ConfigClockSource+0x1f0>
 8002d80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d84:	d03e      	beq.n	8002e04 <HAL_TIM_ConfigClockSource+0x158>
 8002d86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d8a:	f200 8087 	bhi.w	8002e9c <HAL_TIM_ConfigClockSource+0x1f0>
 8002d8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d92:	f000 8086 	beq.w	8002ea2 <HAL_TIM_ConfigClockSource+0x1f6>
 8002d96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d9a:	d87f      	bhi.n	8002e9c <HAL_TIM_ConfigClockSource+0x1f0>
 8002d9c:	2b70      	cmp	r3, #112	; 0x70
 8002d9e:	d01a      	beq.n	8002dd6 <HAL_TIM_ConfigClockSource+0x12a>
 8002da0:	2b70      	cmp	r3, #112	; 0x70
 8002da2:	d87b      	bhi.n	8002e9c <HAL_TIM_ConfigClockSource+0x1f0>
 8002da4:	2b60      	cmp	r3, #96	; 0x60
 8002da6:	d050      	beq.n	8002e4a <HAL_TIM_ConfigClockSource+0x19e>
 8002da8:	2b60      	cmp	r3, #96	; 0x60
 8002daa:	d877      	bhi.n	8002e9c <HAL_TIM_ConfigClockSource+0x1f0>
 8002dac:	2b50      	cmp	r3, #80	; 0x50
 8002dae:	d03c      	beq.n	8002e2a <HAL_TIM_ConfigClockSource+0x17e>
 8002db0:	2b50      	cmp	r3, #80	; 0x50
 8002db2:	d873      	bhi.n	8002e9c <HAL_TIM_ConfigClockSource+0x1f0>
 8002db4:	2b40      	cmp	r3, #64	; 0x40
 8002db6:	d058      	beq.n	8002e6a <HAL_TIM_ConfigClockSource+0x1be>
 8002db8:	2b40      	cmp	r3, #64	; 0x40
 8002dba:	d86f      	bhi.n	8002e9c <HAL_TIM_ConfigClockSource+0x1f0>
 8002dbc:	2b30      	cmp	r3, #48	; 0x30
 8002dbe:	d064      	beq.n	8002e8a <HAL_TIM_ConfigClockSource+0x1de>
 8002dc0:	2b30      	cmp	r3, #48	; 0x30
 8002dc2:	d86b      	bhi.n	8002e9c <HAL_TIM_ConfigClockSource+0x1f0>
 8002dc4:	2b20      	cmp	r3, #32
 8002dc6:	d060      	beq.n	8002e8a <HAL_TIM_ConfigClockSource+0x1de>
 8002dc8:	2b20      	cmp	r3, #32
 8002dca:	d867      	bhi.n	8002e9c <HAL_TIM_ConfigClockSource+0x1f0>
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d05c      	beq.n	8002e8a <HAL_TIM_ConfigClockSource+0x1de>
 8002dd0:	2b10      	cmp	r3, #16
 8002dd2:	d05a      	beq.n	8002e8a <HAL_TIM_ConfigClockSource+0x1de>
 8002dd4:	e062      	b.n	8002e9c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6818      	ldr	r0, [r3, #0]
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	6899      	ldr	r1, [r3, #8]
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	685a      	ldr	r2, [r3, #4]
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	f000 fced 	bl	80037c4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002df8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	68ba      	ldr	r2, [r7, #8]
 8002e00:	609a      	str	r2, [r3, #8]
      break;
 8002e02:	e04f      	b.n	8002ea4 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6818      	ldr	r0, [r3, #0]
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	6899      	ldr	r1, [r3, #8]
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	685a      	ldr	r2, [r3, #4]
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	f000 fcd6 	bl	80037c4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	689a      	ldr	r2, [r3, #8]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e26:	609a      	str	r2, [r3, #8]
      break;
 8002e28:	e03c      	b.n	8002ea4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6818      	ldr	r0, [r3, #0]
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	6859      	ldr	r1, [r3, #4]
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	461a      	mov	r2, r3
 8002e38:	f000 fc48 	bl	80036cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2150      	movs	r1, #80	; 0x50
 8002e42:	4618      	mov	r0, r3
 8002e44:	f000 fca1 	bl	800378a <TIM_ITRx_SetConfig>
      break;
 8002e48:	e02c      	b.n	8002ea4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6818      	ldr	r0, [r3, #0]
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	6859      	ldr	r1, [r3, #4]
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	461a      	mov	r2, r3
 8002e58:	f000 fc67 	bl	800372a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2160      	movs	r1, #96	; 0x60
 8002e62:	4618      	mov	r0, r3
 8002e64:	f000 fc91 	bl	800378a <TIM_ITRx_SetConfig>
      break;
 8002e68:	e01c      	b.n	8002ea4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6818      	ldr	r0, [r3, #0]
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	6859      	ldr	r1, [r3, #4]
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	461a      	mov	r2, r3
 8002e78:	f000 fc28 	bl	80036cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2140      	movs	r1, #64	; 0x40
 8002e82:	4618      	mov	r0, r3
 8002e84:	f000 fc81 	bl	800378a <TIM_ITRx_SetConfig>
      break;
 8002e88:	e00c      	b.n	8002ea4 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4619      	mov	r1, r3
 8002e94:	4610      	mov	r0, r2
 8002e96:	f000 fc78 	bl	800378a <TIM_ITRx_SetConfig>
      break;
 8002e9a:	e003      	b.n	8002ea4 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	73fb      	strb	r3, [r7, #15]
      break;
 8002ea0:	e000      	b.n	8002ea4 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8002ea2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002eb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3710      	adds	r7, #16
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	00100070 	.word	0x00100070
 8002ec4:	00100060 	.word	0x00100060
 8002ec8:	00100050 	.word	0x00100050
 8002ecc:	00100040 	.word	0x00100040
 8002ed0:	00100030 	.word	0x00100030
 8002ed4:	00100020 	.word	0x00100020

08002ed8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ee0:	bf00      	nop
 8002ee2:	370c      	adds	r7, #12
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr

08002eec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ef4:	bf00      	nop
 8002ef6:	370c      	adds	r7, #12
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr

08002f00 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f08:	bf00      	nop
 8002f0a:	370c      	adds	r7, #12
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr

08002f14 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f1c:	bf00      	nop
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr

08002f28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b085      	sub	sp, #20
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	4a46      	ldr	r2, [pc, #280]	; (8003054 <TIM_Base_SetConfig+0x12c>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d017      	beq.n	8002f70 <TIM_Base_SetConfig+0x48>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f46:	d013      	beq.n	8002f70 <TIM_Base_SetConfig+0x48>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	4a43      	ldr	r2, [pc, #268]	; (8003058 <TIM_Base_SetConfig+0x130>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d00f      	beq.n	8002f70 <TIM_Base_SetConfig+0x48>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4a42      	ldr	r2, [pc, #264]	; (800305c <TIM_Base_SetConfig+0x134>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d00b      	beq.n	8002f70 <TIM_Base_SetConfig+0x48>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	4a41      	ldr	r2, [pc, #260]	; (8003060 <TIM_Base_SetConfig+0x138>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d007      	beq.n	8002f70 <TIM_Base_SetConfig+0x48>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	4a40      	ldr	r2, [pc, #256]	; (8003064 <TIM_Base_SetConfig+0x13c>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d003      	beq.n	8002f70 <TIM_Base_SetConfig+0x48>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	4a3f      	ldr	r2, [pc, #252]	; (8003068 <TIM_Base_SetConfig+0x140>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d108      	bne.n	8002f82 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	68fa      	ldr	r2, [r7, #12]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4a33      	ldr	r2, [pc, #204]	; (8003054 <TIM_Base_SetConfig+0x12c>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d023      	beq.n	8002fd2 <TIM_Base_SetConfig+0xaa>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f90:	d01f      	beq.n	8002fd2 <TIM_Base_SetConfig+0xaa>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4a30      	ldr	r2, [pc, #192]	; (8003058 <TIM_Base_SetConfig+0x130>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d01b      	beq.n	8002fd2 <TIM_Base_SetConfig+0xaa>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4a2f      	ldr	r2, [pc, #188]	; (800305c <TIM_Base_SetConfig+0x134>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d017      	beq.n	8002fd2 <TIM_Base_SetConfig+0xaa>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a2e      	ldr	r2, [pc, #184]	; (8003060 <TIM_Base_SetConfig+0x138>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d013      	beq.n	8002fd2 <TIM_Base_SetConfig+0xaa>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a2d      	ldr	r2, [pc, #180]	; (8003064 <TIM_Base_SetConfig+0x13c>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d00f      	beq.n	8002fd2 <TIM_Base_SetConfig+0xaa>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a2d      	ldr	r2, [pc, #180]	; (800306c <TIM_Base_SetConfig+0x144>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d00b      	beq.n	8002fd2 <TIM_Base_SetConfig+0xaa>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a2c      	ldr	r2, [pc, #176]	; (8003070 <TIM_Base_SetConfig+0x148>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d007      	beq.n	8002fd2 <TIM_Base_SetConfig+0xaa>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4a2b      	ldr	r2, [pc, #172]	; (8003074 <TIM_Base_SetConfig+0x14c>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d003      	beq.n	8002fd2 <TIM_Base_SetConfig+0xaa>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a26      	ldr	r2, [pc, #152]	; (8003068 <TIM_Base_SetConfig+0x140>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d108      	bne.n	8002fe4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	68fa      	ldr	r2, [r7, #12]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	695b      	ldr	r3, [r3, #20]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	68fa      	ldr	r2, [r7, #12]
 8002ff6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	689a      	ldr	r2, [r3, #8]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	4a12      	ldr	r2, [pc, #72]	; (8003054 <TIM_Base_SetConfig+0x12c>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d013      	beq.n	8003038 <TIM_Base_SetConfig+0x110>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4a14      	ldr	r2, [pc, #80]	; (8003064 <TIM_Base_SetConfig+0x13c>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d00f      	beq.n	8003038 <TIM_Base_SetConfig+0x110>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	4a14      	ldr	r2, [pc, #80]	; (800306c <TIM_Base_SetConfig+0x144>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d00b      	beq.n	8003038 <TIM_Base_SetConfig+0x110>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	4a13      	ldr	r2, [pc, #76]	; (8003070 <TIM_Base_SetConfig+0x148>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d007      	beq.n	8003038 <TIM_Base_SetConfig+0x110>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	4a12      	ldr	r2, [pc, #72]	; (8003074 <TIM_Base_SetConfig+0x14c>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d003      	beq.n	8003038 <TIM_Base_SetConfig+0x110>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	4a0d      	ldr	r2, [pc, #52]	; (8003068 <TIM_Base_SetConfig+0x140>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d103      	bne.n	8003040 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	691a      	ldr	r2, [r3, #16]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	615a      	str	r2, [r3, #20]
}
 8003046:	bf00      	nop
 8003048:	3714      	adds	r7, #20
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr
 8003052:	bf00      	nop
 8003054:	40012c00 	.word	0x40012c00
 8003058:	40000400 	.word	0x40000400
 800305c:	40000800 	.word	0x40000800
 8003060:	40000c00 	.word	0x40000c00
 8003064:	40013400 	.word	0x40013400
 8003068:	40015000 	.word	0x40015000
 800306c:	40014000 	.word	0x40014000
 8003070:	40014400 	.word	0x40014400
 8003074:	40014800 	.word	0x40014800

08003078 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003078:	b480      	push	{r7}
 800307a:	b087      	sub	sp, #28
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a1b      	ldr	r3, [r3, #32]
 8003086:	f023 0201 	bic.w	r2, r3, #1
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a1b      	ldr	r3, [r3, #32]
 8003092:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	699b      	ldr	r3, [r3, #24]
 800309e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f023 0303 	bic.w	r3, r3, #3
 80030b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	68fa      	ldr	r2, [r7, #12]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	f023 0302 	bic.w	r3, r3, #2
 80030c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	697a      	ldr	r2, [r7, #20]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	4a30      	ldr	r2, [pc, #192]	; (8003194 <TIM_OC1_SetConfig+0x11c>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d013      	beq.n	8003100 <TIM_OC1_SetConfig+0x88>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	4a2f      	ldr	r2, [pc, #188]	; (8003198 <TIM_OC1_SetConfig+0x120>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d00f      	beq.n	8003100 <TIM_OC1_SetConfig+0x88>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	4a2e      	ldr	r2, [pc, #184]	; (800319c <TIM_OC1_SetConfig+0x124>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d00b      	beq.n	8003100 <TIM_OC1_SetConfig+0x88>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	4a2d      	ldr	r2, [pc, #180]	; (80031a0 <TIM_OC1_SetConfig+0x128>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d007      	beq.n	8003100 <TIM_OC1_SetConfig+0x88>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	4a2c      	ldr	r2, [pc, #176]	; (80031a4 <TIM_OC1_SetConfig+0x12c>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d003      	beq.n	8003100 <TIM_OC1_SetConfig+0x88>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	4a2b      	ldr	r2, [pc, #172]	; (80031a8 <TIM_OC1_SetConfig+0x130>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d10c      	bne.n	800311a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	f023 0308 	bic.w	r3, r3, #8
 8003106:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	697a      	ldr	r2, [r7, #20]
 800310e:	4313      	orrs	r3, r2
 8003110:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	f023 0304 	bic.w	r3, r3, #4
 8003118:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a1d      	ldr	r2, [pc, #116]	; (8003194 <TIM_OC1_SetConfig+0x11c>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d013      	beq.n	800314a <TIM_OC1_SetConfig+0xd2>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a1c      	ldr	r2, [pc, #112]	; (8003198 <TIM_OC1_SetConfig+0x120>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d00f      	beq.n	800314a <TIM_OC1_SetConfig+0xd2>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a1b      	ldr	r2, [pc, #108]	; (800319c <TIM_OC1_SetConfig+0x124>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d00b      	beq.n	800314a <TIM_OC1_SetConfig+0xd2>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a1a      	ldr	r2, [pc, #104]	; (80031a0 <TIM_OC1_SetConfig+0x128>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d007      	beq.n	800314a <TIM_OC1_SetConfig+0xd2>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a19      	ldr	r2, [pc, #100]	; (80031a4 <TIM_OC1_SetConfig+0x12c>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d003      	beq.n	800314a <TIM_OC1_SetConfig+0xd2>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a18      	ldr	r2, [pc, #96]	; (80031a8 <TIM_OC1_SetConfig+0x130>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d111      	bne.n	800316e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003150:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003158:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	695b      	ldr	r3, [r3, #20]
 800315e:	693a      	ldr	r2, [r7, #16]
 8003160:	4313      	orrs	r3, r2
 8003162:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	699b      	ldr	r3, [r3, #24]
 8003168:	693a      	ldr	r2, [r7, #16]
 800316a:	4313      	orrs	r3, r2
 800316c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	693a      	ldr	r2, [r7, #16]
 8003172:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	68fa      	ldr	r2, [r7, #12]
 8003178:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	685a      	ldr	r2, [r3, #4]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	697a      	ldr	r2, [r7, #20]
 8003186:	621a      	str	r2, [r3, #32]
}
 8003188:	bf00      	nop
 800318a:	371c      	adds	r7, #28
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr
 8003194:	40012c00 	.word	0x40012c00
 8003198:	40013400 	.word	0x40013400
 800319c:	40014000 	.word	0x40014000
 80031a0:	40014400 	.word	0x40014400
 80031a4:	40014800 	.word	0x40014800
 80031a8:	40015000 	.word	0x40015000

080031ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b087      	sub	sp, #28
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a1b      	ldr	r3, [r3, #32]
 80031ba:	f023 0210 	bic.w	r2, r3, #16
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a1b      	ldr	r3, [r3, #32]
 80031c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	699b      	ldr	r3, [r3, #24]
 80031d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	021b      	lsls	r3, r3, #8
 80031ee:	68fa      	ldr	r2, [r7, #12]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	f023 0320 	bic.w	r3, r3, #32
 80031fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	011b      	lsls	r3, r3, #4
 8003202:	697a      	ldr	r2, [r7, #20]
 8003204:	4313      	orrs	r3, r2
 8003206:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	4a2c      	ldr	r2, [pc, #176]	; (80032bc <TIM_OC2_SetConfig+0x110>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d007      	beq.n	8003220 <TIM_OC2_SetConfig+0x74>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	4a2b      	ldr	r2, [pc, #172]	; (80032c0 <TIM_OC2_SetConfig+0x114>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d003      	beq.n	8003220 <TIM_OC2_SetConfig+0x74>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	4a2a      	ldr	r2, [pc, #168]	; (80032c4 <TIM_OC2_SetConfig+0x118>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d10d      	bne.n	800323c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003226:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	011b      	lsls	r3, r3, #4
 800322e:	697a      	ldr	r2, [r7, #20]
 8003230:	4313      	orrs	r3, r2
 8003232:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800323a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	4a1f      	ldr	r2, [pc, #124]	; (80032bc <TIM_OC2_SetConfig+0x110>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d013      	beq.n	800326c <TIM_OC2_SetConfig+0xc0>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	4a1e      	ldr	r2, [pc, #120]	; (80032c0 <TIM_OC2_SetConfig+0x114>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d00f      	beq.n	800326c <TIM_OC2_SetConfig+0xc0>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	4a1e      	ldr	r2, [pc, #120]	; (80032c8 <TIM_OC2_SetConfig+0x11c>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d00b      	beq.n	800326c <TIM_OC2_SetConfig+0xc0>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	4a1d      	ldr	r2, [pc, #116]	; (80032cc <TIM_OC2_SetConfig+0x120>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d007      	beq.n	800326c <TIM_OC2_SetConfig+0xc0>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	4a1c      	ldr	r2, [pc, #112]	; (80032d0 <TIM_OC2_SetConfig+0x124>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d003      	beq.n	800326c <TIM_OC2_SetConfig+0xc0>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	4a17      	ldr	r2, [pc, #92]	; (80032c4 <TIM_OC2_SetConfig+0x118>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d113      	bne.n	8003294 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003272:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800327a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	695b      	ldr	r3, [r3, #20]
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	693a      	ldr	r2, [r7, #16]
 8003284:	4313      	orrs	r3, r2
 8003286:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	699b      	ldr	r3, [r3, #24]
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	693a      	ldr	r2, [r7, #16]
 8003290:	4313      	orrs	r3, r2
 8003292:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	693a      	ldr	r2, [r7, #16]
 8003298:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	68fa      	ldr	r2, [r7, #12]
 800329e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	685a      	ldr	r2, [r3, #4]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	697a      	ldr	r2, [r7, #20]
 80032ac:	621a      	str	r2, [r3, #32]
}
 80032ae:	bf00      	nop
 80032b0:	371c      	adds	r7, #28
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
 80032ba:	bf00      	nop
 80032bc:	40012c00 	.word	0x40012c00
 80032c0:	40013400 	.word	0x40013400
 80032c4:	40015000 	.word	0x40015000
 80032c8:	40014000 	.word	0x40014000
 80032cc:	40014400 	.word	0x40014400
 80032d0:	40014800 	.word	0x40014800

080032d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b087      	sub	sp, #28
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a1b      	ldr	r3, [r3, #32]
 80032e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a1b      	ldr	r3, [r3, #32]
 80032ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	69db      	ldr	r3, [r3, #28]
 80032fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003302:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003306:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f023 0303 	bic.w	r3, r3, #3
 800330e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	68fa      	ldr	r2, [r7, #12]
 8003316:	4313      	orrs	r3, r2
 8003318:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003320:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	021b      	lsls	r3, r3, #8
 8003328:	697a      	ldr	r2, [r7, #20]
 800332a:	4313      	orrs	r3, r2
 800332c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a2b      	ldr	r2, [pc, #172]	; (80033e0 <TIM_OC3_SetConfig+0x10c>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d007      	beq.n	8003346 <TIM_OC3_SetConfig+0x72>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a2a      	ldr	r2, [pc, #168]	; (80033e4 <TIM_OC3_SetConfig+0x110>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d003      	beq.n	8003346 <TIM_OC3_SetConfig+0x72>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a29      	ldr	r2, [pc, #164]	; (80033e8 <TIM_OC3_SetConfig+0x114>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d10d      	bne.n	8003362 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800334c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	021b      	lsls	r3, r3, #8
 8003354:	697a      	ldr	r2, [r7, #20]
 8003356:	4313      	orrs	r3, r2
 8003358:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003360:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a1e      	ldr	r2, [pc, #120]	; (80033e0 <TIM_OC3_SetConfig+0x10c>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d013      	beq.n	8003392 <TIM_OC3_SetConfig+0xbe>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a1d      	ldr	r2, [pc, #116]	; (80033e4 <TIM_OC3_SetConfig+0x110>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d00f      	beq.n	8003392 <TIM_OC3_SetConfig+0xbe>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a1d      	ldr	r2, [pc, #116]	; (80033ec <TIM_OC3_SetConfig+0x118>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d00b      	beq.n	8003392 <TIM_OC3_SetConfig+0xbe>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a1c      	ldr	r2, [pc, #112]	; (80033f0 <TIM_OC3_SetConfig+0x11c>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d007      	beq.n	8003392 <TIM_OC3_SetConfig+0xbe>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a1b      	ldr	r2, [pc, #108]	; (80033f4 <TIM_OC3_SetConfig+0x120>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d003      	beq.n	8003392 <TIM_OC3_SetConfig+0xbe>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a16      	ldr	r2, [pc, #88]	; (80033e8 <TIM_OC3_SetConfig+0x114>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d113      	bne.n	80033ba <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003398:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80033a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	695b      	ldr	r3, [r3, #20]
 80033a6:	011b      	lsls	r3, r3, #4
 80033a8:	693a      	ldr	r2, [r7, #16]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	699b      	ldr	r3, [r3, #24]
 80033b2:	011b      	lsls	r3, r3, #4
 80033b4:	693a      	ldr	r2, [r7, #16]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	693a      	ldr	r2, [r7, #16]
 80033be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	68fa      	ldr	r2, [r7, #12]
 80033c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	685a      	ldr	r2, [r3, #4]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	697a      	ldr	r2, [r7, #20]
 80033d2:	621a      	str	r2, [r3, #32]
}
 80033d4:	bf00      	nop
 80033d6:	371c      	adds	r7, #28
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr
 80033e0:	40012c00 	.word	0x40012c00
 80033e4:	40013400 	.word	0x40013400
 80033e8:	40015000 	.word	0x40015000
 80033ec:	40014000 	.word	0x40014000
 80033f0:	40014400 	.word	0x40014400
 80033f4:	40014800 	.word	0x40014800

080033f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b087      	sub	sp, #28
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6a1b      	ldr	r3, [r3, #32]
 8003406:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a1b      	ldr	r3, [r3, #32]
 8003412:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	69db      	ldr	r3, [r3, #28]
 800341e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003426:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800342a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003432:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	021b      	lsls	r3, r3, #8
 800343a:	68fa      	ldr	r2, [r7, #12]
 800343c:	4313      	orrs	r3, r2
 800343e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003446:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	031b      	lsls	r3, r3, #12
 800344e:	697a      	ldr	r2, [r7, #20]
 8003450:	4313      	orrs	r3, r2
 8003452:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	4a2c      	ldr	r2, [pc, #176]	; (8003508 <TIM_OC4_SetConfig+0x110>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d007      	beq.n	800346c <TIM_OC4_SetConfig+0x74>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	4a2b      	ldr	r2, [pc, #172]	; (800350c <TIM_OC4_SetConfig+0x114>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d003      	beq.n	800346c <TIM_OC4_SetConfig+0x74>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	4a2a      	ldr	r2, [pc, #168]	; (8003510 <TIM_OC4_SetConfig+0x118>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d10d      	bne.n	8003488 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003472:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	031b      	lsls	r3, r3, #12
 800347a:	697a      	ldr	r2, [r7, #20]
 800347c:	4313      	orrs	r3, r2
 800347e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003486:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	4a1f      	ldr	r2, [pc, #124]	; (8003508 <TIM_OC4_SetConfig+0x110>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d013      	beq.n	80034b8 <TIM_OC4_SetConfig+0xc0>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	4a1e      	ldr	r2, [pc, #120]	; (800350c <TIM_OC4_SetConfig+0x114>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d00f      	beq.n	80034b8 <TIM_OC4_SetConfig+0xc0>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	4a1e      	ldr	r2, [pc, #120]	; (8003514 <TIM_OC4_SetConfig+0x11c>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d00b      	beq.n	80034b8 <TIM_OC4_SetConfig+0xc0>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	4a1d      	ldr	r2, [pc, #116]	; (8003518 <TIM_OC4_SetConfig+0x120>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d007      	beq.n	80034b8 <TIM_OC4_SetConfig+0xc0>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	4a1c      	ldr	r2, [pc, #112]	; (800351c <TIM_OC4_SetConfig+0x124>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d003      	beq.n	80034b8 <TIM_OC4_SetConfig+0xc0>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	4a17      	ldr	r2, [pc, #92]	; (8003510 <TIM_OC4_SetConfig+0x118>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d113      	bne.n	80034e0 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034be:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80034c6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	695b      	ldr	r3, [r3, #20]
 80034cc:	019b      	lsls	r3, r3, #6
 80034ce:	693a      	ldr	r2, [r7, #16]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	699b      	ldr	r3, [r3, #24]
 80034d8:	019b      	lsls	r3, r3, #6
 80034da:	693a      	ldr	r2, [r7, #16]
 80034dc:	4313      	orrs	r3, r2
 80034de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	693a      	ldr	r2, [r7, #16]
 80034e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	68fa      	ldr	r2, [r7, #12]
 80034ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	685a      	ldr	r2, [r3, #4]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	697a      	ldr	r2, [r7, #20]
 80034f8:	621a      	str	r2, [r3, #32]
}
 80034fa:	bf00      	nop
 80034fc:	371c      	adds	r7, #28
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr
 8003506:	bf00      	nop
 8003508:	40012c00 	.word	0x40012c00
 800350c:	40013400 	.word	0x40013400
 8003510:	40015000 	.word	0x40015000
 8003514:	40014000 	.word	0x40014000
 8003518:	40014400 	.word	0x40014400
 800351c:	40014800 	.word	0x40014800

08003520 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003520:	b480      	push	{r7}
 8003522:	b087      	sub	sp, #28
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a1b      	ldr	r3, [r3, #32]
 800352e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a1b      	ldr	r3, [r3, #32]
 800353a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003546:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800354e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003552:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	68fa      	ldr	r2, [r7, #12]
 800355a:	4313      	orrs	r3, r2
 800355c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003564:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	041b      	lsls	r3, r3, #16
 800356c:	693a      	ldr	r2, [r7, #16]
 800356e:	4313      	orrs	r3, r2
 8003570:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a19      	ldr	r2, [pc, #100]	; (80035dc <TIM_OC5_SetConfig+0xbc>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d013      	beq.n	80035a2 <TIM_OC5_SetConfig+0x82>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a18      	ldr	r2, [pc, #96]	; (80035e0 <TIM_OC5_SetConfig+0xc0>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d00f      	beq.n	80035a2 <TIM_OC5_SetConfig+0x82>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a17      	ldr	r2, [pc, #92]	; (80035e4 <TIM_OC5_SetConfig+0xc4>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d00b      	beq.n	80035a2 <TIM_OC5_SetConfig+0x82>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a16      	ldr	r2, [pc, #88]	; (80035e8 <TIM_OC5_SetConfig+0xc8>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d007      	beq.n	80035a2 <TIM_OC5_SetConfig+0x82>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a15      	ldr	r2, [pc, #84]	; (80035ec <TIM_OC5_SetConfig+0xcc>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d003      	beq.n	80035a2 <TIM_OC5_SetConfig+0x82>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a14      	ldr	r2, [pc, #80]	; (80035f0 <TIM_OC5_SetConfig+0xd0>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d109      	bne.n	80035b6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035a8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	695b      	ldr	r3, [r3, #20]
 80035ae:	021b      	lsls	r3, r3, #8
 80035b0:	697a      	ldr	r2, [r7, #20]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	697a      	ldr	r2, [r7, #20]
 80035ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	68fa      	ldr	r2, [r7, #12]
 80035c0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	685a      	ldr	r2, [r3, #4]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	693a      	ldr	r2, [r7, #16]
 80035ce:	621a      	str	r2, [r3, #32]
}
 80035d0:	bf00      	nop
 80035d2:	371c      	adds	r7, #28
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr
 80035dc:	40012c00 	.word	0x40012c00
 80035e0:	40013400 	.word	0x40013400
 80035e4:	40014000 	.word	0x40014000
 80035e8:	40014400 	.word	0x40014400
 80035ec:	40014800 	.word	0x40014800
 80035f0:	40015000 	.word	0x40015000

080035f4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b087      	sub	sp, #28
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a1b      	ldr	r3, [r3, #32]
 8003602:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a1b      	ldr	r3, [r3, #32]
 800360e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800361a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003622:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003626:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	021b      	lsls	r3, r3, #8
 800362e:	68fa      	ldr	r2, [r7, #12]
 8003630:	4313      	orrs	r3, r2
 8003632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800363a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	051b      	lsls	r3, r3, #20
 8003642:	693a      	ldr	r2, [r7, #16]
 8003644:	4313      	orrs	r3, r2
 8003646:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	4a1a      	ldr	r2, [pc, #104]	; (80036b4 <TIM_OC6_SetConfig+0xc0>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d013      	beq.n	8003678 <TIM_OC6_SetConfig+0x84>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	4a19      	ldr	r2, [pc, #100]	; (80036b8 <TIM_OC6_SetConfig+0xc4>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d00f      	beq.n	8003678 <TIM_OC6_SetConfig+0x84>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	4a18      	ldr	r2, [pc, #96]	; (80036bc <TIM_OC6_SetConfig+0xc8>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d00b      	beq.n	8003678 <TIM_OC6_SetConfig+0x84>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	4a17      	ldr	r2, [pc, #92]	; (80036c0 <TIM_OC6_SetConfig+0xcc>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d007      	beq.n	8003678 <TIM_OC6_SetConfig+0x84>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	4a16      	ldr	r2, [pc, #88]	; (80036c4 <TIM_OC6_SetConfig+0xd0>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d003      	beq.n	8003678 <TIM_OC6_SetConfig+0x84>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	4a15      	ldr	r2, [pc, #84]	; (80036c8 <TIM_OC6_SetConfig+0xd4>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d109      	bne.n	800368c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800367e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	695b      	ldr	r3, [r3, #20]
 8003684:	029b      	lsls	r3, r3, #10
 8003686:	697a      	ldr	r2, [r7, #20]
 8003688:	4313      	orrs	r3, r2
 800368a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	697a      	ldr	r2, [r7, #20]
 8003690:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	68fa      	ldr	r2, [r7, #12]
 8003696:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	685a      	ldr	r2, [r3, #4]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	693a      	ldr	r2, [r7, #16]
 80036a4:	621a      	str	r2, [r3, #32]
}
 80036a6:	bf00      	nop
 80036a8:	371c      	adds	r7, #28
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr
 80036b2:	bf00      	nop
 80036b4:	40012c00 	.word	0x40012c00
 80036b8:	40013400 	.word	0x40013400
 80036bc:	40014000 	.word	0x40014000
 80036c0:	40014400 	.word	0x40014400
 80036c4:	40014800 	.word	0x40014800
 80036c8:	40015000 	.word	0x40015000

080036cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b087      	sub	sp, #28
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	60b9      	str	r1, [r7, #8]
 80036d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6a1b      	ldr	r3, [r3, #32]
 80036dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6a1b      	ldr	r3, [r3, #32]
 80036e2:	f023 0201 	bic.w	r2, r3, #1
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	699b      	ldr	r3, [r3, #24]
 80036ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	011b      	lsls	r3, r3, #4
 80036fc:	693a      	ldr	r2, [r7, #16]
 80036fe:	4313      	orrs	r3, r2
 8003700:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	f023 030a 	bic.w	r3, r3, #10
 8003708:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800370a:	697a      	ldr	r2, [r7, #20]
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	4313      	orrs	r3, r2
 8003710:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	693a      	ldr	r2, [r7, #16]
 8003716:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	697a      	ldr	r2, [r7, #20]
 800371c:	621a      	str	r2, [r3, #32]
}
 800371e:	bf00      	nop
 8003720:	371c      	adds	r7, #28
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr

0800372a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800372a:	b480      	push	{r7}
 800372c:	b087      	sub	sp, #28
 800372e:	af00      	add	r7, sp, #0
 8003730:	60f8      	str	r0, [r7, #12]
 8003732:	60b9      	str	r1, [r7, #8]
 8003734:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6a1b      	ldr	r3, [r3, #32]
 800373a:	f023 0210 	bic.w	r2, r3, #16
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	699b      	ldr	r3, [r3, #24]
 8003746:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6a1b      	ldr	r3, [r3, #32]
 800374c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003754:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	031b      	lsls	r3, r3, #12
 800375a:	697a      	ldr	r2, [r7, #20]
 800375c:	4313      	orrs	r3, r2
 800375e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003766:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	011b      	lsls	r3, r3, #4
 800376c:	693a      	ldr	r2, [r7, #16]
 800376e:	4313      	orrs	r3, r2
 8003770:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	697a      	ldr	r2, [r7, #20]
 8003776:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	693a      	ldr	r2, [r7, #16]
 800377c:	621a      	str	r2, [r3, #32]
}
 800377e:	bf00      	nop
 8003780:	371c      	adds	r7, #28
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr

0800378a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800378a:	b480      	push	{r7}
 800378c:	b085      	sub	sp, #20
 800378e:	af00      	add	r7, sp, #0
 8003790:	6078      	str	r0, [r7, #4]
 8003792:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80037a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80037a6:	683a      	ldr	r2, [r7, #0]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	f043 0307 	orr.w	r3, r3, #7
 80037b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	68fa      	ldr	r2, [r7, #12]
 80037b6:	609a      	str	r2, [r3, #8]
}
 80037b8:	bf00      	nop
 80037ba:	3714      	adds	r7, #20
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr

080037c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b087      	sub	sp, #28
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	60f8      	str	r0, [r7, #12]
 80037cc:	60b9      	str	r1, [r7, #8]
 80037ce:	607a      	str	r2, [r7, #4]
 80037d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	021a      	lsls	r2, r3, #8
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	431a      	orrs	r2, r3
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	697a      	ldr	r2, [r7, #20]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	697a      	ldr	r2, [r7, #20]
 80037f6:	609a      	str	r2, [r3, #8]
}
 80037f8:	bf00      	nop
 80037fa:	371c      	adds	r7, #28
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr

08003804 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003804:	b480      	push	{r7}
 8003806:	b087      	sub	sp, #28
 8003808:	af00      	add	r7, sp, #0
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	60b9      	str	r1, [r7, #8]
 800380e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	f003 031f 	and.w	r3, r3, #31
 8003816:	2201      	movs	r2, #1
 8003818:	fa02 f303 	lsl.w	r3, r2, r3
 800381c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6a1a      	ldr	r2, [r3, #32]
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	43db      	mvns	r3, r3
 8003826:	401a      	ands	r2, r3
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6a1a      	ldr	r2, [r3, #32]
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	f003 031f 	and.w	r3, r3, #31
 8003836:	6879      	ldr	r1, [r7, #4]
 8003838:	fa01 f303 	lsl.w	r3, r1, r3
 800383c:	431a      	orrs	r2, r3
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	621a      	str	r2, [r3, #32]
}
 8003842:	bf00      	nop
 8003844:	371c      	adds	r7, #28
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr
	...

08003850 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003850:	b480      	push	{r7}
 8003852:	b085      	sub	sp, #20
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003860:	2b01      	cmp	r3, #1
 8003862:	d101      	bne.n	8003868 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003864:	2302      	movs	r3, #2
 8003866:	e074      	b.n	8003952 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2202      	movs	r2, #2
 8003874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a34      	ldr	r2, [pc, #208]	; (8003960 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d009      	beq.n	80038a6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a33      	ldr	r2, [pc, #204]	; (8003964 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d004      	beq.n	80038a6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a31      	ldr	r2, [pc, #196]	; (8003968 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d108      	bne.n	80038b8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80038ac:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	68fa      	ldr	r2, [r7, #12]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80038be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	68fa      	ldr	r2, [r7, #12]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	68fa      	ldr	r2, [r7, #12]
 80038d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a21      	ldr	r2, [pc, #132]	; (8003960 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d022      	beq.n	8003926 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038e8:	d01d      	beq.n	8003926 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a1f      	ldr	r2, [pc, #124]	; (800396c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d018      	beq.n	8003926 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a1d      	ldr	r2, [pc, #116]	; (8003970 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d013      	beq.n	8003926 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a1c      	ldr	r2, [pc, #112]	; (8003974 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d00e      	beq.n	8003926 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a15      	ldr	r2, [pc, #84]	; (8003964 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d009      	beq.n	8003926 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a18      	ldr	r2, [pc, #96]	; (8003978 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d004      	beq.n	8003926 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a11      	ldr	r2, [pc, #68]	; (8003968 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d10c      	bne.n	8003940 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800392c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	68ba      	ldr	r2, [r7, #8]
 8003934:	4313      	orrs	r3, r2
 8003936:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	68ba      	ldr	r2, [r7, #8]
 800393e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2201      	movs	r2, #1
 8003944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003950:	2300      	movs	r3, #0
}
 8003952:	4618      	mov	r0, r3
 8003954:	3714      	adds	r7, #20
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr
 800395e:	bf00      	nop
 8003960:	40012c00 	.word	0x40012c00
 8003964:	40013400 	.word	0x40013400
 8003968:	40015000 	.word	0x40015000
 800396c:	40000400 	.word	0x40000400
 8003970:	40000800 	.word	0x40000800
 8003974:	40000c00 	.word	0x40000c00
 8003978:	40014000 	.word	0x40014000

0800397c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003984:	bf00      	nop
 8003986:	370c      	adds	r7, #12
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr

08003990 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003998:	bf00      	nop
 800399a:	370c      	adds	r7, #12
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr

080039a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80039ac:	bf00      	nop
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr

080039b8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80039c0:	bf00      	nop
 80039c2:	370c      	adds	r7, #12
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80039d4:	bf00      	nop
 80039d6:	370c      	adds	r7, #12
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr

080039e0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b083      	sub	sp, #12
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80039e8:	bf00      	nop
 80039ea:	370c      	adds	r7, #12
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr

080039f4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80039fc:	bf00      	nop
 80039fe:	370c      	adds	r7, #12
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr

08003a08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b082      	sub	sp, #8
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d101      	bne.n	8003a1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e042      	b.n	8003aa0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d106      	bne.n	8003a32 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2200      	movs	r2, #0
 8003a28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f7fc ffab 	bl	8000988 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2224      	movs	r2, #36	; 0x24
 8003a36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f022 0201 	bic.w	r2, r2, #1
 8003a48:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f000 f8c2 	bl	8003bd4 <UART_SetConfig>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d101      	bne.n	8003a5a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e022      	b.n	8003aa0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d002      	beq.n	8003a68 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 fbb2 	bl	80041cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	685a      	ldr	r2, [r3, #4]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a76:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	689a      	ldr	r2, [r3, #8]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a86:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f042 0201 	orr.w	r2, r2, #1
 8003a96:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f000 fc39 	bl	8004310 <UART_CheckIdleState>
 8003a9e:	4603      	mov	r3, r0
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3708      	adds	r7, #8
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b08a      	sub	sp, #40	; 0x28
 8003aac:	af02      	add	r7, sp, #8
 8003aae:	60f8      	str	r0, [r7, #12]
 8003ab0:	60b9      	str	r1, [r7, #8]
 8003ab2:	603b      	str	r3, [r7, #0]
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003abe:	2b20      	cmp	r3, #32
 8003ac0:	f040 8083 	bne.w	8003bca <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d002      	beq.n	8003ad0 <HAL_UART_Transmit+0x28>
 8003aca:	88fb      	ldrh	r3, [r7, #6]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d101      	bne.n	8003ad4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e07b      	b.n	8003bcc <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d101      	bne.n	8003ae2 <HAL_UART_Transmit+0x3a>
 8003ade:	2302      	movs	r3, #2
 8003ae0:	e074      	b.n	8003bcc <HAL_UART_Transmit+0x124>
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2221      	movs	r2, #33	; 0x21
 8003af6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003afa:	f7fd f907 	bl	8000d0c <HAL_GetTick>
 8003afe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	88fa      	ldrh	r2, [r7, #6]
 8003b04:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	88fa      	ldrh	r2, [r7, #6]
 8003b0c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b18:	d108      	bne.n	8003b2c <HAL_UART_Transmit+0x84>
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	691b      	ldr	r3, [r3, #16]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d104      	bne.n	8003b2c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8003b22:	2300      	movs	r3, #0
 8003b24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	61bb      	str	r3, [r7, #24]
 8003b2a:	e003      	b.n	8003b34 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b30:	2300      	movs	r3, #0
 8003b32:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2200      	movs	r2, #0
 8003b38:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8003b3c:	e02c      	b.n	8003b98 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	9300      	str	r3, [sp, #0]
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	2200      	movs	r2, #0
 8003b46:	2180      	movs	r1, #128	; 0x80
 8003b48:	68f8      	ldr	r0, [r7, #12]
 8003b4a:	f000 fc2c 	bl	80043a6 <UART_WaitOnFlagUntilTimeout>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d001      	beq.n	8003b58 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8003b54:	2303      	movs	r3, #3
 8003b56:	e039      	b.n	8003bcc <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d10b      	bne.n	8003b76 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b5e:	69bb      	ldr	r3, [r7, #24]
 8003b60:	881b      	ldrh	r3, [r3, #0]
 8003b62:	461a      	mov	r2, r3
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b6c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003b6e:	69bb      	ldr	r3, [r7, #24]
 8003b70:	3302      	adds	r3, #2
 8003b72:	61bb      	str	r3, [r7, #24]
 8003b74:	e007      	b.n	8003b86 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	781a      	ldrb	r2, [r3, #0]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003b80:	69fb      	ldr	r3, [r7, #28]
 8003b82:	3301      	adds	r3, #1
 8003b84:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	3b01      	subs	r3, #1
 8003b90:	b29a      	uxth	r2, r3
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d1cc      	bne.n	8003b3e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	9300      	str	r3, [sp, #0]
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	2200      	movs	r2, #0
 8003bac:	2140      	movs	r1, #64	; 0x40
 8003bae:	68f8      	ldr	r0, [r7, #12]
 8003bb0:	f000 fbf9 	bl	80043a6 <UART_WaitOnFlagUntilTimeout>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d001      	beq.n	8003bbe <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e006      	b.n	8003bcc <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2220      	movs	r2, #32
 8003bc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	e000      	b.n	8003bcc <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8003bca:	2302      	movs	r3, #2
  }
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3720      	adds	r7, #32
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bd8:	b08c      	sub	sp, #48	; 0x30
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003bde:	2300      	movs	r3, #0
 8003be0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	689a      	ldr	r2, [r3, #8]
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	691b      	ldr	r3, [r3, #16]
 8003bec:	431a      	orrs	r2, r3
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	695b      	ldr	r3, [r3, #20]
 8003bf2:	431a      	orrs	r2, r3
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	69db      	ldr	r3, [r3, #28]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	4baa      	ldr	r3, [pc, #680]	; (8003eac <UART_SetConfig+0x2d8>)
 8003c04:	4013      	ands	r3, r2
 8003c06:	697a      	ldr	r2, [r7, #20]
 8003c08:	6812      	ldr	r2, [r2, #0]
 8003c0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c0c:	430b      	orrs	r3, r1
 8003c0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	68da      	ldr	r2, [r3, #12]
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	430a      	orrs	r2, r1
 8003c24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	699b      	ldr	r3, [r3, #24]
 8003c2a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a9f      	ldr	r2, [pc, #636]	; (8003eb0 <UART_SetConfig+0x2dc>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d004      	beq.n	8003c40 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	6a1b      	ldr	r3, [r3, #32]
 8003c3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003c4a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003c4e:	697a      	ldr	r2, [r7, #20]
 8003c50:	6812      	ldr	r2, [r2, #0]
 8003c52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c54:	430b      	orrs	r3, r1
 8003c56:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c5e:	f023 010f 	bic.w	r1, r3, #15
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	430a      	orrs	r2, r1
 8003c6c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a90      	ldr	r2, [pc, #576]	; (8003eb4 <UART_SetConfig+0x2e0>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d125      	bne.n	8003cc4 <UART_SetConfig+0xf0>
 8003c78:	4b8f      	ldr	r3, [pc, #572]	; (8003eb8 <UART_SetConfig+0x2e4>)
 8003c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c7e:	f003 0303 	and.w	r3, r3, #3
 8003c82:	2b03      	cmp	r3, #3
 8003c84:	d81a      	bhi.n	8003cbc <UART_SetConfig+0xe8>
 8003c86:	a201      	add	r2, pc, #4	; (adr r2, 8003c8c <UART_SetConfig+0xb8>)
 8003c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c8c:	08003c9d 	.word	0x08003c9d
 8003c90:	08003cad 	.word	0x08003cad
 8003c94:	08003ca5 	.word	0x08003ca5
 8003c98:	08003cb5 	.word	0x08003cb5
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ca2:	e116      	b.n	8003ed2 <UART_SetConfig+0x2fe>
 8003ca4:	2302      	movs	r3, #2
 8003ca6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003caa:	e112      	b.n	8003ed2 <UART_SetConfig+0x2fe>
 8003cac:	2304      	movs	r3, #4
 8003cae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cb2:	e10e      	b.n	8003ed2 <UART_SetConfig+0x2fe>
 8003cb4:	2308      	movs	r3, #8
 8003cb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cba:	e10a      	b.n	8003ed2 <UART_SetConfig+0x2fe>
 8003cbc:	2310      	movs	r3, #16
 8003cbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cc2:	e106      	b.n	8003ed2 <UART_SetConfig+0x2fe>
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a7c      	ldr	r2, [pc, #496]	; (8003ebc <UART_SetConfig+0x2e8>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d138      	bne.n	8003d40 <UART_SetConfig+0x16c>
 8003cce:	4b7a      	ldr	r3, [pc, #488]	; (8003eb8 <UART_SetConfig+0x2e4>)
 8003cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cd4:	f003 030c 	and.w	r3, r3, #12
 8003cd8:	2b0c      	cmp	r3, #12
 8003cda:	d82d      	bhi.n	8003d38 <UART_SetConfig+0x164>
 8003cdc:	a201      	add	r2, pc, #4	; (adr r2, 8003ce4 <UART_SetConfig+0x110>)
 8003cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ce2:	bf00      	nop
 8003ce4:	08003d19 	.word	0x08003d19
 8003ce8:	08003d39 	.word	0x08003d39
 8003cec:	08003d39 	.word	0x08003d39
 8003cf0:	08003d39 	.word	0x08003d39
 8003cf4:	08003d29 	.word	0x08003d29
 8003cf8:	08003d39 	.word	0x08003d39
 8003cfc:	08003d39 	.word	0x08003d39
 8003d00:	08003d39 	.word	0x08003d39
 8003d04:	08003d21 	.word	0x08003d21
 8003d08:	08003d39 	.word	0x08003d39
 8003d0c:	08003d39 	.word	0x08003d39
 8003d10:	08003d39 	.word	0x08003d39
 8003d14:	08003d31 	.word	0x08003d31
 8003d18:	2300      	movs	r3, #0
 8003d1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d1e:	e0d8      	b.n	8003ed2 <UART_SetConfig+0x2fe>
 8003d20:	2302      	movs	r3, #2
 8003d22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d26:	e0d4      	b.n	8003ed2 <UART_SetConfig+0x2fe>
 8003d28:	2304      	movs	r3, #4
 8003d2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d2e:	e0d0      	b.n	8003ed2 <UART_SetConfig+0x2fe>
 8003d30:	2308      	movs	r3, #8
 8003d32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d36:	e0cc      	b.n	8003ed2 <UART_SetConfig+0x2fe>
 8003d38:	2310      	movs	r3, #16
 8003d3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d3e:	e0c8      	b.n	8003ed2 <UART_SetConfig+0x2fe>
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a5e      	ldr	r2, [pc, #376]	; (8003ec0 <UART_SetConfig+0x2ec>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d125      	bne.n	8003d96 <UART_SetConfig+0x1c2>
 8003d4a:	4b5b      	ldr	r3, [pc, #364]	; (8003eb8 <UART_SetConfig+0x2e4>)
 8003d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d50:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003d54:	2b30      	cmp	r3, #48	; 0x30
 8003d56:	d016      	beq.n	8003d86 <UART_SetConfig+0x1b2>
 8003d58:	2b30      	cmp	r3, #48	; 0x30
 8003d5a:	d818      	bhi.n	8003d8e <UART_SetConfig+0x1ba>
 8003d5c:	2b20      	cmp	r3, #32
 8003d5e:	d00a      	beq.n	8003d76 <UART_SetConfig+0x1a2>
 8003d60:	2b20      	cmp	r3, #32
 8003d62:	d814      	bhi.n	8003d8e <UART_SetConfig+0x1ba>
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d002      	beq.n	8003d6e <UART_SetConfig+0x19a>
 8003d68:	2b10      	cmp	r3, #16
 8003d6a:	d008      	beq.n	8003d7e <UART_SetConfig+0x1aa>
 8003d6c:	e00f      	b.n	8003d8e <UART_SetConfig+0x1ba>
 8003d6e:	2300      	movs	r3, #0
 8003d70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d74:	e0ad      	b.n	8003ed2 <UART_SetConfig+0x2fe>
 8003d76:	2302      	movs	r3, #2
 8003d78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d7c:	e0a9      	b.n	8003ed2 <UART_SetConfig+0x2fe>
 8003d7e:	2304      	movs	r3, #4
 8003d80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d84:	e0a5      	b.n	8003ed2 <UART_SetConfig+0x2fe>
 8003d86:	2308      	movs	r3, #8
 8003d88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d8c:	e0a1      	b.n	8003ed2 <UART_SetConfig+0x2fe>
 8003d8e:	2310      	movs	r3, #16
 8003d90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d94:	e09d      	b.n	8003ed2 <UART_SetConfig+0x2fe>
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a4a      	ldr	r2, [pc, #296]	; (8003ec4 <UART_SetConfig+0x2f0>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d125      	bne.n	8003dec <UART_SetConfig+0x218>
 8003da0:	4b45      	ldr	r3, [pc, #276]	; (8003eb8 <UART_SetConfig+0x2e4>)
 8003da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003da6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003daa:	2bc0      	cmp	r3, #192	; 0xc0
 8003dac:	d016      	beq.n	8003ddc <UART_SetConfig+0x208>
 8003dae:	2bc0      	cmp	r3, #192	; 0xc0
 8003db0:	d818      	bhi.n	8003de4 <UART_SetConfig+0x210>
 8003db2:	2b80      	cmp	r3, #128	; 0x80
 8003db4:	d00a      	beq.n	8003dcc <UART_SetConfig+0x1f8>
 8003db6:	2b80      	cmp	r3, #128	; 0x80
 8003db8:	d814      	bhi.n	8003de4 <UART_SetConfig+0x210>
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d002      	beq.n	8003dc4 <UART_SetConfig+0x1f0>
 8003dbe:	2b40      	cmp	r3, #64	; 0x40
 8003dc0:	d008      	beq.n	8003dd4 <UART_SetConfig+0x200>
 8003dc2:	e00f      	b.n	8003de4 <UART_SetConfig+0x210>
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003dca:	e082      	b.n	8003ed2 <UART_SetConfig+0x2fe>
 8003dcc:	2302      	movs	r3, #2
 8003dce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003dd2:	e07e      	b.n	8003ed2 <UART_SetConfig+0x2fe>
 8003dd4:	2304      	movs	r3, #4
 8003dd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003dda:	e07a      	b.n	8003ed2 <UART_SetConfig+0x2fe>
 8003ddc:	2308      	movs	r3, #8
 8003dde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003de2:	e076      	b.n	8003ed2 <UART_SetConfig+0x2fe>
 8003de4:	2310      	movs	r3, #16
 8003de6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003dea:	e072      	b.n	8003ed2 <UART_SetConfig+0x2fe>
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a35      	ldr	r2, [pc, #212]	; (8003ec8 <UART_SetConfig+0x2f4>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d12a      	bne.n	8003e4c <UART_SetConfig+0x278>
 8003df6:	4b30      	ldr	r3, [pc, #192]	; (8003eb8 <UART_SetConfig+0x2e4>)
 8003df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dfc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e04:	d01a      	beq.n	8003e3c <UART_SetConfig+0x268>
 8003e06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e0a:	d81b      	bhi.n	8003e44 <UART_SetConfig+0x270>
 8003e0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e10:	d00c      	beq.n	8003e2c <UART_SetConfig+0x258>
 8003e12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e16:	d815      	bhi.n	8003e44 <UART_SetConfig+0x270>
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d003      	beq.n	8003e24 <UART_SetConfig+0x250>
 8003e1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e20:	d008      	beq.n	8003e34 <UART_SetConfig+0x260>
 8003e22:	e00f      	b.n	8003e44 <UART_SetConfig+0x270>
 8003e24:	2300      	movs	r3, #0
 8003e26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e2a:	e052      	b.n	8003ed2 <UART_SetConfig+0x2fe>
 8003e2c:	2302      	movs	r3, #2
 8003e2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e32:	e04e      	b.n	8003ed2 <UART_SetConfig+0x2fe>
 8003e34:	2304      	movs	r3, #4
 8003e36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e3a:	e04a      	b.n	8003ed2 <UART_SetConfig+0x2fe>
 8003e3c:	2308      	movs	r3, #8
 8003e3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e42:	e046      	b.n	8003ed2 <UART_SetConfig+0x2fe>
 8003e44:	2310      	movs	r3, #16
 8003e46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e4a:	e042      	b.n	8003ed2 <UART_SetConfig+0x2fe>
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a17      	ldr	r2, [pc, #92]	; (8003eb0 <UART_SetConfig+0x2dc>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d13a      	bne.n	8003ecc <UART_SetConfig+0x2f8>
 8003e56:	4b18      	ldr	r3, [pc, #96]	; (8003eb8 <UART_SetConfig+0x2e4>)
 8003e58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e5c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003e60:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e64:	d01a      	beq.n	8003e9c <UART_SetConfig+0x2c8>
 8003e66:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e6a:	d81b      	bhi.n	8003ea4 <UART_SetConfig+0x2d0>
 8003e6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e70:	d00c      	beq.n	8003e8c <UART_SetConfig+0x2b8>
 8003e72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e76:	d815      	bhi.n	8003ea4 <UART_SetConfig+0x2d0>
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d003      	beq.n	8003e84 <UART_SetConfig+0x2b0>
 8003e7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e80:	d008      	beq.n	8003e94 <UART_SetConfig+0x2c0>
 8003e82:	e00f      	b.n	8003ea4 <UART_SetConfig+0x2d0>
 8003e84:	2300      	movs	r3, #0
 8003e86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e8a:	e022      	b.n	8003ed2 <UART_SetConfig+0x2fe>
 8003e8c:	2302      	movs	r3, #2
 8003e8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e92:	e01e      	b.n	8003ed2 <UART_SetConfig+0x2fe>
 8003e94:	2304      	movs	r3, #4
 8003e96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e9a:	e01a      	b.n	8003ed2 <UART_SetConfig+0x2fe>
 8003e9c:	2308      	movs	r3, #8
 8003e9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ea2:	e016      	b.n	8003ed2 <UART_SetConfig+0x2fe>
 8003ea4:	2310      	movs	r3, #16
 8003ea6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003eaa:	e012      	b.n	8003ed2 <UART_SetConfig+0x2fe>
 8003eac:	cfff69f3 	.word	0xcfff69f3
 8003eb0:	40008000 	.word	0x40008000
 8003eb4:	40013800 	.word	0x40013800
 8003eb8:	40021000 	.word	0x40021000
 8003ebc:	40004400 	.word	0x40004400
 8003ec0:	40004800 	.word	0x40004800
 8003ec4:	40004c00 	.word	0x40004c00
 8003ec8:	40005000 	.word	0x40005000
 8003ecc:	2310      	movs	r3, #16
 8003ece:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4aae      	ldr	r2, [pc, #696]	; (8004190 <UART_SetConfig+0x5bc>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	f040 8097 	bne.w	800400c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003ede:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003ee2:	2b08      	cmp	r3, #8
 8003ee4:	d823      	bhi.n	8003f2e <UART_SetConfig+0x35a>
 8003ee6:	a201      	add	r2, pc, #4	; (adr r2, 8003eec <UART_SetConfig+0x318>)
 8003ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eec:	08003f11 	.word	0x08003f11
 8003ef0:	08003f2f 	.word	0x08003f2f
 8003ef4:	08003f19 	.word	0x08003f19
 8003ef8:	08003f2f 	.word	0x08003f2f
 8003efc:	08003f1f 	.word	0x08003f1f
 8003f00:	08003f2f 	.word	0x08003f2f
 8003f04:	08003f2f 	.word	0x08003f2f
 8003f08:	08003f2f 	.word	0x08003f2f
 8003f0c:	08003f27 	.word	0x08003f27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f10:	f7fd ff34 	bl	8001d7c <HAL_RCC_GetPCLK1Freq>
 8003f14:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003f16:	e010      	b.n	8003f3a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f18:	4b9e      	ldr	r3, [pc, #632]	; (8004194 <UART_SetConfig+0x5c0>)
 8003f1a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003f1c:	e00d      	b.n	8003f3a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f1e:	f7fd febf 	bl	8001ca0 <HAL_RCC_GetSysClockFreq>
 8003f22:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003f24:	e009      	b.n	8003f3a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f2a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003f2c:	e005      	b.n	8003f3a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003f38:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	f000 8130 	beq.w	80041a2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f46:	4a94      	ldr	r2, [pc, #592]	; (8004198 <UART_SetConfig+0x5c4>)
 8003f48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f50:	fbb3 f3f2 	udiv	r3, r3, r2
 8003f54:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	685a      	ldr	r2, [r3, #4]
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	005b      	lsls	r3, r3, #1
 8003f5e:	4413      	add	r3, r2
 8003f60:	69ba      	ldr	r2, [r7, #24]
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d305      	bcc.n	8003f72 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003f6c:	69ba      	ldr	r2, [r7, #24]
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d903      	bls.n	8003f7a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003f78:	e113      	b.n	80041a2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	60bb      	str	r3, [r7, #8]
 8003f80:	60fa      	str	r2, [r7, #12]
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f86:	4a84      	ldr	r2, [pc, #528]	; (8004198 <UART_SetConfig+0x5c4>)
 8003f88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	2200      	movs	r2, #0
 8003f90:	603b      	str	r3, [r7, #0]
 8003f92:	607a      	str	r2, [r7, #4]
 8003f94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f98:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003f9c:	f7fc f990 	bl	80002c0 <__aeabi_uldivmod>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	460b      	mov	r3, r1
 8003fa4:	4610      	mov	r0, r2
 8003fa6:	4619      	mov	r1, r3
 8003fa8:	f04f 0200 	mov.w	r2, #0
 8003fac:	f04f 0300 	mov.w	r3, #0
 8003fb0:	020b      	lsls	r3, r1, #8
 8003fb2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003fb6:	0202      	lsls	r2, r0, #8
 8003fb8:	6979      	ldr	r1, [r7, #20]
 8003fba:	6849      	ldr	r1, [r1, #4]
 8003fbc:	0849      	lsrs	r1, r1, #1
 8003fbe:	2000      	movs	r0, #0
 8003fc0:	460c      	mov	r4, r1
 8003fc2:	4605      	mov	r5, r0
 8003fc4:	eb12 0804 	adds.w	r8, r2, r4
 8003fc8:	eb43 0905 	adc.w	r9, r3, r5
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	469a      	mov	sl, r3
 8003fd4:	4693      	mov	fp, r2
 8003fd6:	4652      	mov	r2, sl
 8003fd8:	465b      	mov	r3, fp
 8003fda:	4640      	mov	r0, r8
 8003fdc:	4649      	mov	r1, r9
 8003fde:	f7fc f96f 	bl	80002c0 <__aeabi_uldivmod>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	460b      	mov	r3, r1
 8003fe6:	4613      	mov	r3, r2
 8003fe8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003fea:	6a3b      	ldr	r3, [r7, #32]
 8003fec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ff0:	d308      	bcc.n	8004004 <UART_SetConfig+0x430>
 8003ff2:	6a3b      	ldr	r3, [r7, #32]
 8003ff4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ff8:	d204      	bcs.n	8004004 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	6a3a      	ldr	r2, [r7, #32]
 8004000:	60da      	str	r2, [r3, #12]
 8004002:	e0ce      	b.n	80041a2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800400a:	e0ca      	b.n	80041a2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	69db      	ldr	r3, [r3, #28]
 8004010:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004014:	d166      	bne.n	80040e4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004016:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800401a:	2b08      	cmp	r3, #8
 800401c:	d827      	bhi.n	800406e <UART_SetConfig+0x49a>
 800401e:	a201      	add	r2, pc, #4	; (adr r2, 8004024 <UART_SetConfig+0x450>)
 8004020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004024:	08004049 	.word	0x08004049
 8004028:	08004051 	.word	0x08004051
 800402c:	08004059 	.word	0x08004059
 8004030:	0800406f 	.word	0x0800406f
 8004034:	0800405f 	.word	0x0800405f
 8004038:	0800406f 	.word	0x0800406f
 800403c:	0800406f 	.word	0x0800406f
 8004040:	0800406f 	.word	0x0800406f
 8004044:	08004067 	.word	0x08004067
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004048:	f7fd fe98 	bl	8001d7c <HAL_RCC_GetPCLK1Freq>
 800404c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800404e:	e014      	b.n	800407a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004050:	f7fd feaa 	bl	8001da8 <HAL_RCC_GetPCLK2Freq>
 8004054:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004056:	e010      	b.n	800407a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004058:	4b4e      	ldr	r3, [pc, #312]	; (8004194 <UART_SetConfig+0x5c0>)
 800405a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800405c:	e00d      	b.n	800407a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800405e:	f7fd fe1f 	bl	8001ca0 <HAL_RCC_GetSysClockFreq>
 8004062:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004064:	e009      	b.n	800407a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004066:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800406a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800406c:	e005      	b.n	800407a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800406e:	2300      	movs	r3, #0
 8004070:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004078:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800407a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407c:	2b00      	cmp	r3, #0
 800407e:	f000 8090 	beq.w	80041a2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004086:	4a44      	ldr	r2, [pc, #272]	; (8004198 <UART_SetConfig+0x5c4>)
 8004088:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800408c:	461a      	mov	r2, r3
 800408e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004090:	fbb3 f3f2 	udiv	r3, r3, r2
 8004094:	005a      	lsls	r2, r3, #1
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	085b      	lsrs	r3, r3, #1
 800409c:	441a      	add	r2, r3
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80040a6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040a8:	6a3b      	ldr	r3, [r7, #32]
 80040aa:	2b0f      	cmp	r3, #15
 80040ac:	d916      	bls.n	80040dc <UART_SetConfig+0x508>
 80040ae:	6a3b      	ldr	r3, [r7, #32]
 80040b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040b4:	d212      	bcs.n	80040dc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80040b6:	6a3b      	ldr	r3, [r7, #32]
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	f023 030f 	bic.w	r3, r3, #15
 80040be:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80040c0:	6a3b      	ldr	r3, [r7, #32]
 80040c2:	085b      	lsrs	r3, r3, #1
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	f003 0307 	and.w	r3, r3, #7
 80040ca:	b29a      	uxth	r2, r3
 80040cc:	8bfb      	ldrh	r3, [r7, #30]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	8bfa      	ldrh	r2, [r7, #30]
 80040d8:	60da      	str	r2, [r3, #12]
 80040da:	e062      	b.n	80041a2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80040e2:	e05e      	b.n	80041a2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80040e4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80040e8:	2b08      	cmp	r3, #8
 80040ea:	d828      	bhi.n	800413e <UART_SetConfig+0x56a>
 80040ec:	a201      	add	r2, pc, #4	; (adr r2, 80040f4 <UART_SetConfig+0x520>)
 80040ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040f2:	bf00      	nop
 80040f4:	08004119 	.word	0x08004119
 80040f8:	08004121 	.word	0x08004121
 80040fc:	08004129 	.word	0x08004129
 8004100:	0800413f 	.word	0x0800413f
 8004104:	0800412f 	.word	0x0800412f
 8004108:	0800413f 	.word	0x0800413f
 800410c:	0800413f 	.word	0x0800413f
 8004110:	0800413f 	.word	0x0800413f
 8004114:	08004137 	.word	0x08004137
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004118:	f7fd fe30 	bl	8001d7c <HAL_RCC_GetPCLK1Freq>
 800411c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800411e:	e014      	b.n	800414a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004120:	f7fd fe42 	bl	8001da8 <HAL_RCC_GetPCLK2Freq>
 8004124:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004126:	e010      	b.n	800414a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004128:	4b1a      	ldr	r3, [pc, #104]	; (8004194 <UART_SetConfig+0x5c0>)
 800412a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800412c:	e00d      	b.n	800414a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800412e:	f7fd fdb7 	bl	8001ca0 <HAL_RCC_GetSysClockFreq>
 8004132:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004134:	e009      	b.n	800414a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004136:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800413a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800413c:	e005      	b.n	800414a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800413e:	2300      	movs	r3, #0
 8004140:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004148:	bf00      	nop
    }

    if (pclk != 0U)
 800414a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414c:	2b00      	cmp	r3, #0
 800414e:	d028      	beq.n	80041a2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004154:	4a10      	ldr	r2, [pc, #64]	; (8004198 <UART_SetConfig+0x5c4>)
 8004156:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800415a:	461a      	mov	r2, r3
 800415c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415e:	fbb3 f2f2 	udiv	r2, r3, r2
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	085b      	lsrs	r3, r3, #1
 8004168:	441a      	add	r2, r3
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004172:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004174:	6a3b      	ldr	r3, [r7, #32]
 8004176:	2b0f      	cmp	r3, #15
 8004178:	d910      	bls.n	800419c <UART_SetConfig+0x5c8>
 800417a:	6a3b      	ldr	r3, [r7, #32]
 800417c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004180:	d20c      	bcs.n	800419c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004182:	6a3b      	ldr	r3, [r7, #32]
 8004184:	b29a      	uxth	r2, r3
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	60da      	str	r2, [r3, #12]
 800418c:	e009      	b.n	80041a2 <UART_SetConfig+0x5ce>
 800418e:	bf00      	nop
 8004190:	40008000 	.word	0x40008000
 8004194:	00f42400 	.word	0x00f42400
 8004198:	080050d4 	.word	0x080050d4
      }
      else
      {
        ret = HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	2201      	movs	r2, #1
 80041a6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	2201      	movs	r2, #1
 80041ae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	2200      	movs	r2, #0
 80041b6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	2200      	movs	r2, #0
 80041bc:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80041be:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3730      	adds	r7, #48	; 0x30
 80041c6:	46bd      	mov	sp, r7
 80041c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080041cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d8:	f003 0301 	and.w	r3, r3, #1
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d00a      	beq.n	80041f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	430a      	orrs	r2, r1
 80041f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041fa:	f003 0302 	and.w	r3, r3, #2
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d00a      	beq.n	8004218 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	430a      	orrs	r2, r1
 8004216:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800421c:	f003 0304 	and.w	r3, r3, #4
 8004220:	2b00      	cmp	r3, #0
 8004222:	d00a      	beq.n	800423a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	430a      	orrs	r2, r1
 8004238:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800423e:	f003 0308 	and.w	r3, r3, #8
 8004242:	2b00      	cmp	r3, #0
 8004244:	d00a      	beq.n	800425c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	430a      	orrs	r2, r1
 800425a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004260:	f003 0310 	and.w	r3, r3, #16
 8004264:	2b00      	cmp	r3, #0
 8004266:	d00a      	beq.n	800427e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	430a      	orrs	r2, r1
 800427c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004282:	f003 0320 	and.w	r3, r3, #32
 8004286:	2b00      	cmp	r3, #0
 8004288:	d00a      	beq.n	80042a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	430a      	orrs	r2, r1
 800429e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d01a      	beq.n	80042e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	430a      	orrs	r2, r1
 80042c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042ca:	d10a      	bne.n	80042e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	430a      	orrs	r2, r1
 80042e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d00a      	beq.n	8004304 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	430a      	orrs	r2, r1
 8004302:	605a      	str	r2, [r3, #4]
  }
}
 8004304:	bf00      	nop
 8004306:	370c      	adds	r7, #12
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr

08004310 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b086      	sub	sp, #24
 8004314:	af02      	add	r7, sp, #8
 8004316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2200      	movs	r2, #0
 800431c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004320:	f7fc fcf4 	bl	8000d0c <HAL_GetTick>
 8004324:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0308 	and.w	r3, r3, #8
 8004330:	2b08      	cmp	r3, #8
 8004332:	d10e      	bne.n	8004352 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004334:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004338:	9300      	str	r3, [sp, #0]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2200      	movs	r2, #0
 800433e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f000 f82f 	bl	80043a6 <UART_WaitOnFlagUntilTimeout>
 8004348:	4603      	mov	r3, r0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d001      	beq.n	8004352 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	e025      	b.n	800439e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0304 	and.w	r3, r3, #4
 800435c:	2b04      	cmp	r3, #4
 800435e:	d10e      	bne.n	800437e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004360:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004364:	9300      	str	r3, [sp, #0]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2200      	movs	r2, #0
 800436a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f000 f819 	bl	80043a6 <UART_WaitOnFlagUntilTimeout>
 8004374:	4603      	mov	r3, r0
 8004376:	2b00      	cmp	r3, #0
 8004378:	d001      	beq.n	800437e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800437a:	2303      	movs	r3, #3
 800437c:	e00f      	b.n	800439e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2220      	movs	r2, #32
 8004382:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2220      	movs	r2, #32
 800438a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2200      	movs	r2, #0
 8004398:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800439c:	2300      	movs	r3, #0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3710      	adds	r7, #16
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}

080043a6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80043a6:	b580      	push	{r7, lr}
 80043a8:	b09c      	sub	sp, #112	; 0x70
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	60f8      	str	r0, [r7, #12]
 80043ae:	60b9      	str	r1, [r7, #8]
 80043b0:	603b      	str	r3, [r7, #0]
 80043b2:	4613      	mov	r3, r2
 80043b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043b6:	e0a9      	b.n	800450c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80043ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043be:	f000 80a5 	beq.w	800450c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043c2:	f7fc fca3 	bl	8000d0c <HAL_GetTick>
 80043c6:	4602      	mov	r2, r0
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d302      	bcc.n	80043d8 <UART_WaitOnFlagUntilTimeout+0x32>
 80043d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d140      	bne.n	800445a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043e0:	e853 3f00 	ldrex	r3, [r3]
 80043e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80043e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043e8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80043ec:	667b      	str	r3, [r7, #100]	; 0x64
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	461a      	mov	r2, r3
 80043f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80043f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80043f8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043fa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80043fc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80043fe:	e841 2300 	strex	r3, r2, [r1]
 8004402:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004404:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004406:	2b00      	cmp	r3, #0
 8004408:	d1e6      	bne.n	80043d8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	3308      	adds	r3, #8
 8004410:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004412:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004414:	e853 3f00 	ldrex	r3, [r3]
 8004418:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800441a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800441c:	f023 0301 	bic.w	r3, r3, #1
 8004420:	663b      	str	r3, [r7, #96]	; 0x60
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	3308      	adds	r3, #8
 8004428:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800442a:	64ba      	str	r2, [r7, #72]	; 0x48
 800442c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800442e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004430:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004432:	e841 2300 	strex	r3, r2, [r1]
 8004436:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004438:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800443a:	2b00      	cmp	r3, #0
 800443c:	d1e5      	bne.n	800440a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2220      	movs	r2, #32
 8004442:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2220      	movs	r2, #32
 800444a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2200      	movs	r2, #0
 8004452:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004456:	2303      	movs	r3, #3
 8004458:	e069      	b.n	800452e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0304 	and.w	r3, r3, #4
 8004464:	2b00      	cmp	r3, #0
 8004466:	d051      	beq.n	800450c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	69db      	ldr	r3, [r3, #28]
 800446e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004472:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004476:	d149      	bne.n	800450c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004480:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800448a:	e853 3f00 	ldrex	r3, [r3]
 800448e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004492:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004496:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	461a      	mov	r2, r3
 800449e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044a0:	637b      	str	r3, [r7, #52]	; 0x34
 80044a2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80044a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80044a8:	e841 2300 	strex	r3, r2, [r1]
 80044ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80044ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d1e6      	bne.n	8004482 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	3308      	adds	r3, #8
 80044ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	e853 3f00 	ldrex	r3, [r3]
 80044c2:	613b      	str	r3, [r7, #16]
   return(result);
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	f023 0301 	bic.w	r3, r3, #1
 80044ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	3308      	adds	r3, #8
 80044d2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80044d4:	623a      	str	r2, [r7, #32]
 80044d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d8:	69f9      	ldr	r1, [r7, #28]
 80044da:	6a3a      	ldr	r2, [r7, #32]
 80044dc:	e841 2300 	strex	r3, r2, [r1]
 80044e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80044e2:	69bb      	ldr	r3, [r7, #24]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d1e5      	bne.n	80044b4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2220      	movs	r2, #32
 80044ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2220      	movs	r2, #32
 80044f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2220      	movs	r2, #32
 80044fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2200      	movs	r2, #0
 8004504:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004508:	2303      	movs	r3, #3
 800450a:	e010      	b.n	800452e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	69da      	ldr	r2, [r3, #28]
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	4013      	ands	r3, r2
 8004516:	68ba      	ldr	r2, [r7, #8]
 8004518:	429a      	cmp	r2, r3
 800451a:	bf0c      	ite	eq
 800451c:	2301      	moveq	r3, #1
 800451e:	2300      	movne	r3, #0
 8004520:	b2db      	uxtb	r3, r3
 8004522:	461a      	mov	r2, r3
 8004524:	79fb      	ldrb	r3, [r7, #7]
 8004526:	429a      	cmp	r2, r3
 8004528:	f43f af46 	beq.w	80043b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800452c:	2300      	movs	r3, #0
}
 800452e:	4618      	mov	r0, r3
 8004530:	3770      	adds	r7, #112	; 0x70
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}

08004536 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004536:	b480      	push	{r7}
 8004538:	b085      	sub	sp, #20
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004544:	2b01      	cmp	r3, #1
 8004546:	d101      	bne.n	800454c <HAL_UARTEx_DisableFifoMode+0x16>
 8004548:	2302      	movs	r3, #2
 800454a:	e027      	b.n	800459c <HAL_UARTEx_DisableFifoMode+0x66>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2201      	movs	r2, #1
 8004550:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2224      	movs	r2, #36	; 0x24
 8004558:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f022 0201 	bic.w	r2, r2, #1
 8004572:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800457a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2200      	movs	r2, #0
 8004580:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	68fa      	ldr	r2, [r7, #12]
 8004588:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2220      	movs	r2, #32
 800458e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800459a:	2300      	movs	r3, #0
}
 800459c:	4618      	mov	r0, r3
 800459e:	3714      	adds	r7, #20
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr

080045a8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b084      	sub	sp, #16
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d101      	bne.n	80045c0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80045bc:	2302      	movs	r3, #2
 80045be:	e02d      	b.n	800461c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2224      	movs	r2, #36	; 0x24
 80045cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f022 0201 	bic.w	r2, r2, #1
 80045e6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	683a      	ldr	r2, [r7, #0]
 80045f8:	430a      	orrs	r2, r1
 80045fa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f000 f84f 	bl	80046a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	68fa      	ldr	r2, [r7, #12]
 8004608:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2220      	movs	r2, #32
 800460e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800461a:	2300      	movs	r3, #0
}
 800461c:	4618      	mov	r0, r3
 800461e:	3710      	adds	r7, #16
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}

08004624 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b084      	sub	sp, #16
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004634:	2b01      	cmp	r3, #1
 8004636:	d101      	bne.n	800463c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004638:	2302      	movs	r3, #2
 800463a:	e02d      	b.n	8004698 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2224      	movs	r2, #36	; 0x24
 8004648:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f022 0201 	bic.w	r2, r2, #1
 8004662:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	683a      	ldr	r2, [r7, #0]
 8004674:	430a      	orrs	r2, r1
 8004676:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f000 f811 	bl	80046a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	68fa      	ldr	r2, [r7, #12]
 8004684:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2220      	movs	r2, #32
 800468a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2200      	movs	r2, #0
 8004692:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004696:	2300      	movs	r3, #0
}
 8004698:	4618      	mov	r0, r3
 800469a:	3710      	adds	r7, #16
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}

080046a0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b085      	sub	sp, #20
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d108      	bne.n	80046c2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2201      	movs	r2, #1
 80046b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80046c0:	e031      	b.n	8004726 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80046c2:	2308      	movs	r3, #8
 80046c4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80046c6:	2308      	movs	r3, #8
 80046c8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	0e5b      	lsrs	r3, r3, #25
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	f003 0307 	and.w	r3, r3, #7
 80046d8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	0f5b      	lsrs	r3, r3, #29
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	f003 0307 	and.w	r3, r3, #7
 80046e8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80046ea:	7bbb      	ldrb	r3, [r7, #14]
 80046ec:	7b3a      	ldrb	r2, [r7, #12]
 80046ee:	4911      	ldr	r1, [pc, #68]	; (8004734 <UARTEx_SetNbDataToProcess+0x94>)
 80046f0:	5c8a      	ldrb	r2, [r1, r2]
 80046f2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80046f6:	7b3a      	ldrb	r2, [r7, #12]
 80046f8:	490f      	ldr	r1, [pc, #60]	; (8004738 <UARTEx_SetNbDataToProcess+0x98>)
 80046fa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80046fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8004700:	b29a      	uxth	r2, r3
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004708:	7bfb      	ldrb	r3, [r7, #15]
 800470a:	7b7a      	ldrb	r2, [r7, #13]
 800470c:	4909      	ldr	r1, [pc, #36]	; (8004734 <UARTEx_SetNbDataToProcess+0x94>)
 800470e:	5c8a      	ldrb	r2, [r1, r2]
 8004710:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004714:	7b7a      	ldrb	r2, [r7, #13]
 8004716:	4908      	ldr	r1, [pc, #32]	; (8004738 <UARTEx_SetNbDataToProcess+0x98>)
 8004718:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800471a:	fb93 f3f2 	sdiv	r3, r3, r2
 800471e:	b29a      	uxth	r2, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004726:	bf00      	nop
 8004728:	3714      	adds	r7, #20
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr
 8004732:	bf00      	nop
 8004734:	080050ec 	.word	0x080050ec
 8004738:	080050f4 	.word	0x080050f4

0800473c <siprintf>:
 800473c:	b40e      	push	{r1, r2, r3}
 800473e:	b500      	push	{lr}
 8004740:	b09c      	sub	sp, #112	; 0x70
 8004742:	ab1d      	add	r3, sp, #116	; 0x74
 8004744:	9002      	str	r0, [sp, #8]
 8004746:	9006      	str	r0, [sp, #24]
 8004748:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800474c:	4809      	ldr	r0, [pc, #36]	; (8004774 <siprintf+0x38>)
 800474e:	9107      	str	r1, [sp, #28]
 8004750:	9104      	str	r1, [sp, #16]
 8004752:	4909      	ldr	r1, [pc, #36]	; (8004778 <siprintf+0x3c>)
 8004754:	f853 2b04 	ldr.w	r2, [r3], #4
 8004758:	9105      	str	r1, [sp, #20]
 800475a:	6800      	ldr	r0, [r0, #0]
 800475c:	9301      	str	r3, [sp, #4]
 800475e:	a902      	add	r1, sp, #8
 8004760:	f000 f89a 	bl	8004898 <_svfiprintf_r>
 8004764:	9b02      	ldr	r3, [sp, #8]
 8004766:	2200      	movs	r2, #0
 8004768:	701a      	strb	r2, [r3, #0]
 800476a:	b01c      	add	sp, #112	; 0x70
 800476c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004770:	b003      	add	sp, #12
 8004772:	4770      	bx	lr
 8004774:	20000058 	.word	0x20000058
 8004778:	ffff0208 	.word	0xffff0208

0800477c <memset>:
 800477c:	4402      	add	r2, r0
 800477e:	4603      	mov	r3, r0
 8004780:	4293      	cmp	r3, r2
 8004782:	d100      	bne.n	8004786 <memset+0xa>
 8004784:	4770      	bx	lr
 8004786:	f803 1b01 	strb.w	r1, [r3], #1
 800478a:	e7f9      	b.n	8004780 <memset+0x4>

0800478c <__errno>:
 800478c:	4b01      	ldr	r3, [pc, #4]	; (8004794 <__errno+0x8>)
 800478e:	6818      	ldr	r0, [r3, #0]
 8004790:	4770      	bx	lr
 8004792:	bf00      	nop
 8004794:	20000058 	.word	0x20000058

08004798 <__libc_init_array>:
 8004798:	b570      	push	{r4, r5, r6, lr}
 800479a:	4d0d      	ldr	r5, [pc, #52]	; (80047d0 <__libc_init_array+0x38>)
 800479c:	4c0d      	ldr	r4, [pc, #52]	; (80047d4 <__libc_init_array+0x3c>)
 800479e:	1b64      	subs	r4, r4, r5
 80047a0:	10a4      	asrs	r4, r4, #2
 80047a2:	2600      	movs	r6, #0
 80047a4:	42a6      	cmp	r6, r4
 80047a6:	d109      	bne.n	80047bc <__libc_init_array+0x24>
 80047a8:	4d0b      	ldr	r5, [pc, #44]	; (80047d8 <__libc_init_array+0x40>)
 80047aa:	4c0c      	ldr	r4, [pc, #48]	; (80047dc <__libc_init_array+0x44>)
 80047ac:	f000 fc6a 	bl	8005084 <_init>
 80047b0:	1b64      	subs	r4, r4, r5
 80047b2:	10a4      	asrs	r4, r4, #2
 80047b4:	2600      	movs	r6, #0
 80047b6:	42a6      	cmp	r6, r4
 80047b8:	d105      	bne.n	80047c6 <__libc_init_array+0x2e>
 80047ba:	bd70      	pop	{r4, r5, r6, pc}
 80047bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80047c0:	4798      	blx	r3
 80047c2:	3601      	adds	r6, #1
 80047c4:	e7ee      	b.n	80047a4 <__libc_init_array+0xc>
 80047c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80047ca:	4798      	blx	r3
 80047cc:	3601      	adds	r6, #1
 80047ce:	e7f2      	b.n	80047b6 <__libc_init_array+0x1e>
 80047d0:	08005138 	.word	0x08005138
 80047d4:	08005138 	.word	0x08005138
 80047d8:	08005138 	.word	0x08005138
 80047dc:	0800513c 	.word	0x0800513c

080047e0 <__retarget_lock_acquire_recursive>:
 80047e0:	4770      	bx	lr

080047e2 <__retarget_lock_release_recursive>:
 80047e2:	4770      	bx	lr

080047e4 <__ssputs_r>:
 80047e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047e8:	688e      	ldr	r6, [r1, #8]
 80047ea:	461f      	mov	r7, r3
 80047ec:	42be      	cmp	r6, r7
 80047ee:	680b      	ldr	r3, [r1, #0]
 80047f0:	4682      	mov	sl, r0
 80047f2:	460c      	mov	r4, r1
 80047f4:	4690      	mov	r8, r2
 80047f6:	d82c      	bhi.n	8004852 <__ssputs_r+0x6e>
 80047f8:	898a      	ldrh	r2, [r1, #12]
 80047fa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80047fe:	d026      	beq.n	800484e <__ssputs_r+0x6a>
 8004800:	6965      	ldr	r5, [r4, #20]
 8004802:	6909      	ldr	r1, [r1, #16]
 8004804:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004808:	eba3 0901 	sub.w	r9, r3, r1
 800480c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004810:	1c7b      	adds	r3, r7, #1
 8004812:	444b      	add	r3, r9
 8004814:	106d      	asrs	r5, r5, #1
 8004816:	429d      	cmp	r5, r3
 8004818:	bf38      	it	cc
 800481a:	461d      	movcc	r5, r3
 800481c:	0553      	lsls	r3, r2, #21
 800481e:	d527      	bpl.n	8004870 <__ssputs_r+0x8c>
 8004820:	4629      	mov	r1, r5
 8004822:	f000 f957 	bl	8004ad4 <_malloc_r>
 8004826:	4606      	mov	r6, r0
 8004828:	b360      	cbz	r0, 8004884 <__ssputs_r+0xa0>
 800482a:	6921      	ldr	r1, [r4, #16]
 800482c:	464a      	mov	r2, r9
 800482e:	f000 fbc7 	bl	8004fc0 <memcpy>
 8004832:	89a3      	ldrh	r3, [r4, #12]
 8004834:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004838:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800483c:	81a3      	strh	r3, [r4, #12]
 800483e:	6126      	str	r6, [r4, #16]
 8004840:	6165      	str	r5, [r4, #20]
 8004842:	444e      	add	r6, r9
 8004844:	eba5 0509 	sub.w	r5, r5, r9
 8004848:	6026      	str	r6, [r4, #0]
 800484a:	60a5      	str	r5, [r4, #8]
 800484c:	463e      	mov	r6, r7
 800484e:	42be      	cmp	r6, r7
 8004850:	d900      	bls.n	8004854 <__ssputs_r+0x70>
 8004852:	463e      	mov	r6, r7
 8004854:	6820      	ldr	r0, [r4, #0]
 8004856:	4632      	mov	r2, r6
 8004858:	4641      	mov	r1, r8
 800485a:	f000 fb86 	bl	8004f6a <memmove>
 800485e:	68a3      	ldr	r3, [r4, #8]
 8004860:	1b9b      	subs	r3, r3, r6
 8004862:	60a3      	str	r3, [r4, #8]
 8004864:	6823      	ldr	r3, [r4, #0]
 8004866:	4433      	add	r3, r6
 8004868:	6023      	str	r3, [r4, #0]
 800486a:	2000      	movs	r0, #0
 800486c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004870:	462a      	mov	r2, r5
 8004872:	f000 fb4b 	bl	8004f0c <_realloc_r>
 8004876:	4606      	mov	r6, r0
 8004878:	2800      	cmp	r0, #0
 800487a:	d1e0      	bne.n	800483e <__ssputs_r+0x5a>
 800487c:	6921      	ldr	r1, [r4, #16]
 800487e:	4650      	mov	r0, sl
 8004880:	f000 fbac 	bl	8004fdc <_free_r>
 8004884:	230c      	movs	r3, #12
 8004886:	f8ca 3000 	str.w	r3, [sl]
 800488a:	89a3      	ldrh	r3, [r4, #12]
 800488c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004890:	81a3      	strh	r3, [r4, #12]
 8004892:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004896:	e7e9      	b.n	800486c <__ssputs_r+0x88>

08004898 <_svfiprintf_r>:
 8004898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800489c:	4698      	mov	r8, r3
 800489e:	898b      	ldrh	r3, [r1, #12]
 80048a0:	061b      	lsls	r3, r3, #24
 80048a2:	b09d      	sub	sp, #116	; 0x74
 80048a4:	4607      	mov	r7, r0
 80048a6:	460d      	mov	r5, r1
 80048a8:	4614      	mov	r4, r2
 80048aa:	d50e      	bpl.n	80048ca <_svfiprintf_r+0x32>
 80048ac:	690b      	ldr	r3, [r1, #16]
 80048ae:	b963      	cbnz	r3, 80048ca <_svfiprintf_r+0x32>
 80048b0:	2140      	movs	r1, #64	; 0x40
 80048b2:	f000 f90f 	bl	8004ad4 <_malloc_r>
 80048b6:	6028      	str	r0, [r5, #0]
 80048b8:	6128      	str	r0, [r5, #16]
 80048ba:	b920      	cbnz	r0, 80048c6 <_svfiprintf_r+0x2e>
 80048bc:	230c      	movs	r3, #12
 80048be:	603b      	str	r3, [r7, #0]
 80048c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80048c4:	e0d0      	b.n	8004a68 <_svfiprintf_r+0x1d0>
 80048c6:	2340      	movs	r3, #64	; 0x40
 80048c8:	616b      	str	r3, [r5, #20]
 80048ca:	2300      	movs	r3, #0
 80048cc:	9309      	str	r3, [sp, #36]	; 0x24
 80048ce:	2320      	movs	r3, #32
 80048d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80048d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80048d8:	2330      	movs	r3, #48	; 0x30
 80048da:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004a80 <_svfiprintf_r+0x1e8>
 80048de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80048e2:	f04f 0901 	mov.w	r9, #1
 80048e6:	4623      	mov	r3, r4
 80048e8:	469a      	mov	sl, r3
 80048ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80048ee:	b10a      	cbz	r2, 80048f4 <_svfiprintf_r+0x5c>
 80048f0:	2a25      	cmp	r2, #37	; 0x25
 80048f2:	d1f9      	bne.n	80048e8 <_svfiprintf_r+0x50>
 80048f4:	ebba 0b04 	subs.w	fp, sl, r4
 80048f8:	d00b      	beq.n	8004912 <_svfiprintf_r+0x7a>
 80048fa:	465b      	mov	r3, fp
 80048fc:	4622      	mov	r2, r4
 80048fe:	4629      	mov	r1, r5
 8004900:	4638      	mov	r0, r7
 8004902:	f7ff ff6f 	bl	80047e4 <__ssputs_r>
 8004906:	3001      	adds	r0, #1
 8004908:	f000 80a9 	beq.w	8004a5e <_svfiprintf_r+0x1c6>
 800490c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800490e:	445a      	add	r2, fp
 8004910:	9209      	str	r2, [sp, #36]	; 0x24
 8004912:	f89a 3000 	ldrb.w	r3, [sl]
 8004916:	2b00      	cmp	r3, #0
 8004918:	f000 80a1 	beq.w	8004a5e <_svfiprintf_r+0x1c6>
 800491c:	2300      	movs	r3, #0
 800491e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004922:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004926:	f10a 0a01 	add.w	sl, sl, #1
 800492a:	9304      	str	r3, [sp, #16]
 800492c:	9307      	str	r3, [sp, #28]
 800492e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004932:	931a      	str	r3, [sp, #104]	; 0x68
 8004934:	4654      	mov	r4, sl
 8004936:	2205      	movs	r2, #5
 8004938:	f814 1b01 	ldrb.w	r1, [r4], #1
 800493c:	4850      	ldr	r0, [pc, #320]	; (8004a80 <_svfiprintf_r+0x1e8>)
 800493e:	f7fb fc6f 	bl	8000220 <memchr>
 8004942:	9a04      	ldr	r2, [sp, #16]
 8004944:	b9d8      	cbnz	r0, 800497e <_svfiprintf_r+0xe6>
 8004946:	06d0      	lsls	r0, r2, #27
 8004948:	bf44      	itt	mi
 800494a:	2320      	movmi	r3, #32
 800494c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004950:	0711      	lsls	r1, r2, #28
 8004952:	bf44      	itt	mi
 8004954:	232b      	movmi	r3, #43	; 0x2b
 8004956:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800495a:	f89a 3000 	ldrb.w	r3, [sl]
 800495e:	2b2a      	cmp	r3, #42	; 0x2a
 8004960:	d015      	beq.n	800498e <_svfiprintf_r+0xf6>
 8004962:	9a07      	ldr	r2, [sp, #28]
 8004964:	4654      	mov	r4, sl
 8004966:	2000      	movs	r0, #0
 8004968:	f04f 0c0a 	mov.w	ip, #10
 800496c:	4621      	mov	r1, r4
 800496e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004972:	3b30      	subs	r3, #48	; 0x30
 8004974:	2b09      	cmp	r3, #9
 8004976:	d94d      	bls.n	8004a14 <_svfiprintf_r+0x17c>
 8004978:	b1b0      	cbz	r0, 80049a8 <_svfiprintf_r+0x110>
 800497a:	9207      	str	r2, [sp, #28]
 800497c:	e014      	b.n	80049a8 <_svfiprintf_r+0x110>
 800497e:	eba0 0308 	sub.w	r3, r0, r8
 8004982:	fa09 f303 	lsl.w	r3, r9, r3
 8004986:	4313      	orrs	r3, r2
 8004988:	9304      	str	r3, [sp, #16]
 800498a:	46a2      	mov	sl, r4
 800498c:	e7d2      	b.n	8004934 <_svfiprintf_r+0x9c>
 800498e:	9b03      	ldr	r3, [sp, #12]
 8004990:	1d19      	adds	r1, r3, #4
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	9103      	str	r1, [sp, #12]
 8004996:	2b00      	cmp	r3, #0
 8004998:	bfbb      	ittet	lt
 800499a:	425b      	neglt	r3, r3
 800499c:	f042 0202 	orrlt.w	r2, r2, #2
 80049a0:	9307      	strge	r3, [sp, #28]
 80049a2:	9307      	strlt	r3, [sp, #28]
 80049a4:	bfb8      	it	lt
 80049a6:	9204      	strlt	r2, [sp, #16]
 80049a8:	7823      	ldrb	r3, [r4, #0]
 80049aa:	2b2e      	cmp	r3, #46	; 0x2e
 80049ac:	d10c      	bne.n	80049c8 <_svfiprintf_r+0x130>
 80049ae:	7863      	ldrb	r3, [r4, #1]
 80049b0:	2b2a      	cmp	r3, #42	; 0x2a
 80049b2:	d134      	bne.n	8004a1e <_svfiprintf_r+0x186>
 80049b4:	9b03      	ldr	r3, [sp, #12]
 80049b6:	1d1a      	adds	r2, r3, #4
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	9203      	str	r2, [sp, #12]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	bfb8      	it	lt
 80049c0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80049c4:	3402      	adds	r4, #2
 80049c6:	9305      	str	r3, [sp, #20]
 80049c8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004a90 <_svfiprintf_r+0x1f8>
 80049cc:	7821      	ldrb	r1, [r4, #0]
 80049ce:	2203      	movs	r2, #3
 80049d0:	4650      	mov	r0, sl
 80049d2:	f7fb fc25 	bl	8000220 <memchr>
 80049d6:	b138      	cbz	r0, 80049e8 <_svfiprintf_r+0x150>
 80049d8:	9b04      	ldr	r3, [sp, #16]
 80049da:	eba0 000a 	sub.w	r0, r0, sl
 80049de:	2240      	movs	r2, #64	; 0x40
 80049e0:	4082      	lsls	r2, r0
 80049e2:	4313      	orrs	r3, r2
 80049e4:	3401      	adds	r4, #1
 80049e6:	9304      	str	r3, [sp, #16]
 80049e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049ec:	4825      	ldr	r0, [pc, #148]	; (8004a84 <_svfiprintf_r+0x1ec>)
 80049ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80049f2:	2206      	movs	r2, #6
 80049f4:	f7fb fc14 	bl	8000220 <memchr>
 80049f8:	2800      	cmp	r0, #0
 80049fa:	d038      	beq.n	8004a6e <_svfiprintf_r+0x1d6>
 80049fc:	4b22      	ldr	r3, [pc, #136]	; (8004a88 <_svfiprintf_r+0x1f0>)
 80049fe:	bb1b      	cbnz	r3, 8004a48 <_svfiprintf_r+0x1b0>
 8004a00:	9b03      	ldr	r3, [sp, #12]
 8004a02:	3307      	adds	r3, #7
 8004a04:	f023 0307 	bic.w	r3, r3, #7
 8004a08:	3308      	adds	r3, #8
 8004a0a:	9303      	str	r3, [sp, #12]
 8004a0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a0e:	4433      	add	r3, r6
 8004a10:	9309      	str	r3, [sp, #36]	; 0x24
 8004a12:	e768      	b.n	80048e6 <_svfiprintf_r+0x4e>
 8004a14:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a18:	460c      	mov	r4, r1
 8004a1a:	2001      	movs	r0, #1
 8004a1c:	e7a6      	b.n	800496c <_svfiprintf_r+0xd4>
 8004a1e:	2300      	movs	r3, #0
 8004a20:	3401      	adds	r4, #1
 8004a22:	9305      	str	r3, [sp, #20]
 8004a24:	4619      	mov	r1, r3
 8004a26:	f04f 0c0a 	mov.w	ip, #10
 8004a2a:	4620      	mov	r0, r4
 8004a2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a30:	3a30      	subs	r2, #48	; 0x30
 8004a32:	2a09      	cmp	r2, #9
 8004a34:	d903      	bls.n	8004a3e <_svfiprintf_r+0x1a6>
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d0c6      	beq.n	80049c8 <_svfiprintf_r+0x130>
 8004a3a:	9105      	str	r1, [sp, #20]
 8004a3c:	e7c4      	b.n	80049c8 <_svfiprintf_r+0x130>
 8004a3e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a42:	4604      	mov	r4, r0
 8004a44:	2301      	movs	r3, #1
 8004a46:	e7f0      	b.n	8004a2a <_svfiprintf_r+0x192>
 8004a48:	ab03      	add	r3, sp, #12
 8004a4a:	9300      	str	r3, [sp, #0]
 8004a4c:	462a      	mov	r2, r5
 8004a4e:	4b0f      	ldr	r3, [pc, #60]	; (8004a8c <_svfiprintf_r+0x1f4>)
 8004a50:	a904      	add	r1, sp, #16
 8004a52:	4638      	mov	r0, r7
 8004a54:	f3af 8000 	nop.w
 8004a58:	1c42      	adds	r2, r0, #1
 8004a5a:	4606      	mov	r6, r0
 8004a5c:	d1d6      	bne.n	8004a0c <_svfiprintf_r+0x174>
 8004a5e:	89ab      	ldrh	r3, [r5, #12]
 8004a60:	065b      	lsls	r3, r3, #25
 8004a62:	f53f af2d 	bmi.w	80048c0 <_svfiprintf_r+0x28>
 8004a66:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004a68:	b01d      	add	sp, #116	; 0x74
 8004a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a6e:	ab03      	add	r3, sp, #12
 8004a70:	9300      	str	r3, [sp, #0]
 8004a72:	462a      	mov	r2, r5
 8004a74:	4b05      	ldr	r3, [pc, #20]	; (8004a8c <_svfiprintf_r+0x1f4>)
 8004a76:	a904      	add	r1, sp, #16
 8004a78:	4638      	mov	r0, r7
 8004a7a:	f000 f919 	bl	8004cb0 <_printf_i>
 8004a7e:	e7eb      	b.n	8004a58 <_svfiprintf_r+0x1c0>
 8004a80:	080050fc 	.word	0x080050fc
 8004a84:	08005106 	.word	0x08005106
 8004a88:	00000000 	.word	0x00000000
 8004a8c:	080047e5 	.word	0x080047e5
 8004a90:	08005102 	.word	0x08005102

08004a94 <sbrk_aligned>:
 8004a94:	b570      	push	{r4, r5, r6, lr}
 8004a96:	4e0e      	ldr	r6, [pc, #56]	; (8004ad0 <sbrk_aligned+0x3c>)
 8004a98:	460c      	mov	r4, r1
 8004a9a:	6831      	ldr	r1, [r6, #0]
 8004a9c:	4605      	mov	r5, r0
 8004a9e:	b911      	cbnz	r1, 8004aa6 <sbrk_aligned+0x12>
 8004aa0:	f000 fa7e 	bl	8004fa0 <_sbrk_r>
 8004aa4:	6030      	str	r0, [r6, #0]
 8004aa6:	4621      	mov	r1, r4
 8004aa8:	4628      	mov	r0, r5
 8004aaa:	f000 fa79 	bl	8004fa0 <_sbrk_r>
 8004aae:	1c43      	adds	r3, r0, #1
 8004ab0:	d00a      	beq.n	8004ac8 <sbrk_aligned+0x34>
 8004ab2:	1cc4      	adds	r4, r0, #3
 8004ab4:	f024 0403 	bic.w	r4, r4, #3
 8004ab8:	42a0      	cmp	r0, r4
 8004aba:	d007      	beq.n	8004acc <sbrk_aligned+0x38>
 8004abc:	1a21      	subs	r1, r4, r0
 8004abe:	4628      	mov	r0, r5
 8004ac0:	f000 fa6e 	bl	8004fa0 <_sbrk_r>
 8004ac4:	3001      	adds	r0, #1
 8004ac6:	d101      	bne.n	8004acc <sbrk_aligned+0x38>
 8004ac8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004acc:	4620      	mov	r0, r4
 8004ace:	bd70      	pop	{r4, r5, r6, pc}
 8004ad0:	200002d4 	.word	0x200002d4

08004ad4 <_malloc_r>:
 8004ad4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ad8:	1ccd      	adds	r5, r1, #3
 8004ada:	f025 0503 	bic.w	r5, r5, #3
 8004ade:	3508      	adds	r5, #8
 8004ae0:	2d0c      	cmp	r5, #12
 8004ae2:	bf38      	it	cc
 8004ae4:	250c      	movcc	r5, #12
 8004ae6:	2d00      	cmp	r5, #0
 8004ae8:	4607      	mov	r7, r0
 8004aea:	db01      	blt.n	8004af0 <_malloc_r+0x1c>
 8004aec:	42a9      	cmp	r1, r5
 8004aee:	d905      	bls.n	8004afc <_malloc_r+0x28>
 8004af0:	230c      	movs	r3, #12
 8004af2:	603b      	str	r3, [r7, #0]
 8004af4:	2600      	movs	r6, #0
 8004af6:	4630      	mov	r0, r6
 8004af8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004afc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004bd0 <_malloc_r+0xfc>
 8004b00:	f000 f9f8 	bl	8004ef4 <__malloc_lock>
 8004b04:	f8d8 3000 	ldr.w	r3, [r8]
 8004b08:	461c      	mov	r4, r3
 8004b0a:	bb5c      	cbnz	r4, 8004b64 <_malloc_r+0x90>
 8004b0c:	4629      	mov	r1, r5
 8004b0e:	4638      	mov	r0, r7
 8004b10:	f7ff ffc0 	bl	8004a94 <sbrk_aligned>
 8004b14:	1c43      	adds	r3, r0, #1
 8004b16:	4604      	mov	r4, r0
 8004b18:	d155      	bne.n	8004bc6 <_malloc_r+0xf2>
 8004b1a:	f8d8 4000 	ldr.w	r4, [r8]
 8004b1e:	4626      	mov	r6, r4
 8004b20:	2e00      	cmp	r6, #0
 8004b22:	d145      	bne.n	8004bb0 <_malloc_r+0xdc>
 8004b24:	2c00      	cmp	r4, #0
 8004b26:	d048      	beq.n	8004bba <_malloc_r+0xe6>
 8004b28:	6823      	ldr	r3, [r4, #0]
 8004b2a:	4631      	mov	r1, r6
 8004b2c:	4638      	mov	r0, r7
 8004b2e:	eb04 0903 	add.w	r9, r4, r3
 8004b32:	f000 fa35 	bl	8004fa0 <_sbrk_r>
 8004b36:	4581      	cmp	r9, r0
 8004b38:	d13f      	bne.n	8004bba <_malloc_r+0xe6>
 8004b3a:	6821      	ldr	r1, [r4, #0]
 8004b3c:	1a6d      	subs	r5, r5, r1
 8004b3e:	4629      	mov	r1, r5
 8004b40:	4638      	mov	r0, r7
 8004b42:	f7ff ffa7 	bl	8004a94 <sbrk_aligned>
 8004b46:	3001      	adds	r0, #1
 8004b48:	d037      	beq.n	8004bba <_malloc_r+0xe6>
 8004b4a:	6823      	ldr	r3, [r4, #0]
 8004b4c:	442b      	add	r3, r5
 8004b4e:	6023      	str	r3, [r4, #0]
 8004b50:	f8d8 3000 	ldr.w	r3, [r8]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d038      	beq.n	8004bca <_malloc_r+0xf6>
 8004b58:	685a      	ldr	r2, [r3, #4]
 8004b5a:	42a2      	cmp	r2, r4
 8004b5c:	d12b      	bne.n	8004bb6 <_malloc_r+0xe2>
 8004b5e:	2200      	movs	r2, #0
 8004b60:	605a      	str	r2, [r3, #4]
 8004b62:	e00f      	b.n	8004b84 <_malloc_r+0xb0>
 8004b64:	6822      	ldr	r2, [r4, #0]
 8004b66:	1b52      	subs	r2, r2, r5
 8004b68:	d41f      	bmi.n	8004baa <_malloc_r+0xd6>
 8004b6a:	2a0b      	cmp	r2, #11
 8004b6c:	d917      	bls.n	8004b9e <_malloc_r+0xca>
 8004b6e:	1961      	adds	r1, r4, r5
 8004b70:	42a3      	cmp	r3, r4
 8004b72:	6025      	str	r5, [r4, #0]
 8004b74:	bf18      	it	ne
 8004b76:	6059      	strne	r1, [r3, #4]
 8004b78:	6863      	ldr	r3, [r4, #4]
 8004b7a:	bf08      	it	eq
 8004b7c:	f8c8 1000 	streq.w	r1, [r8]
 8004b80:	5162      	str	r2, [r4, r5]
 8004b82:	604b      	str	r3, [r1, #4]
 8004b84:	4638      	mov	r0, r7
 8004b86:	f104 060b 	add.w	r6, r4, #11
 8004b8a:	f000 f9b9 	bl	8004f00 <__malloc_unlock>
 8004b8e:	f026 0607 	bic.w	r6, r6, #7
 8004b92:	1d23      	adds	r3, r4, #4
 8004b94:	1af2      	subs	r2, r6, r3
 8004b96:	d0ae      	beq.n	8004af6 <_malloc_r+0x22>
 8004b98:	1b9b      	subs	r3, r3, r6
 8004b9a:	50a3      	str	r3, [r4, r2]
 8004b9c:	e7ab      	b.n	8004af6 <_malloc_r+0x22>
 8004b9e:	42a3      	cmp	r3, r4
 8004ba0:	6862      	ldr	r2, [r4, #4]
 8004ba2:	d1dd      	bne.n	8004b60 <_malloc_r+0x8c>
 8004ba4:	f8c8 2000 	str.w	r2, [r8]
 8004ba8:	e7ec      	b.n	8004b84 <_malloc_r+0xb0>
 8004baa:	4623      	mov	r3, r4
 8004bac:	6864      	ldr	r4, [r4, #4]
 8004bae:	e7ac      	b.n	8004b0a <_malloc_r+0x36>
 8004bb0:	4634      	mov	r4, r6
 8004bb2:	6876      	ldr	r6, [r6, #4]
 8004bb4:	e7b4      	b.n	8004b20 <_malloc_r+0x4c>
 8004bb6:	4613      	mov	r3, r2
 8004bb8:	e7cc      	b.n	8004b54 <_malloc_r+0x80>
 8004bba:	230c      	movs	r3, #12
 8004bbc:	603b      	str	r3, [r7, #0]
 8004bbe:	4638      	mov	r0, r7
 8004bc0:	f000 f99e 	bl	8004f00 <__malloc_unlock>
 8004bc4:	e797      	b.n	8004af6 <_malloc_r+0x22>
 8004bc6:	6025      	str	r5, [r4, #0]
 8004bc8:	e7dc      	b.n	8004b84 <_malloc_r+0xb0>
 8004bca:	605b      	str	r3, [r3, #4]
 8004bcc:	deff      	udf	#255	; 0xff
 8004bce:	bf00      	nop
 8004bd0:	200002d0 	.word	0x200002d0

08004bd4 <_printf_common>:
 8004bd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bd8:	4616      	mov	r6, r2
 8004bda:	4699      	mov	r9, r3
 8004bdc:	688a      	ldr	r2, [r1, #8]
 8004bde:	690b      	ldr	r3, [r1, #16]
 8004be0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004be4:	4293      	cmp	r3, r2
 8004be6:	bfb8      	it	lt
 8004be8:	4613      	movlt	r3, r2
 8004bea:	6033      	str	r3, [r6, #0]
 8004bec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004bf0:	4607      	mov	r7, r0
 8004bf2:	460c      	mov	r4, r1
 8004bf4:	b10a      	cbz	r2, 8004bfa <_printf_common+0x26>
 8004bf6:	3301      	adds	r3, #1
 8004bf8:	6033      	str	r3, [r6, #0]
 8004bfa:	6823      	ldr	r3, [r4, #0]
 8004bfc:	0699      	lsls	r1, r3, #26
 8004bfe:	bf42      	ittt	mi
 8004c00:	6833      	ldrmi	r3, [r6, #0]
 8004c02:	3302      	addmi	r3, #2
 8004c04:	6033      	strmi	r3, [r6, #0]
 8004c06:	6825      	ldr	r5, [r4, #0]
 8004c08:	f015 0506 	ands.w	r5, r5, #6
 8004c0c:	d106      	bne.n	8004c1c <_printf_common+0x48>
 8004c0e:	f104 0a19 	add.w	sl, r4, #25
 8004c12:	68e3      	ldr	r3, [r4, #12]
 8004c14:	6832      	ldr	r2, [r6, #0]
 8004c16:	1a9b      	subs	r3, r3, r2
 8004c18:	42ab      	cmp	r3, r5
 8004c1a:	dc26      	bgt.n	8004c6a <_printf_common+0x96>
 8004c1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004c20:	1e13      	subs	r3, r2, #0
 8004c22:	6822      	ldr	r2, [r4, #0]
 8004c24:	bf18      	it	ne
 8004c26:	2301      	movne	r3, #1
 8004c28:	0692      	lsls	r2, r2, #26
 8004c2a:	d42b      	bmi.n	8004c84 <_printf_common+0xb0>
 8004c2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c30:	4649      	mov	r1, r9
 8004c32:	4638      	mov	r0, r7
 8004c34:	47c0      	blx	r8
 8004c36:	3001      	adds	r0, #1
 8004c38:	d01e      	beq.n	8004c78 <_printf_common+0xa4>
 8004c3a:	6823      	ldr	r3, [r4, #0]
 8004c3c:	6922      	ldr	r2, [r4, #16]
 8004c3e:	f003 0306 	and.w	r3, r3, #6
 8004c42:	2b04      	cmp	r3, #4
 8004c44:	bf02      	ittt	eq
 8004c46:	68e5      	ldreq	r5, [r4, #12]
 8004c48:	6833      	ldreq	r3, [r6, #0]
 8004c4a:	1aed      	subeq	r5, r5, r3
 8004c4c:	68a3      	ldr	r3, [r4, #8]
 8004c4e:	bf0c      	ite	eq
 8004c50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c54:	2500      	movne	r5, #0
 8004c56:	4293      	cmp	r3, r2
 8004c58:	bfc4      	itt	gt
 8004c5a:	1a9b      	subgt	r3, r3, r2
 8004c5c:	18ed      	addgt	r5, r5, r3
 8004c5e:	2600      	movs	r6, #0
 8004c60:	341a      	adds	r4, #26
 8004c62:	42b5      	cmp	r5, r6
 8004c64:	d11a      	bne.n	8004c9c <_printf_common+0xc8>
 8004c66:	2000      	movs	r0, #0
 8004c68:	e008      	b.n	8004c7c <_printf_common+0xa8>
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	4652      	mov	r2, sl
 8004c6e:	4649      	mov	r1, r9
 8004c70:	4638      	mov	r0, r7
 8004c72:	47c0      	blx	r8
 8004c74:	3001      	adds	r0, #1
 8004c76:	d103      	bne.n	8004c80 <_printf_common+0xac>
 8004c78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004c7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c80:	3501      	adds	r5, #1
 8004c82:	e7c6      	b.n	8004c12 <_printf_common+0x3e>
 8004c84:	18e1      	adds	r1, r4, r3
 8004c86:	1c5a      	adds	r2, r3, #1
 8004c88:	2030      	movs	r0, #48	; 0x30
 8004c8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004c8e:	4422      	add	r2, r4
 8004c90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004c94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004c98:	3302      	adds	r3, #2
 8004c9a:	e7c7      	b.n	8004c2c <_printf_common+0x58>
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	4622      	mov	r2, r4
 8004ca0:	4649      	mov	r1, r9
 8004ca2:	4638      	mov	r0, r7
 8004ca4:	47c0      	blx	r8
 8004ca6:	3001      	adds	r0, #1
 8004ca8:	d0e6      	beq.n	8004c78 <_printf_common+0xa4>
 8004caa:	3601      	adds	r6, #1
 8004cac:	e7d9      	b.n	8004c62 <_printf_common+0x8e>
	...

08004cb0 <_printf_i>:
 8004cb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004cb4:	7e0f      	ldrb	r7, [r1, #24]
 8004cb6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004cb8:	2f78      	cmp	r7, #120	; 0x78
 8004cba:	4691      	mov	r9, r2
 8004cbc:	4680      	mov	r8, r0
 8004cbe:	460c      	mov	r4, r1
 8004cc0:	469a      	mov	sl, r3
 8004cc2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004cc6:	d807      	bhi.n	8004cd8 <_printf_i+0x28>
 8004cc8:	2f62      	cmp	r7, #98	; 0x62
 8004cca:	d80a      	bhi.n	8004ce2 <_printf_i+0x32>
 8004ccc:	2f00      	cmp	r7, #0
 8004cce:	f000 80d4 	beq.w	8004e7a <_printf_i+0x1ca>
 8004cd2:	2f58      	cmp	r7, #88	; 0x58
 8004cd4:	f000 80c0 	beq.w	8004e58 <_printf_i+0x1a8>
 8004cd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004cdc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004ce0:	e03a      	b.n	8004d58 <_printf_i+0xa8>
 8004ce2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004ce6:	2b15      	cmp	r3, #21
 8004ce8:	d8f6      	bhi.n	8004cd8 <_printf_i+0x28>
 8004cea:	a101      	add	r1, pc, #4	; (adr r1, 8004cf0 <_printf_i+0x40>)
 8004cec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004cf0:	08004d49 	.word	0x08004d49
 8004cf4:	08004d5d 	.word	0x08004d5d
 8004cf8:	08004cd9 	.word	0x08004cd9
 8004cfc:	08004cd9 	.word	0x08004cd9
 8004d00:	08004cd9 	.word	0x08004cd9
 8004d04:	08004cd9 	.word	0x08004cd9
 8004d08:	08004d5d 	.word	0x08004d5d
 8004d0c:	08004cd9 	.word	0x08004cd9
 8004d10:	08004cd9 	.word	0x08004cd9
 8004d14:	08004cd9 	.word	0x08004cd9
 8004d18:	08004cd9 	.word	0x08004cd9
 8004d1c:	08004e61 	.word	0x08004e61
 8004d20:	08004d89 	.word	0x08004d89
 8004d24:	08004e1b 	.word	0x08004e1b
 8004d28:	08004cd9 	.word	0x08004cd9
 8004d2c:	08004cd9 	.word	0x08004cd9
 8004d30:	08004e83 	.word	0x08004e83
 8004d34:	08004cd9 	.word	0x08004cd9
 8004d38:	08004d89 	.word	0x08004d89
 8004d3c:	08004cd9 	.word	0x08004cd9
 8004d40:	08004cd9 	.word	0x08004cd9
 8004d44:	08004e23 	.word	0x08004e23
 8004d48:	682b      	ldr	r3, [r5, #0]
 8004d4a:	1d1a      	adds	r2, r3, #4
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	602a      	str	r2, [r5, #0]
 8004d50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e09f      	b.n	8004e9c <_printf_i+0x1ec>
 8004d5c:	6820      	ldr	r0, [r4, #0]
 8004d5e:	682b      	ldr	r3, [r5, #0]
 8004d60:	0607      	lsls	r7, r0, #24
 8004d62:	f103 0104 	add.w	r1, r3, #4
 8004d66:	6029      	str	r1, [r5, #0]
 8004d68:	d501      	bpl.n	8004d6e <_printf_i+0xbe>
 8004d6a:	681e      	ldr	r6, [r3, #0]
 8004d6c:	e003      	b.n	8004d76 <_printf_i+0xc6>
 8004d6e:	0646      	lsls	r6, r0, #25
 8004d70:	d5fb      	bpl.n	8004d6a <_printf_i+0xba>
 8004d72:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004d76:	2e00      	cmp	r6, #0
 8004d78:	da03      	bge.n	8004d82 <_printf_i+0xd2>
 8004d7a:	232d      	movs	r3, #45	; 0x2d
 8004d7c:	4276      	negs	r6, r6
 8004d7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d82:	485a      	ldr	r0, [pc, #360]	; (8004eec <_printf_i+0x23c>)
 8004d84:	230a      	movs	r3, #10
 8004d86:	e012      	b.n	8004dae <_printf_i+0xfe>
 8004d88:	682b      	ldr	r3, [r5, #0]
 8004d8a:	6820      	ldr	r0, [r4, #0]
 8004d8c:	1d19      	adds	r1, r3, #4
 8004d8e:	6029      	str	r1, [r5, #0]
 8004d90:	0605      	lsls	r5, r0, #24
 8004d92:	d501      	bpl.n	8004d98 <_printf_i+0xe8>
 8004d94:	681e      	ldr	r6, [r3, #0]
 8004d96:	e002      	b.n	8004d9e <_printf_i+0xee>
 8004d98:	0641      	lsls	r1, r0, #25
 8004d9a:	d5fb      	bpl.n	8004d94 <_printf_i+0xe4>
 8004d9c:	881e      	ldrh	r6, [r3, #0]
 8004d9e:	4853      	ldr	r0, [pc, #332]	; (8004eec <_printf_i+0x23c>)
 8004da0:	2f6f      	cmp	r7, #111	; 0x6f
 8004da2:	bf0c      	ite	eq
 8004da4:	2308      	moveq	r3, #8
 8004da6:	230a      	movne	r3, #10
 8004da8:	2100      	movs	r1, #0
 8004daa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004dae:	6865      	ldr	r5, [r4, #4]
 8004db0:	60a5      	str	r5, [r4, #8]
 8004db2:	2d00      	cmp	r5, #0
 8004db4:	bfa2      	ittt	ge
 8004db6:	6821      	ldrge	r1, [r4, #0]
 8004db8:	f021 0104 	bicge.w	r1, r1, #4
 8004dbc:	6021      	strge	r1, [r4, #0]
 8004dbe:	b90e      	cbnz	r6, 8004dc4 <_printf_i+0x114>
 8004dc0:	2d00      	cmp	r5, #0
 8004dc2:	d04b      	beq.n	8004e5c <_printf_i+0x1ac>
 8004dc4:	4615      	mov	r5, r2
 8004dc6:	fbb6 f1f3 	udiv	r1, r6, r3
 8004dca:	fb03 6711 	mls	r7, r3, r1, r6
 8004dce:	5dc7      	ldrb	r7, [r0, r7]
 8004dd0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004dd4:	4637      	mov	r7, r6
 8004dd6:	42bb      	cmp	r3, r7
 8004dd8:	460e      	mov	r6, r1
 8004dda:	d9f4      	bls.n	8004dc6 <_printf_i+0x116>
 8004ddc:	2b08      	cmp	r3, #8
 8004dde:	d10b      	bne.n	8004df8 <_printf_i+0x148>
 8004de0:	6823      	ldr	r3, [r4, #0]
 8004de2:	07de      	lsls	r6, r3, #31
 8004de4:	d508      	bpl.n	8004df8 <_printf_i+0x148>
 8004de6:	6923      	ldr	r3, [r4, #16]
 8004de8:	6861      	ldr	r1, [r4, #4]
 8004dea:	4299      	cmp	r1, r3
 8004dec:	bfde      	ittt	le
 8004dee:	2330      	movle	r3, #48	; 0x30
 8004df0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004df4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004df8:	1b52      	subs	r2, r2, r5
 8004dfa:	6122      	str	r2, [r4, #16]
 8004dfc:	f8cd a000 	str.w	sl, [sp]
 8004e00:	464b      	mov	r3, r9
 8004e02:	aa03      	add	r2, sp, #12
 8004e04:	4621      	mov	r1, r4
 8004e06:	4640      	mov	r0, r8
 8004e08:	f7ff fee4 	bl	8004bd4 <_printf_common>
 8004e0c:	3001      	adds	r0, #1
 8004e0e:	d14a      	bne.n	8004ea6 <_printf_i+0x1f6>
 8004e10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004e14:	b004      	add	sp, #16
 8004e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e1a:	6823      	ldr	r3, [r4, #0]
 8004e1c:	f043 0320 	orr.w	r3, r3, #32
 8004e20:	6023      	str	r3, [r4, #0]
 8004e22:	4833      	ldr	r0, [pc, #204]	; (8004ef0 <_printf_i+0x240>)
 8004e24:	2778      	movs	r7, #120	; 0x78
 8004e26:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004e2a:	6823      	ldr	r3, [r4, #0]
 8004e2c:	6829      	ldr	r1, [r5, #0]
 8004e2e:	061f      	lsls	r7, r3, #24
 8004e30:	f851 6b04 	ldr.w	r6, [r1], #4
 8004e34:	d402      	bmi.n	8004e3c <_printf_i+0x18c>
 8004e36:	065f      	lsls	r7, r3, #25
 8004e38:	bf48      	it	mi
 8004e3a:	b2b6      	uxthmi	r6, r6
 8004e3c:	07df      	lsls	r7, r3, #31
 8004e3e:	bf48      	it	mi
 8004e40:	f043 0320 	orrmi.w	r3, r3, #32
 8004e44:	6029      	str	r1, [r5, #0]
 8004e46:	bf48      	it	mi
 8004e48:	6023      	strmi	r3, [r4, #0]
 8004e4a:	b91e      	cbnz	r6, 8004e54 <_printf_i+0x1a4>
 8004e4c:	6823      	ldr	r3, [r4, #0]
 8004e4e:	f023 0320 	bic.w	r3, r3, #32
 8004e52:	6023      	str	r3, [r4, #0]
 8004e54:	2310      	movs	r3, #16
 8004e56:	e7a7      	b.n	8004da8 <_printf_i+0xf8>
 8004e58:	4824      	ldr	r0, [pc, #144]	; (8004eec <_printf_i+0x23c>)
 8004e5a:	e7e4      	b.n	8004e26 <_printf_i+0x176>
 8004e5c:	4615      	mov	r5, r2
 8004e5e:	e7bd      	b.n	8004ddc <_printf_i+0x12c>
 8004e60:	682b      	ldr	r3, [r5, #0]
 8004e62:	6826      	ldr	r6, [r4, #0]
 8004e64:	6961      	ldr	r1, [r4, #20]
 8004e66:	1d18      	adds	r0, r3, #4
 8004e68:	6028      	str	r0, [r5, #0]
 8004e6a:	0635      	lsls	r5, r6, #24
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	d501      	bpl.n	8004e74 <_printf_i+0x1c4>
 8004e70:	6019      	str	r1, [r3, #0]
 8004e72:	e002      	b.n	8004e7a <_printf_i+0x1ca>
 8004e74:	0670      	lsls	r0, r6, #25
 8004e76:	d5fb      	bpl.n	8004e70 <_printf_i+0x1c0>
 8004e78:	8019      	strh	r1, [r3, #0]
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	6123      	str	r3, [r4, #16]
 8004e7e:	4615      	mov	r5, r2
 8004e80:	e7bc      	b.n	8004dfc <_printf_i+0x14c>
 8004e82:	682b      	ldr	r3, [r5, #0]
 8004e84:	1d1a      	adds	r2, r3, #4
 8004e86:	602a      	str	r2, [r5, #0]
 8004e88:	681d      	ldr	r5, [r3, #0]
 8004e8a:	6862      	ldr	r2, [r4, #4]
 8004e8c:	2100      	movs	r1, #0
 8004e8e:	4628      	mov	r0, r5
 8004e90:	f7fb f9c6 	bl	8000220 <memchr>
 8004e94:	b108      	cbz	r0, 8004e9a <_printf_i+0x1ea>
 8004e96:	1b40      	subs	r0, r0, r5
 8004e98:	6060      	str	r0, [r4, #4]
 8004e9a:	6863      	ldr	r3, [r4, #4]
 8004e9c:	6123      	str	r3, [r4, #16]
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ea4:	e7aa      	b.n	8004dfc <_printf_i+0x14c>
 8004ea6:	6923      	ldr	r3, [r4, #16]
 8004ea8:	462a      	mov	r2, r5
 8004eaa:	4649      	mov	r1, r9
 8004eac:	4640      	mov	r0, r8
 8004eae:	47d0      	blx	sl
 8004eb0:	3001      	adds	r0, #1
 8004eb2:	d0ad      	beq.n	8004e10 <_printf_i+0x160>
 8004eb4:	6823      	ldr	r3, [r4, #0]
 8004eb6:	079b      	lsls	r3, r3, #30
 8004eb8:	d413      	bmi.n	8004ee2 <_printf_i+0x232>
 8004eba:	68e0      	ldr	r0, [r4, #12]
 8004ebc:	9b03      	ldr	r3, [sp, #12]
 8004ebe:	4298      	cmp	r0, r3
 8004ec0:	bfb8      	it	lt
 8004ec2:	4618      	movlt	r0, r3
 8004ec4:	e7a6      	b.n	8004e14 <_printf_i+0x164>
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	4632      	mov	r2, r6
 8004eca:	4649      	mov	r1, r9
 8004ecc:	4640      	mov	r0, r8
 8004ece:	47d0      	blx	sl
 8004ed0:	3001      	adds	r0, #1
 8004ed2:	d09d      	beq.n	8004e10 <_printf_i+0x160>
 8004ed4:	3501      	adds	r5, #1
 8004ed6:	68e3      	ldr	r3, [r4, #12]
 8004ed8:	9903      	ldr	r1, [sp, #12]
 8004eda:	1a5b      	subs	r3, r3, r1
 8004edc:	42ab      	cmp	r3, r5
 8004ede:	dcf2      	bgt.n	8004ec6 <_printf_i+0x216>
 8004ee0:	e7eb      	b.n	8004eba <_printf_i+0x20a>
 8004ee2:	2500      	movs	r5, #0
 8004ee4:	f104 0619 	add.w	r6, r4, #25
 8004ee8:	e7f5      	b.n	8004ed6 <_printf_i+0x226>
 8004eea:	bf00      	nop
 8004eec:	0800510d 	.word	0x0800510d
 8004ef0:	0800511e 	.word	0x0800511e

08004ef4 <__malloc_lock>:
 8004ef4:	4801      	ldr	r0, [pc, #4]	; (8004efc <__malloc_lock+0x8>)
 8004ef6:	f7ff bc73 	b.w	80047e0 <__retarget_lock_acquire_recursive>
 8004efa:	bf00      	nop
 8004efc:	200002cc 	.word	0x200002cc

08004f00 <__malloc_unlock>:
 8004f00:	4801      	ldr	r0, [pc, #4]	; (8004f08 <__malloc_unlock+0x8>)
 8004f02:	f7ff bc6e 	b.w	80047e2 <__retarget_lock_release_recursive>
 8004f06:	bf00      	nop
 8004f08:	200002cc 	.word	0x200002cc

08004f0c <_realloc_r>:
 8004f0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f10:	4680      	mov	r8, r0
 8004f12:	4614      	mov	r4, r2
 8004f14:	460e      	mov	r6, r1
 8004f16:	b921      	cbnz	r1, 8004f22 <_realloc_r+0x16>
 8004f18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f1c:	4611      	mov	r1, r2
 8004f1e:	f7ff bdd9 	b.w	8004ad4 <_malloc_r>
 8004f22:	b92a      	cbnz	r2, 8004f30 <_realloc_r+0x24>
 8004f24:	f000 f85a 	bl	8004fdc <_free_r>
 8004f28:	4625      	mov	r5, r4
 8004f2a:	4628      	mov	r0, r5
 8004f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f30:	f000 f8a0 	bl	8005074 <_malloc_usable_size_r>
 8004f34:	4284      	cmp	r4, r0
 8004f36:	4607      	mov	r7, r0
 8004f38:	d802      	bhi.n	8004f40 <_realloc_r+0x34>
 8004f3a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004f3e:	d812      	bhi.n	8004f66 <_realloc_r+0x5a>
 8004f40:	4621      	mov	r1, r4
 8004f42:	4640      	mov	r0, r8
 8004f44:	f7ff fdc6 	bl	8004ad4 <_malloc_r>
 8004f48:	4605      	mov	r5, r0
 8004f4a:	2800      	cmp	r0, #0
 8004f4c:	d0ed      	beq.n	8004f2a <_realloc_r+0x1e>
 8004f4e:	42bc      	cmp	r4, r7
 8004f50:	4622      	mov	r2, r4
 8004f52:	4631      	mov	r1, r6
 8004f54:	bf28      	it	cs
 8004f56:	463a      	movcs	r2, r7
 8004f58:	f000 f832 	bl	8004fc0 <memcpy>
 8004f5c:	4631      	mov	r1, r6
 8004f5e:	4640      	mov	r0, r8
 8004f60:	f000 f83c 	bl	8004fdc <_free_r>
 8004f64:	e7e1      	b.n	8004f2a <_realloc_r+0x1e>
 8004f66:	4635      	mov	r5, r6
 8004f68:	e7df      	b.n	8004f2a <_realloc_r+0x1e>

08004f6a <memmove>:
 8004f6a:	4288      	cmp	r0, r1
 8004f6c:	b510      	push	{r4, lr}
 8004f6e:	eb01 0402 	add.w	r4, r1, r2
 8004f72:	d902      	bls.n	8004f7a <memmove+0x10>
 8004f74:	4284      	cmp	r4, r0
 8004f76:	4623      	mov	r3, r4
 8004f78:	d807      	bhi.n	8004f8a <memmove+0x20>
 8004f7a:	1e43      	subs	r3, r0, #1
 8004f7c:	42a1      	cmp	r1, r4
 8004f7e:	d008      	beq.n	8004f92 <memmove+0x28>
 8004f80:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004f84:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004f88:	e7f8      	b.n	8004f7c <memmove+0x12>
 8004f8a:	4402      	add	r2, r0
 8004f8c:	4601      	mov	r1, r0
 8004f8e:	428a      	cmp	r2, r1
 8004f90:	d100      	bne.n	8004f94 <memmove+0x2a>
 8004f92:	bd10      	pop	{r4, pc}
 8004f94:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004f98:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004f9c:	e7f7      	b.n	8004f8e <memmove+0x24>
	...

08004fa0 <_sbrk_r>:
 8004fa0:	b538      	push	{r3, r4, r5, lr}
 8004fa2:	4d06      	ldr	r5, [pc, #24]	; (8004fbc <_sbrk_r+0x1c>)
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	4604      	mov	r4, r0
 8004fa8:	4608      	mov	r0, r1
 8004faa:	602b      	str	r3, [r5, #0]
 8004fac:	f7fb fdd8 	bl	8000b60 <_sbrk>
 8004fb0:	1c43      	adds	r3, r0, #1
 8004fb2:	d102      	bne.n	8004fba <_sbrk_r+0x1a>
 8004fb4:	682b      	ldr	r3, [r5, #0]
 8004fb6:	b103      	cbz	r3, 8004fba <_sbrk_r+0x1a>
 8004fb8:	6023      	str	r3, [r4, #0]
 8004fba:	bd38      	pop	{r3, r4, r5, pc}
 8004fbc:	200002d8 	.word	0x200002d8

08004fc0 <memcpy>:
 8004fc0:	440a      	add	r2, r1
 8004fc2:	4291      	cmp	r1, r2
 8004fc4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004fc8:	d100      	bne.n	8004fcc <memcpy+0xc>
 8004fca:	4770      	bx	lr
 8004fcc:	b510      	push	{r4, lr}
 8004fce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004fd2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004fd6:	4291      	cmp	r1, r2
 8004fd8:	d1f9      	bne.n	8004fce <memcpy+0xe>
 8004fda:	bd10      	pop	{r4, pc}

08004fdc <_free_r>:
 8004fdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004fde:	2900      	cmp	r1, #0
 8004fe0:	d044      	beq.n	800506c <_free_r+0x90>
 8004fe2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004fe6:	9001      	str	r0, [sp, #4]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	f1a1 0404 	sub.w	r4, r1, #4
 8004fee:	bfb8      	it	lt
 8004ff0:	18e4      	addlt	r4, r4, r3
 8004ff2:	f7ff ff7f 	bl	8004ef4 <__malloc_lock>
 8004ff6:	4a1e      	ldr	r2, [pc, #120]	; (8005070 <_free_r+0x94>)
 8004ff8:	9801      	ldr	r0, [sp, #4]
 8004ffa:	6813      	ldr	r3, [r2, #0]
 8004ffc:	b933      	cbnz	r3, 800500c <_free_r+0x30>
 8004ffe:	6063      	str	r3, [r4, #4]
 8005000:	6014      	str	r4, [r2, #0]
 8005002:	b003      	add	sp, #12
 8005004:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005008:	f7ff bf7a 	b.w	8004f00 <__malloc_unlock>
 800500c:	42a3      	cmp	r3, r4
 800500e:	d908      	bls.n	8005022 <_free_r+0x46>
 8005010:	6825      	ldr	r5, [r4, #0]
 8005012:	1961      	adds	r1, r4, r5
 8005014:	428b      	cmp	r3, r1
 8005016:	bf01      	itttt	eq
 8005018:	6819      	ldreq	r1, [r3, #0]
 800501a:	685b      	ldreq	r3, [r3, #4]
 800501c:	1949      	addeq	r1, r1, r5
 800501e:	6021      	streq	r1, [r4, #0]
 8005020:	e7ed      	b.n	8004ffe <_free_r+0x22>
 8005022:	461a      	mov	r2, r3
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	b10b      	cbz	r3, 800502c <_free_r+0x50>
 8005028:	42a3      	cmp	r3, r4
 800502a:	d9fa      	bls.n	8005022 <_free_r+0x46>
 800502c:	6811      	ldr	r1, [r2, #0]
 800502e:	1855      	adds	r5, r2, r1
 8005030:	42a5      	cmp	r5, r4
 8005032:	d10b      	bne.n	800504c <_free_r+0x70>
 8005034:	6824      	ldr	r4, [r4, #0]
 8005036:	4421      	add	r1, r4
 8005038:	1854      	adds	r4, r2, r1
 800503a:	42a3      	cmp	r3, r4
 800503c:	6011      	str	r1, [r2, #0]
 800503e:	d1e0      	bne.n	8005002 <_free_r+0x26>
 8005040:	681c      	ldr	r4, [r3, #0]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	6053      	str	r3, [r2, #4]
 8005046:	440c      	add	r4, r1
 8005048:	6014      	str	r4, [r2, #0]
 800504a:	e7da      	b.n	8005002 <_free_r+0x26>
 800504c:	d902      	bls.n	8005054 <_free_r+0x78>
 800504e:	230c      	movs	r3, #12
 8005050:	6003      	str	r3, [r0, #0]
 8005052:	e7d6      	b.n	8005002 <_free_r+0x26>
 8005054:	6825      	ldr	r5, [r4, #0]
 8005056:	1961      	adds	r1, r4, r5
 8005058:	428b      	cmp	r3, r1
 800505a:	bf04      	itt	eq
 800505c:	6819      	ldreq	r1, [r3, #0]
 800505e:	685b      	ldreq	r3, [r3, #4]
 8005060:	6063      	str	r3, [r4, #4]
 8005062:	bf04      	itt	eq
 8005064:	1949      	addeq	r1, r1, r5
 8005066:	6021      	streq	r1, [r4, #0]
 8005068:	6054      	str	r4, [r2, #4]
 800506a:	e7ca      	b.n	8005002 <_free_r+0x26>
 800506c:	b003      	add	sp, #12
 800506e:	bd30      	pop	{r4, r5, pc}
 8005070:	200002d0 	.word	0x200002d0

08005074 <_malloc_usable_size_r>:
 8005074:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005078:	1f18      	subs	r0, r3, #4
 800507a:	2b00      	cmp	r3, #0
 800507c:	bfbc      	itt	lt
 800507e:	580b      	ldrlt	r3, [r1, r0]
 8005080:	18c0      	addlt	r0, r0, r3
 8005082:	4770      	bx	lr

08005084 <_init>:
 8005084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005086:	bf00      	nop
 8005088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800508a:	bc08      	pop	{r3}
 800508c:	469e      	mov	lr, r3
 800508e:	4770      	bx	lr

08005090 <_fini>:
 8005090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005092:	bf00      	nop
 8005094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005096:	bc08      	pop	{r3}
 8005098:	469e      	mov	lr, r3
 800509a:	4770      	bx	lr
