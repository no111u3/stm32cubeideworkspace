
tim_adc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006274  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08006454  08006454  00016454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006534  08006534  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08006534  08006534  00016534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800653c  0800653c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800653c  0800653c  0001653c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006540  08006540  00016540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08006544  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000338  2000005c  080065a0  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000394  080065a0  00020394  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016a68  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000028ce  00000000  00000000  00036b37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013e8  00000000  00000000  00039408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f88  00000000  00000000  0003a7f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000285ba  00000000  00000000  0003b778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016274  00000000  00000000  00063d32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011216e  00000000  00000000  00079fa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005b88  00000000  00000000  0018c114  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  00191c9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000005c 	.word	0x2000005c
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800643c 	.word	0x0800643c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000060 	.word	0x20000060
 800021c:	0800643c 	.word	0x0800643c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c0:	f000 fd03 	bl	8000fca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c4:	f000 f816 	bl	80005f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c8:	f000 f9ec 	bl	80009a4 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80005cc:	f000 f8fc 	bl	80007c8 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 80005d0:	f000 f85c 	bl	800068c <MX_ADC1_Init>
  MX_TIM2_Init();
 80005d4:	f000 f996 	bl	8000904 <MX_TIM2_Init>
  MX_TIM1_Init();
 80005d8:	f000 f940 	bl	800085c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_IT(&hadc1);
 80005dc:	4803      	ldr	r0, [pc, #12]	; (80005ec <main+0x30>)
 80005de:	f001 f96b 	bl	80018b8 <HAL_ADC_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 80005e2:	4803      	ldr	r0, [pc, #12]	; (80005f0 <main+0x34>)
 80005e4:	f003 fe96 	bl	8004314 <HAL_TIM_Base_Start_IT>
  //HAL_TIM_Base_Start_IT(&htim1);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005e8:	e7fe      	b.n	80005e8 <main+0x2c>
 80005ea:	bf00      	nop
 80005ec:	20000078 	.word	0x20000078
 80005f0:	200001c0 	.word	0x200001c0

080005f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b094      	sub	sp, #80	; 0x50
 80005f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fa:	f107 0318 	add.w	r3, r7, #24
 80005fe:	2238      	movs	r2, #56	; 0x38
 8000600:	2100      	movs	r1, #0
 8000602:	4618      	mov	r0, r3
 8000604:	f005 fa96 	bl	8005b34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000608:	1d3b      	adds	r3, r7, #4
 800060a:	2200      	movs	r2, #0
 800060c:	601a      	str	r2, [r3, #0]
 800060e:	605a      	str	r2, [r3, #4]
 8000610:	609a      	str	r2, [r3, #8]
 8000612:	60da      	str	r2, [r3, #12]
 8000614:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000616:	2000      	movs	r0, #0
 8000618:	f002 fdee 	bl	80031f8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800061c:	2302      	movs	r3, #2
 800061e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000620:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000624:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000626:	2340      	movs	r3, #64	; 0x40
 8000628:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800062a:	2302      	movs	r3, #2
 800062c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800062e:	2302      	movs	r3, #2
 8000630:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000632:	2304      	movs	r3, #4
 8000634:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000636:	2355      	movs	r3, #85	; 0x55
 8000638:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800063a:	2302      	movs	r3, #2
 800063c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800063e:	2302      	movs	r3, #2
 8000640:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000642:	2302      	movs	r3, #2
 8000644:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000646:	f107 0318 	add.w	r3, r7, #24
 800064a:	4618      	mov	r0, r3
 800064c:	f002 fe88 	bl	8003360 <HAL_RCC_OscConfig>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000656:	f000 fad9 	bl	8000c0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800065a:	230f      	movs	r3, #15
 800065c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800065e:	2303      	movs	r3, #3
 8000660:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000662:	2300      	movs	r3, #0
 8000664:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000666:	2300      	movs	r3, #0
 8000668:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800066a:	2300      	movs	r3, #0
 800066c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800066e:	1d3b      	adds	r3, r7, #4
 8000670:	2104      	movs	r1, #4
 8000672:	4618      	mov	r0, r3
 8000674:	f003 f98c 	bl	8003990 <HAL_RCC_ClockConfig>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800067e:	f000 fac5 	bl	8000c0c <Error_Handler>
  }
}
 8000682:	bf00      	nop
 8000684:	3750      	adds	r7, #80	; 0x50
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
	...

0800068c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b08c      	sub	sp, #48	; 0x30
 8000690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000692:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	605a      	str	r2, [r3, #4]
 800069c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800069e:	1d3b      	adds	r3, r7, #4
 80006a0:	2220      	movs	r2, #32
 80006a2:	2100      	movs	r1, #0
 80006a4:	4618      	mov	r0, r3
 80006a6:	f005 fa45 	bl	8005b34 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80006aa:	4b43      	ldr	r3, [pc, #268]	; (80007b8 <MX_ADC1_Init+0x12c>)
 80006ac:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80006b0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006b2:	4b41      	ldr	r3, [pc, #260]	; (80007b8 <MX_ADC1_Init+0x12c>)
 80006b4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80006b8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006ba:	4b3f      	ldr	r3, [pc, #252]	; (80007b8 <MX_ADC1_Init+0x12c>)
 80006bc:	2200      	movs	r2, #0
 80006be:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006c0:	4b3d      	ldr	r3, [pc, #244]	; (80007b8 <MX_ADC1_Init+0x12c>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80006c6:	4b3c      	ldr	r3, [pc, #240]	; (80007b8 <MX_ADC1_Init+0x12c>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80006cc:	4b3a      	ldr	r3, [pc, #232]	; (80007b8 <MX_ADC1_Init+0x12c>)
 80006ce:	2201      	movs	r2, #1
 80006d0:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006d2:	4b39      	ldr	r3, [pc, #228]	; (80007b8 <MX_ADC1_Init+0x12c>)
 80006d4:	2204      	movs	r2, #4
 80006d6:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006d8:	4b37      	ldr	r3, [pc, #220]	; (80007b8 <MX_ADC1_Init+0x12c>)
 80006da:	2200      	movs	r2, #0
 80006dc:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006de:	4b36      	ldr	r3, [pc, #216]	; (80007b8 <MX_ADC1_Init+0x12c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 80006e4:	4b34      	ldr	r3, [pc, #208]	; (80007b8 <MX_ADC1_Init+0x12c>)
 80006e6:	2203      	movs	r2, #3
 80006e8:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 80006ea:	4b33      	ldr	r3, [pc, #204]	; (80007b8 <MX_ADC1_Init+0x12c>)
 80006ec:	2201      	movs	r2, #1
 80006ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.NbrOfDiscConversion = 3;
 80006f2:	4b31      	ldr	r3, [pc, #196]	; (80007b8 <MX_ADC1_Init+0x12c>)
 80006f4:	2203      	movs	r2, #3
 80006f6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 80006f8:	4b2f      	ldr	r3, [pc, #188]	; (80007b8 <MX_ADC1_Init+0x12c>)
 80006fa:	f44f 62ac 	mov.w	r2, #1376	; 0x560
 80006fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000700:	4b2d      	ldr	r3, [pc, #180]	; (80007b8 <MX_ADC1_Init+0x12c>)
 8000702:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000706:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000708:	4b2b      	ldr	r3, [pc, #172]	; (80007b8 <MX_ADC1_Init+0x12c>)
 800070a:	2200      	movs	r2, #0
 800070c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000710:	4b29      	ldr	r3, [pc, #164]	; (80007b8 <MX_ADC1_Init+0x12c>)
 8000712:	2200      	movs	r2, #0
 8000714:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000716:	4b28      	ldr	r3, [pc, #160]	; (80007b8 <MX_ADC1_Init+0x12c>)
 8000718:	2200      	movs	r2, #0
 800071a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800071e:	4826      	ldr	r0, [pc, #152]	; (80007b8 <MX_ADC1_Init+0x12c>)
 8000720:	f000 ff08 	bl	8001534 <HAL_ADC_Init>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_ADC1_Init+0xa2>
  {
    Error_Handler();
 800072a:	f000 fa6f 	bl	8000c0c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800072e:	2300      	movs	r3, #0
 8000730:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000732:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000736:	4619      	mov	r1, r3
 8000738:	481f      	ldr	r0, [pc, #124]	; (80007b8 <MX_ADC1_Init+0x12c>)
 800073a:	f002 f987 	bl	8002a4c <HAL_ADCEx_MultiModeConfigChannel>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_ADC1_Init+0xbc>
  {
    Error_Handler();
 8000744:	f000 fa62 	bl	8000c0c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000748:	4b1c      	ldr	r3, [pc, #112]	; (80007bc <MX_ADC1_Init+0x130>)
 800074a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800074c:	2306      	movs	r3, #6
 800074e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8000750:	2301      	movs	r3, #1
 8000752:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000754:	237f      	movs	r3, #127	; 0x7f
 8000756:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000758:	2304      	movs	r3, #4
 800075a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800075c:	2300      	movs	r3, #0
 800075e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000760:	1d3b      	adds	r3, r7, #4
 8000762:	4619      	mov	r1, r3
 8000764:	4814      	ldr	r0, [pc, #80]	; (80007b8 <MX_ADC1_Init+0x12c>)
 8000766:	f001 fc81 	bl	800206c <HAL_ADC_ConfigChannel>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 8000770:	f000 fa4c 	bl	8000c0c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR_ADC1;
 8000774:	4b12      	ldr	r3, [pc, #72]	; (80007c0 <MX_ADC1_Init+0x134>)
 8000776:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000778:	230c      	movs	r3, #12
 800077a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800077c:	2300      	movs	r3, #0
 800077e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000780:	1d3b      	adds	r3, r7, #4
 8000782:	4619      	mov	r1, r3
 8000784:	480c      	ldr	r0, [pc, #48]	; (80007b8 <MX_ADC1_Init+0x12c>)
 8000786:	f001 fc71 	bl	800206c <HAL_ADC_ConfigChannel>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 8000790:	f000 fa3c 	bl	8000c0c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000794:	4b0b      	ldr	r3, [pc, #44]	; (80007c4 <MX_ADC1_Init+0x138>)
 8000796:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000798:	2312      	movs	r3, #18
 800079a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800079c:	1d3b      	adds	r3, r7, #4
 800079e:	4619      	mov	r1, r3
 80007a0:	4805      	ldr	r0, [pc, #20]	; (80007b8 <MX_ADC1_Init+0x12c>)
 80007a2:	f001 fc63 	bl	800206c <HAL_ADC_ConfigChannel>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_ADC1_Init+0x124>
  {
    Error_Handler();
 80007ac:	f000 fa2e 	bl	8000c0c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007b0:	bf00      	nop
 80007b2:	3730      	adds	r7, #48	; 0x30
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	20000078 	.word	0x20000078
 80007bc:	cb840000 	.word	0xcb840000
 80007c0:	c3210000 	.word	0xc3210000
 80007c4:	04300002 	.word	0x04300002

080007c8 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80007cc:	4b21      	ldr	r3, [pc, #132]	; (8000854 <MX_LPUART1_UART_Init+0x8c>)
 80007ce:	4a22      	ldr	r2, [pc, #136]	; (8000858 <MX_LPUART1_UART_Init+0x90>)
 80007d0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80007d2:	4b20      	ldr	r3, [pc, #128]	; (8000854 <MX_LPUART1_UART_Init+0x8c>)
 80007d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007d8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007da:	4b1e      	ldr	r3, [pc, #120]	; (8000854 <MX_LPUART1_UART_Init+0x8c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80007e0:	4b1c      	ldr	r3, [pc, #112]	; (8000854 <MX_LPUART1_UART_Init+0x8c>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80007e6:	4b1b      	ldr	r3, [pc, #108]	; (8000854 <MX_LPUART1_UART_Init+0x8c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80007ec:	4b19      	ldr	r3, [pc, #100]	; (8000854 <MX_LPUART1_UART_Init+0x8c>)
 80007ee:	220c      	movs	r2, #12
 80007f0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007f2:	4b18      	ldr	r3, [pc, #96]	; (8000854 <MX_LPUART1_UART_Init+0x8c>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007f8:	4b16      	ldr	r3, [pc, #88]	; (8000854 <MX_LPUART1_UART_Init+0x8c>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007fe:	4b15      	ldr	r3, [pc, #84]	; (8000854 <MX_LPUART1_UART_Init+0x8c>)
 8000800:	2200      	movs	r2, #0
 8000802:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000804:	4b13      	ldr	r3, [pc, #76]	; (8000854 <MX_LPUART1_UART_Init+0x8c>)
 8000806:	2200      	movs	r2, #0
 8000808:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800080a:	4812      	ldr	r0, [pc, #72]	; (8000854 <MX_LPUART1_UART_Init+0x8c>)
 800080c:	f004 fad8 	bl	8004dc0 <HAL_UART_Init>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000816:	f000 f9f9 	bl	8000c0c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800081a:	2100      	movs	r1, #0
 800081c:	480d      	ldr	r0, [pc, #52]	; (8000854 <MX_LPUART1_UART_Init+0x8c>)
 800081e:	f005 f89f 	bl	8005960 <HAL_UARTEx_SetTxFifoThreshold>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000828:	f000 f9f0 	bl	8000c0c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800082c:	2100      	movs	r1, #0
 800082e:	4809      	ldr	r0, [pc, #36]	; (8000854 <MX_LPUART1_UART_Init+0x8c>)
 8000830:	f005 f8d4 	bl	80059dc <HAL_UARTEx_SetRxFifoThreshold>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800083a:	f000 f9e7 	bl	8000c0c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800083e:	4805      	ldr	r0, [pc, #20]	; (8000854 <MX_LPUART1_UART_Init+0x8c>)
 8000840:	f005 f855 	bl	80058ee <HAL_UARTEx_DisableFifoMode>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800084a:	f000 f9df 	bl	8000c0c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	200000e4 	.word	0x200000e4
 8000858:	40008000 	.word	0x40008000

0800085c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b088      	sub	sp, #32
 8000860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000862:	f107 0310 	add.w	r3, r7, #16
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
 800086a:	605a      	str	r2, [r3, #4]
 800086c:	609a      	str	r2, [r3, #8]
 800086e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000870:	1d3b      	adds	r3, r7, #4
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
 8000876:	605a      	str	r2, [r3, #4]
 8000878:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800087a:	4b20      	ldr	r3, [pc, #128]	; (80008fc <MX_TIM1_Init+0xa0>)
 800087c:	4a20      	ldr	r2, [pc, #128]	; (8000900 <MX_TIM1_Init+0xa4>)
 800087e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10000-1;
 8000880:	4b1e      	ldr	r3, [pc, #120]	; (80008fc <MX_TIM1_Init+0xa0>)
 8000882:	f242 720f 	movw	r2, #9999	; 0x270f
 8000886:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000888:	4b1c      	ldr	r3, [pc, #112]	; (80008fc <MX_TIM1_Init+0xa0>)
 800088a:	2200      	movs	r2, #0
 800088c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 17000;
 800088e:	4b1b      	ldr	r3, [pc, #108]	; (80008fc <MX_TIM1_Init+0xa0>)
 8000890:	f244 2268 	movw	r2, #17000	; 0x4268
 8000894:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000896:	4b19      	ldr	r3, [pc, #100]	; (80008fc <MX_TIM1_Init+0xa0>)
 8000898:	2200      	movs	r2, #0
 800089a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800089c:	4b17      	ldr	r3, [pc, #92]	; (80008fc <MX_TIM1_Init+0xa0>)
 800089e:	2200      	movs	r2, #0
 80008a0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008a2:	4b16      	ldr	r3, [pc, #88]	; (80008fc <MX_TIM1_Init+0xa0>)
 80008a4:	2280      	movs	r2, #128	; 0x80
 80008a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008a8:	4814      	ldr	r0, [pc, #80]	; (80008fc <MX_TIM1_Init+0xa0>)
 80008aa:	f003 fcdb 	bl	8004264 <HAL_TIM_Base_Init>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 80008b4:	f000 f9aa 	bl	8000c0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008bc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008be:	f107 0310 	add.w	r3, r7, #16
 80008c2:	4619      	mov	r1, r3
 80008c4:	480d      	ldr	r0, [pc, #52]	; (80008fc <MX_TIM1_Init+0xa0>)
 80008c6:	f003 ff1d 	bl	8004704 <HAL_TIM_ConfigClockSource>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80008d0:	f000 f99c 	bl	8000c0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80008d4:	2320      	movs	r3, #32
 80008d6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80008d8:	2300      	movs	r3, #0
 80008da:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008dc:	2300      	movs	r3, #0
 80008de:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008e0:	1d3b      	adds	r3, r7, #4
 80008e2:	4619      	mov	r1, r3
 80008e4:	4805      	ldr	r0, [pc, #20]	; (80008fc <MX_TIM1_Init+0xa0>)
 80008e6:	f004 f98f 	bl	8004c08 <HAL_TIMEx_MasterConfigSynchronization>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80008f0:	f000 f98c 	bl	8000c0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80008f4:	bf00      	nop
 80008f6:	3720      	adds	r7, #32
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	20000174 	.word	0x20000174
 8000900:	40012c00 	.word	0x40012c00

08000904 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b088      	sub	sp, #32
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800090a:	f107 0310 	add.w	r3, r7, #16
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	605a      	str	r2, [r3, #4]
 8000914:	609a      	str	r2, [r3, #8]
 8000916:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000918:	1d3b      	adds	r3, r7, #4
 800091a:	2200      	movs	r2, #0
 800091c:	601a      	str	r2, [r3, #0]
 800091e:	605a      	str	r2, [r3, #4]
 8000920:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000922:	4b1e      	ldr	r3, [pc, #120]	; (800099c <MX_TIM2_Init+0x98>)
 8000924:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000928:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000-1;
 800092a:	4b1c      	ldr	r3, [pc, #112]	; (800099c <MX_TIM2_Init+0x98>)
 800092c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000930:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000932:	4b1a      	ldr	r3, [pc, #104]	; (800099c <MX_TIM2_Init+0x98>)
 8000934:	2200      	movs	r2, #0
 8000936:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 170000;
 8000938:	4b18      	ldr	r3, [pc, #96]	; (800099c <MX_TIM2_Init+0x98>)
 800093a:	4a19      	ldr	r2, [pc, #100]	; (80009a0 <MX_TIM2_Init+0x9c>)
 800093c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800093e:	4b17      	ldr	r3, [pc, #92]	; (800099c <MX_TIM2_Init+0x98>)
 8000940:	2200      	movs	r2, #0
 8000942:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000944:	4b15      	ldr	r3, [pc, #84]	; (800099c <MX_TIM2_Init+0x98>)
 8000946:	2280      	movs	r2, #128	; 0x80
 8000948:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800094a:	4814      	ldr	r0, [pc, #80]	; (800099c <MX_TIM2_Init+0x98>)
 800094c:	f003 fc8a 	bl	8004264 <HAL_TIM_Base_Init>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000956:	f000 f959 	bl	8000c0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800095a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800095e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000960:	f107 0310 	add.w	r3, r7, #16
 8000964:	4619      	mov	r1, r3
 8000966:	480d      	ldr	r0, [pc, #52]	; (800099c <MX_TIM2_Init+0x98>)
 8000968:	f003 fecc 	bl	8004704 <HAL_TIM_ConfigClockSource>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000972:	f000 f94b 	bl	8000c0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000976:	2320      	movs	r3, #32
 8000978:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800097a:	2300      	movs	r3, #0
 800097c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800097e:	1d3b      	adds	r3, r7, #4
 8000980:	4619      	mov	r1, r3
 8000982:	4806      	ldr	r0, [pc, #24]	; (800099c <MX_TIM2_Init+0x98>)
 8000984:	f004 f940 	bl	8004c08 <HAL_TIMEx_MasterConfigSynchronization>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800098e:	f000 f93d 	bl	8000c0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000992:	bf00      	nop
 8000994:	3720      	adds	r7, #32
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	200001c0 	.word	0x200001c0
 80009a0:	00029810 	.word	0x00029810

080009a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08a      	sub	sp, #40	; 0x28
 80009a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009aa:	f107 0314 	add.w	r3, r7, #20
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]
 80009b2:	605a      	str	r2, [r3, #4]
 80009b4:	609a      	str	r2, [r3, #8]
 80009b6:	60da      	str	r2, [r3, #12]
 80009b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ba:	4b2f      	ldr	r3, [pc, #188]	; (8000a78 <MX_GPIO_Init+0xd4>)
 80009bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009be:	4a2e      	ldr	r2, [pc, #184]	; (8000a78 <MX_GPIO_Init+0xd4>)
 80009c0:	f043 0304 	orr.w	r3, r3, #4
 80009c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009c6:	4b2c      	ldr	r3, [pc, #176]	; (8000a78 <MX_GPIO_Init+0xd4>)
 80009c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ca:	f003 0304 	and.w	r3, r3, #4
 80009ce:	613b      	str	r3, [r7, #16]
 80009d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009d2:	4b29      	ldr	r3, [pc, #164]	; (8000a78 <MX_GPIO_Init+0xd4>)
 80009d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d6:	4a28      	ldr	r2, [pc, #160]	; (8000a78 <MX_GPIO_Init+0xd4>)
 80009d8:	f043 0320 	orr.w	r3, r3, #32
 80009dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009de:	4b26      	ldr	r3, [pc, #152]	; (8000a78 <MX_GPIO_Init+0xd4>)
 80009e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e2:	f003 0320 	and.w	r3, r3, #32
 80009e6:	60fb      	str	r3, [r7, #12]
 80009e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ea:	4b23      	ldr	r3, [pc, #140]	; (8000a78 <MX_GPIO_Init+0xd4>)
 80009ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ee:	4a22      	ldr	r2, [pc, #136]	; (8000a78 <MX_GPIO_Init+0xd4>)
 80009f0:	f043 0301 	orr.w	r3, r3, #1
 80009f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009f6:	4b20      	ldr	r3, [pc, #128]	; (8000a78 <MX_GPIO_Init+0xd4>)
 80009f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009fa:	f003 0301 	and.w	r3, r3, #1
 80009fe:	60bb      	str	r3, [r7, #8]
 8000a00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a02:	4b1d      	ldr	r3, [pc, #116]	; (8000a78 <MX_GPIO_Init+0xd4>)
 8000a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a06:	4a1c      	ldr	r2, [pc, #112]	; (8000a78 <MX_GPIO_Init+0xd4>)
 8000a08:	f043 0302 	orr.w	r3, r3, #2
 8000a0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a0e:	4b1a      	ldr	r3, [pc, #104]	; (8000a78 <MX_GPIO_Init+0xd4>)
 8000a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a12:	f003 0302 	and.w	r3, r3, #2
 8000a16:	607b      	str	r3, [r7, #4]
 8000a18:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2120      	movs	r1, #32
 8000a1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a22:	f002 fbad 	bl	8003180 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a2c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	2300      	movs	r3, #0
 8000a34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a36:	f107 0314 	add.w	r3, r7, #20
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	480f      	ldr	r0, [pc, #60]	; (8000a7c <MX_GPIO_Init+0xd8>)
 8000a3e:	f002 fa1d 	bl	8002e7c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a42:	2320      	movs	r3, #32
 8000a44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a46:	2301      	movs	r3, #1
 8000a48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a52:	f107 0314 	add.w	r3, r7, #20
 8000a56:	4619      	mov	r1, r3
 8000a58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a5c:	f002 fa0e 	bl	8002e7c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a60:	2200      	movs	r2, #0
 8000a62:	2100      	movs	r1, #0
 8000a64:	2028      	movs	r0, #40	; 0x28
 8000a66:	f002 f9d4 	bl	8002e12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a6a:	2028      	movs	r0, #40	; 0x28
 8000a6c:	f002 f9eb 	bl	8002e46 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a70:	bf00      	nop
 8000a72:	3728      	adds	r7, #40	; 0x28
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	40021000 	.word	0x40021000
 8000a7c:	48000800 	.word	0x48000800

08000a80 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim2 )
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	4a14      	ldr	r2, [pc, #80]	; (8000adc <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	d10e      	bne.n	8000aae <HAL_TIM_PeriodElapsedCallback+0x2e>
  {
	  uart_buf_len = sprintf(uart_buf, "Timer 2 Event\r\n");
 8000a90:	4913      	ldr	r1, [pc, #76]	; (8000ae0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000a92:	4814      	ldr	r0, [pc, #80]	; (8000ae4 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000a94:	f005 f82e 	bl	8005af4 <siprintf>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	4a13      	ldr	r2, [pc, #76]	; (8000ae8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000a9c:	6013      	str	r3, [r2, #0]
	  HAL_UART_Transmit(&hlpuart1, (uint8_t *)uart_buf, uart_buf_len, 100);
 8000a9e:	4b12      	ldr	r3, [pc, #72]	; (8000ae8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	b29a      	uxth	r2, r3
 8000aa4:	2364      	movs	r3, #100	; 0x64
 8000aa6:	490f      	ldr	r1, [pc, #60]	; (8000ae4 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000aa8:	4810      	ldr	r0, [pc, #64]	; (8000aec <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000aaa:	f004 f9d9 	bl	8004e60 <HAL_UART_Transmit>
  }
  if (htim == &htim1 )
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	4a0f      	ldr	r2, [pc, #60]	; (8000af0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d10e      	bne.n	8000ad4 <HAL_TIM_PeriodElapsedCallback+0x54>
    {
  	  uart_buf_len = sprintf(uart_buf, "Timer 1 Event\r\n");
 8000ab6:	490f      	ldr	r1, [pc, #60]	; (8000af4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000ab8:	480a      	ldr	r0, [pc, #40]	; (8000ae4 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000aba:	f005 f81b 	bl	8005af4 <siprintf>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	4a09      	ldr	r2, [pc, #36]	; (8000ae8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000ac2:	6013      	str	r3, [r2, #0]
  	  HAL_UART_Transmit(&hlpuart1, (uint8_t *)uart_buf, uart_buf_len, 100);
 8000ac4:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	b29a      	uxth	r2, r3
 8000aca:	2364      	movs	r3, #100	; 0x64
 8000acc:	4905      	ldr	r1, [pc, #20]	; (8000ae4 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000ace:	4807      	ldr	r0, [pc, #28]	; (8000aec <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000ad0:	f004 f9c6 	bl	8004e60 <HAL_UART_Transmit>
    }
}
 8000ad4:	bf00      	nop
 8000ad6:	3708      	adds	r7, #8
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	200001c0 	.word	0x200001c0
 8000ae0:	08006454 	.word	0x08006454
 8000ae4:	2000020c 	.word	0x2000020c
 8000ae8:	20000240 	.word	0x20000240
 8000aec:	200000e4 	.word	0x200000e4
 8000af0:	20000174 	.word	0x20000174
 8000af4:	08006464 	.word	0x08006464

08000af8 <HAL_ADCEx_EndOfSamplingCallback>:

void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	4a0b      	ldr	r2, [pc, #44]	; (8000b30 <HAL_ADCEx_EndOfSamplingCallback+0x38>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d10e      	bne.n	8000b26 <HAL_ADCEx_EndOfSamplingCallback+0x2e>
	{
		uart_buf_len = sprintf(uart_buf, "Adc End Of Sampling Event\r\n");
 8000b08:	490a      	ldr	r1, [pc, #40]	; (8000b34 <HAL_ADCEx_EndOfSamplingCallback+0x3c>)
 8000b0a:	480b      	ldr	r0, [pc, #44]	; (8000b38 <HAL_ADCEx_EndOfSamplingCallback+0x40>)
 8000b0c:	f004 fff2 	bl	8005af4 <siprintf>
 8000b10:	4603      	mov	r3, r0
 8000b12:	4a0a      	ldr	r2, [pc, #40]	; (8000b3c <HAL_ADCEx_EndOfSamplingCallback+0x44>)
 8000b14:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit(&hlpuart1, (uint8_t *)uart_buf, uart_buf_len, 100);
 8000b16:	4b09      	ldr	r3, [pc, #36]	; (8000b3c <HAL_ADCEx_EndOfSamplingCallback+0x44>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	b29a      	uxth	r2, r3
 8000b1c:	2364      	movs	r3, #100	; 0x64
 8000b1e:	4906      	ldr	r1, [pc, #24]	; (8000b38 <HAL_ADCEx_EndOfSamplingCallback+0x40>)
 8000b20:	4807      	ldr	r0, [pc, #28]	; (8000b40 <HAL_ADCEx_EndOfSamplingCallback+0x48>)
 8000b22:	f004 f99d 	bl	8004e60 <HAL_UART_Transmit>
	}
}
 8000b26:	bf00      	nop
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	20000078 	.word	0x20000078
 8000b34:	08006474 	.word	0x08006474
 8000b38:	2000020c 	.word	0x2000020c
 8000b3c:	20000240 	.word	0x20000240
 8000b40:	200000e4 	.word	0x200000e4

08000b44 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  	if (hadc == &hadc1)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	4a29      	ldr	r2, [pc, #164]	; (8000bf4 <HAL_ADC_ConvCpltCallback+0xb0>)
 8000b50:	4293      	cmp	r3, r2
 8000b52:	d14a      	bne.n	8000bea <HAL_ADC_ConvCpltCallback+0xa6>
  	{
  		uart_buf_len = sprintf(uart_buf, "Adc Conv Complete Event\r\n");
 8000b54:	4928      	ldr	r1, [pc, #160]	; (8000bf8 <HAL_ADC_ConvCpltCallback+0xb4>)
 8000b56:	4829      	ldr	r0, [pc, #164]	; (8000bfc <HAL_ADC_ConvCpltCallback+0xb8>)
 8000b58:	f004 ffcc 	bl	8005af4 <siprintf>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	4a28      	ldr	r2, [pc, #160]	; (8000c00 <HAL_ADC_ConvCpltCallback+0xbc>)
 8000b60:	6013      	str	r3, [r2, #0]
  		HAL_UART_Transmit(&hlpuart1, (uint8_t *)uart_buf, uart_buf_len, 100);
 8000b62:	4b27      	ldr	r3, [pc, #156]	; (8000c00 <HAL_ADC_ConvCpltCallback+0xbc>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	b29a      	uxth	r2, r3
 8000b68:	2364      	movs	r3, #100	; 0x64
 8000b6a:	4924      	ldr	r1, [pc, #144]	; (8000bfc <HAL_ADC_ConvCpltCallback+0xb8>)
 8000b6c:	4825      	ldr	r0, [pc, #148]	; (8000c04 <HAL_ADC_ConvCpltCallback+0xc0>)
 8000b6e:	f004 f977 	bl	8004e60 <HAL_UART_Transmit>
  		uart_buf_len = sprintf(uart_buf, "Readed value: %ld\r\n", HAL_ADC_GetValue(&hadc1));
 8000b72:	4820      	ldr	r0, [pc, #128]	; (8000bf4 <HAL_ADC_ConvCpltCallback+0xb0>)
 8000b74:	f000 fff8 	bl	8001b68 <HAL_ADC_GetValue>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	461a      	mov	r2, r3
 8000b7c:	4922      	ldr	r1, [pc, #136]	; (8000c08 <HAL_ADC_ConvCpltCallback+0xc4>)
 8000b7e:	481f      	ldr	r0, [pc, #124]	; (8000bfc <HAL_ADC_ConvCpltCallback+0xb8>)
 8000b80:	f004 ffb8 	bl	8005af4 <siprintf>
 8000b84:	4603      	mov	r3, r0
 8000b86:	4a1e      	ldr	r2, [pc, #120]	; (8000c00 <HAL_ADC_ConvCpltCallback+0xbc>)
 8000b88:	6013      	str	r3, [r2, #0]
  		HAL_UART_Transmit(&hlpuart1, (uint8_t *)uart_buf, uart_buf_len, 100);
 8000b8a:	4b1d      	ldr	r3, [pc, #116]	; (8000c00 <HAL_ADC_ConvCpltCallback+0xbc>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	b29a      	uxth	r2, r3
 8000b90:	2364      	movs	r3, #100	; 0x64
 8000b92:	491a      	ldr	r1, [pc, #104]	; (8000bfc <HAL_ADC_ConvCpltCallback+0xb8>)
 8000b94:	481b      	ldr	r0, [pc, #108]	; (8000c04 <HAL_ADC_ConvCpltCallback+0xc0>)
 8000b96:	f004 f963 	bl	8004e60 <HAL_UART_Transmit>
  		uart_buf_len = sprintf(uart_buf, "Readed value: %ld\r\n", HAL_ADC_GetValue(&hadc1));
 8000b9a:	4816      	ldr	r0, [pc, #88]	; (8000bf4 <HAL_ADC_ConvCpltCallback+0xb0>)
 8000b9c:	f000 ffe4 	bl	8001b68 <HAL_ADC_GetValue>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	461a      	mov	r2, r3
 8000ba4:	4918      	ldr	r1, [pc, #96]	; (8000c08 <HAL_ADC_ConvCpltCallback+0xc4>)
 8000ba6:	4815      	ldr	r0, [pc, #84]	; (8000bfc <HAL_ADC_ConvCpltCallback+0xb8>)
 8000ba8:	f004 ffa4 	bl	8005af4 <siprintf>
 8000bac:	4603      	mov	r3, r0
 8000bae:	4a14      	ldr	r2, [pc, #80]	; (8000c00 <HAL_ADC_ConvCpltCallback+0xbc>)
 8000bb0:	6013      	str	r3, [r2, #0]
  		HAL_UART_Transmit(&hlpuart1, (uint8_t *)uart_buf, uart_buf_len, 100);
 8000bb2:	4b13      	ldr	r3, [pc, #76]	; (8000c00 <HAL_ADC_ConvCpltCallback+0xbc>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	b29a      	uxth	r2, r3
 8000bb8:	2364      	movs	r3, #100	; 0x64
 8000bba:	4910      	ldr	r1, [pc, #64]	; (8000bfc <HAL_ADC_ConvCpltCallback+0xb8>)
 8000bbc:	4811      	ldr	r0, [pc, #68]	; (8000c04 <HAL_ADC_ConvCpltCallback+0xc0>)
 8000bbe:	f004 f94f 	bl	8004e60 <HAL_UART_Transmit>
  		uart_buf_len = sprintf(uart_buf, "Readed value: %ld\r\n", HAL_ADC_GetValue(&hadc1));
 8000bc2:	480c      	ldr	r0, [pc, #48]	; (8000bf4 <HAL_ADC_ConvCpltCallback+0xb0>)
 8000bc4:	f000 ffd0 	bl	8001b68 <HAL_ADC_GetValue>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	461a      	mov	r2, r3
 8000bcc:	490e      	ldr	r1, [pc, #56]	; (8000c08 <HAL_ADC_ConvCpltCallback+0xc4>)
 8000bce:	480b      	ldr	r0, [pc, #44]	; (8000bfc <HAL_ADC_ConvCpltCallback+0xb8>)
 8000bd0:	f004 ff90 	bl	8005af4 <siprintf>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	4a0a      	ldr	r2, [pc, #40]	; (8000c00 <HAL_ADC_ConvCpltCallback+0xbc>)
 8000bd8:	6013      	str	r3, [r2, #0]
  		HAL_UART_Transmit(&hlpuart1, (uint8_t *)uart_buf, uart_buf_len, 100);
 8000bda:	4b09      	ldr	r3, [pc, #36]	; (8000c00 <HAL_ADC_ConvCpltCallback+0xbc>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	b29a      	uxth	r2, r3
 8000be0:	2364      	movs	r3, #100	; 0x64
 8000be2:	4906      	ldr	r1, [pc, #24]	; (8000bfc <HAL_ADC_ConvCpltCallback+0xb8>)
 8000be4:	4807      	ldr	r0, [pc, #28]	; (8000c04 <HAL_ADC_ConvCpltCallback+0xc0>)
 8000be6:	f004 f93b 	bl	8004e60 <HAL_UART_Transmit>
  	}
}
 8000bea:	bf00      	nop
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	20000078 	.word	0x20000078
 8000bf8:	08006490 	.word	0x08006490
 8000bfc:	2000020c 	.word	0x2000020c
 8000c00:	20000240 	.word	0x20000240
 8000c04:	200000e4 	.word	0x200000e4
 8000c08:	080064ac 	.word	0x080064ac

08000c0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c10:	b672      	cpsid	i
}
 8000c12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c14:	e7fe      	b.n	8000c14 <Error_Handler+0x8>
	...

08000c18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c1e:	4b0f      	ldr	r3, [pc, #60]	; (8000c5c <HAL_MspInit+0x44>)
 8000c20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c22:	4a0e      	ldr	r2, [pc, #56]	; (8000c5c <HAL_MspInit+0x44>)
 8000c24:	f043 0301 	orr.w	r3, r3, #1
 8000c28:	6613      	str	r3, [r2, #96]	; 0x60
 8000c2a:	4b0c      	ldr	r3, [pc, #48]	; (8000c5c <HAL_MspInit+0x44>)
 8000c2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c2e:	f003 0301 	and.w	r3, r3, #1
 8000c32:	607b      	str	r3, [r7, #4]
 8000c34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c36:	4b09      	ldr	r3, [pc, #36]	; (8000c5c <HAL_MspInit+0x44>)
 8000c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c3a:	4a08      	ldr	r2, [pc, #32]	; (8000c5c <HAL_MspInit+0x44>)
 8000c3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c40:	6593      	str	r3, [r2, #88]	; 0x58
 8000c42:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <HAL_MspInit+0x44>)
 8000c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c4a:	603b      	str	r3, [r7, #0]
 8000c4c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000c4e:	f002 fb77 	bl	8003340 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c52:	bf00      	nop
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40021000 	.word	0x40021000

08000c60 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b09e      	sub	sp, #120	; 0x78
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c68:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	605a      	str	r2, [r3, #4]
 8000c72:	609a      	str	r2, [r3, #8]
 8000c74:	60da      	str	r2, [r3, #12]
 8000c76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c78:	f107 0310 	add.w	r3, r7, #16
 8000c7c:	2254      	movs	r2, #84	; 0x54
 8000c7e:	2100      	movs	r1, #0
 8000c80:	4618      	mov	r0, r3
 8000c82:	f004 ff57 	bl	8005b34 <memset>
  if(hadc->Instance==ADC1)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c8e:	d13c      	bne.n	8000d0a <HAL_ADC_MspInit+0xaa>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000c90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c94:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000c96:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000c9a:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c9c:	f107 0310 	add.w	r3, r7, #16
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f003 f891 	bl	8003dc8 <HAL_RCCEx_PeriphCLKConfig>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000cac:	f7ff ffae 	bl	8000c0c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000cb0:	4b18      	ldr	r3, [pc, #96]	; (8000d14 <HAL_ADC_MspInit+0xb4>)
 8000cb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb4:	4a17      	ldr	r2, [pc, #92]	; (8000d14 <HAL_ADC_MspInit+0xb4>)
 8000cb6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000cba:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cbc:	4b15      	ldr	r3, [pc, #84]	; (8000d14 <HAL_ADC_MspInit+0xb4>)
 8000cbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cc0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000cc4:	60fb      	str	r3, [r7, #12]
 8000cc6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc8:	4b12      	ldr	r3, [pc, #72]	; (8000d14 <HAL_ADC_MspInit+0xb4>)
 8000cca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ccc:	4a11      	ldr	r2, [pc, #68]	; (8000d14 <HAL_ADC_MspInit+0xb4>)
 8000cce:	f043 0301 	orr.w	r3, r3, #1
 8000cd2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cd4:	4b0f      	ldr	r3, [pc, #60]	; (8000d14 <HAL_ADC_MspInit+0xb4>)
 8000cd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cd8:	f003 0301 	and.w	r3, r3, #1
 8000cdc:	60bb      	str	r3, [r7, #8]
 8000cde:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ce4:	2303      	movs	r3, #3
 8000ce6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cec:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cf6:	f002 f8c1 	bl	8002e7c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	2012      	movs	r0, #18
 8000d00:	f002 f887 	bl	8002e12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000d04:	2012      	movs	r0, #18
 8000d06:	f002 f89e 	bl	8002e46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d0a:	bf00      	nop
 8000d0c:	3778      	adds	r7, #120	; 0x78
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40021000 	.word	0x40021000

08000d18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b09e      	sub	sp, #120	; 0x78
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d20:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	605a      	str	r2, [r3, #4]
 8000d2a:	609a      	str	r2, [r3, #8]
 8000d2c:	60da      	str	r2, [r3, #12]
 8000d2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d30:	f107 0310 	add.w	r3, r7, #16
 8000d34:	2254      	movs	r2, #84	; 0x54
 8000d36:	2100      	movs	r1, #0
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f004 fefb 	bl	8005b34 <memset>
  if(huart->Instance==LPUART1)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a1f      	ldr	r2, [pc, #124]	; (8000dc0 <HAL_UART_MspInit+0xa8>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d136      	bne.n	8000db6 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000d48:	2320      	movs	r3, #32
 8000d4a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d50:	f107 0310 	add.w	r3, r7, #16
 8000d54:	4618      	mov	r0, r3
 8000d56:	f003 f837 	bl	8003dc8 <HAL_RCCEx_PeriphCLKConfig>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d60:	f7ff ff54 	bl	8000c0c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000d64:	4b17      	ldr	r3, [pc, #92]	; (8000dc4 <HAL_UART_MspInit+0xac>)
 8000d66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d68:	4a16      	ldr	r2, [pc, #88]	; (8000dc4 <HAL_UART_MspInit+0xac>)
 8000d6a:	f043 0301 	orr.w	r3, r3, #1
 8000d6e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000d70:	4b14      	ldr	r3, [pc, #80]	; (8000dc4 <HAL_UART_MspInit+0xac>)
 8000d72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d74:	f003 0301 	and.w	r3, r3, #1
 8000d78:	60fb      	str	r3, [r7, #12]
 8000d7a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7c:	4b11      	ldr	r3, [pc, #68]	; (8000dc4 <HAL_UART_MspInit+0xac>)
 8000d7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d80:	4a10      	ldr	r2, [pc, #64]	; (8000dc4 <HAL_UART_MspInit+0xac>)
 8000d82:	f043 0301 	orr.w	r3, r3, #1
 8000d86:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d88:	4b0e      	ldr	r3, [pc, #56]	; (8000dc4 <HAL_UART_MspInit+0xac>)
 8000d8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d8c:	f003 0301 	and.w	r3, r3, #1
 8000d90:	60bb      	str	r3, [r7, #8]
 8000d92:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000d94:	230c      	movs	r3, #12
 8000d96:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da0:	2300      	movs	r3, #0
 8000da2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000da4:	230c      	movs	r3, #12
 8000da6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000dac:	4619      	mov	r1, r3
 8000dae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000db2:	f002 f863 	bl	8002e7c <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000db6:	bf00      	nop
 8000db8:	3778      	adds	r7, #120	; 0x78
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	40008000 	.word	0x40008000
 8000dc4:	40021000 	.word	0x40021000

08000dc8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a1a      	ldr	r2, [pc, #104]	; (8000e40 <HAL_TIM_Base_MspInit+0x78>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d114      	bne.n	8000e04 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000dda:	4b1a      	ldr	r3, [pc, #104]	; (8000e44 <HAL_TIM_Base_MspInit+0x7c>)
 8000ddc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dde:	4a19      	ldr	r2, [pc, #100]	; (8000e44 <HAL_TIM_Base_MspInit+0x7c>)
 8000de0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000de4:	6613      	str	r3, [r2, #96]	; 0x60
 8000de6:	4b17      	ldr	r3, [pc, #92]	; (8000e44 <HAL_TIM_Base_MspInit+0x7c>)
 8000de8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000df2:	2200      	movs	r2, #0
 8000df4:	2100      	movs	r1, #0
 8000df6:	2019      	movs	r0, #25
 8000df8:	f002 f80b 	bl	8002e12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000dfc:	2019      	movs	r0, #25
 8000dfe:	f002 f822 	bl	8002e46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000e02:	e018      	b.n	8000e36 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM2)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e0c:	d113      	bne.n	8000e36 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e0e:	4b0d      	ldr	r3, [pc, #52]	; (8000e44 <HAL_TIM_Base_MspInit+0x7c>)
 8000e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e12:	4a0c      	ldr	r2, [pc, #48]	; (8000e44 <HAL_TIM_Base_MspInit+0x7c>)
 8000e14:	f043 0301 	orr.w	r3, r3, #1
 8000e18:	6593      	str	r3, [r2, #88]	; 0x58
 8000e1a:	4b0a      	ldr	r3, [pc, #40]	; (8000e44 <HAL_TIM_Base_MspInit+0x7c>)
 8000e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e1e:	f003 0301 	and.w	r3, r3, #1
 8000e22:	60bb      	str	r3, [r7, #8]
 8000e24:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e26:	2200      	movs	r2, #0
 8000e28:	2100      	movs	r1, #0
 8000e2a:	201c      	movs	r0, #28
 8000e2c:	f001 fff1 	bl	8002e12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e30:	201c      	movs	r0, #28
 8000e32:	f002 f808 	bl	8002e46 <HAL_NVIC_EnableIRQ>
}
 8000e36:	bf00      	nop
 8000e38:	3710      	adds	r7, #16
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	40012c00 	.word	0x40012c00
 8000e44:	40021000 	.word	0x40021000

08000e48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e4c:	e7fe      	b.n	8000e4c <NMI_Handler+0x4>

08000e4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e52:	e7fe      	b.n	8000e52 <HardFault_Handler+0x4>

08000e54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e58:	e7fe      	b.n	8000e58 <MemManage_Handler+0x4>

08000e5a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e5e:	e7fe      	b.n	8000e5e <BusFault_Handler+0x4>

08000e60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e64:	e7fe      	b.n	8000e64 <UsageFault_Handler+0x4>

08000e66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e66:	b480      	push	{r7}
 8000e68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr

08000e74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e78:	bf00      	nop
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr

08000e82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e82:	b480      	push	{r7}
 8000e84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e86:	bf00      	nop
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr

08000e90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e94:	f000 f8ec 	bl	8001070 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e98:	bf00      	nop
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000ea0:	4802      	ldr	r0, [pc, #8]	; (8000eac <ADC1_2_IRQHandler+0x10>)
 8000ea2:	f000 fe6f 	bl	8001b84 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000ea6:	bf00      	nop
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	20000078 	.word	0x20000078

08000eb0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000eb4:	4802      	ldr	r0, [pc, #8]	; (8000ec0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000eb6:	f003 faa5 	bl	8004404 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	20000174 	.word	0x20000174

08000ec4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ec8:	4802      	ldr	r0, [pc, #8]	; (8000ed4 <TIM2_IRQHandler+0x10>)
 8000eca:	f003 fa9b 	bl	8004404 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	200001c0 	.word	0x200001c0

08000ed8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000edc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ee0:	f002 f966 	bl	80031b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ee4:	bf00      	nop
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b086      	sub	sp, #24
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ef0:	4a14      	ldr	r2, [pc, #80]	; (8000f44 <_sbrk+0x5c>)
 8000ef2:	4b15      	ldr	r3, [pc, #84]	; (8000f48 <_sbrk+0x60>)
 8000ef4:	1ad3      	subs	r3, r2, r3
 8000ef6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000efc:	4b13      	ldr	r3, [pc, #76]	; (8000f4c <_sbrk+0x64>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d102      	bne.n	8000f0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f04:	4b11      	ldr	r3, [pc, #68]	; (8000f4c <_sbrk+0x64>)
 8000f06:	4a12      	ldr	r2, [pc, #72]	; (8000f50 <_sbrk+0x68>)
 8000f08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f0a:	4b10      	ldr	r3, [pc, #64]	; (8000f4c <_sbrk+0x64>)
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4413      	add	r3, r2
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	429a      	cmp	r2, r3
 8000f16:	d207      	bcs.n	8000f28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f18:	f004 fe14 	bl	8005b44 <__errno>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	220c      	movs	r2, #12
 8000f20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f26:	e009      	b.n	8000f3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f28:	4b08      	ldr	r3, [pc, #32]	; (8000f4c <_sbrk+0x64>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f2e:	4b07      	ldr	r3, [pc, #28]	; (8000f4c <_sbrk+0x64>)
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4413      	add	r3, r2
 8000f36:	4a05      	ldr	r2, [pc, #20]	; (8000f4c <_sbrk+0x64>)
 8000f38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f3a:	68fb      	ldr	r3, [r7, #12]
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3718      	adds	r7, #24
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	20020000 	.word	0x20020000
 8000f48:	00000400 	.word	0x00000400
 8000f4c:	20000244 	.word	0x20000244
 8000f50:	20000398 	.word	0x20000398

08000f54 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f58:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <SystemInit+0x20>)
 8000f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f5e:	4a05      	ldr	r2, [pc, #20]	; (8000f74 <SystemInit+0x20>)
 8000f60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f68:	bf00      	nop
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	e000ed00 	.word	0xe000ed00

08000f78 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f78:	480d      	ldr	r0, [pc, #52]	; (8000fb0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f7a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f7c:	480d      	ldr	r0, [pc, #52]	; (8000fb4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f7e:	490e      	ldr	r1, [pc, #56]	; (8000fb8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f80:	4a0e      	ldr	r2, [pc, #56]	; (8000fbc <LoopForever+0xe>)
  movs r3, #0
 8000f82:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000f84:	e002      	b.n	8000f8c <LoopCopyDataInit>

08000f86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f8a:	3304      	adds	r3, #4

08000f8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f90:	d3f9      	bcc.n	8000f86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f92:	4a0b      	ldr	r2, [pc, #44]	; (8000fc0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f94:	4c0b      	ldr	r4, [pc, #44]	; (8000fc4 <LoopForever+0x16>)
  movs r3, #0
 8000f96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f98:	e001      	b.n	8000f9e <LoopFillZerobss>

08000f9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f9c:	3204      	adds	r2, #4

08000f9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fa0:	d3fb      	bcc.n	8000f9a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000fa2:	f7ff ffd7 	bl	8000f54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fa6:	f004 fdd3 	bl	8005b50 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000faa:	f7ff fb07 	bl	80005bc <main>

08000fae <LoopForever>:

LoopForever:
    b LoopForever
 8000fae:	e7fe      	b.n	8000fae <LoopForever>
  ldr   r0, =_estack
 8000fb0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fb8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000fbc:	08006544 	.word	0x08006544
  ldr r2, =_sbss
 8000fc0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000fc4:	20000394 	.word	0x20000394

08000fc8 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fc8:	e7fe      	b.n	8000fc8 <ADC3_IRQHandler>

08000fca <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b082      	sub	sp, #8
 8000fce:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fd4:	2003      	movs	r0, #3
 8000fd6:	f001 ff11 	bl	8002dfc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fda:	2000      	movs	r0, #0
 8000fdc:	f000 f80e 	bl	8000ffc <HAL_InitTick>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d002      	beq.n	8000fec <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	71fb      	strb	r3, [r7, #7]
 8000fea:	e001      	b.n	8000ff0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fec:	f7ff fe14 	bl	8000c18 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ff0:	79fb      	ldrb	r3, [r7, #7]

}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
	...

08000ffc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001004:	2300      	movs	r3, #0
 8001006:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001008:	4b16      	ldr	r3, [pc, #88]	; (8001064 <HAL_InitTick+0x68>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d022      	beq.n	8001056 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001010:	4b15      	ldr	r3, [pc, #84]	; (8001068 <HAL_InitTick+0x6c>)
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	4b13      	ldr	r3, [pc, #76]	; (8001064 <HAL_InitTick+0x68>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800101c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001020:	fbb2 f3f3 	udiv	r3, r2, r3
 8001024:	4618      	mov	r0, r3
 8001026:	f001 ff1c 	bl	8002e62 <HAL_SYSTICK_Config>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d10f      	bne.n	8001050 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2b0f      	cmp	r3, #15
 8001034:	d809      	bhi.n	800104a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001036:	2200      	movs	r2, #0
 8001038:	6879      	ldr	r1, [r7, #4]
 800103a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800103e:	f001 fee8 	bl	8002e12 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001042:	4a0a      	ldr	r2, [pc, #40]	; (800106c <HAL_InitTick+0x70>)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6013      	str	r3, [r2, #0]
 8001048:	e007      	b.n	800105a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800104a:	2301      	movs	r3, #1
 800104c:	73fb      	strb	r3, [r7, #15]
 800104e:	e004      	b.n	800105a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001050:	2301      	movs	r3, #1
 8001052:	73fb      	strb	r3, [r7, #15]
 8001054:	e001      	b.n	800105a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800105a:	7bfb      	ldrb	r3, [r7, #15]
}
 800105c:	4618      	mov	r0, r3
 800105e:	3710      	adds	r7, #16
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	20000008 	.word	0x20000008
 8001068:	20000000 	.word	0x20000000
 800106c:	20000004 	.word	0x20000004

08001070 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001074:	4b05      	ldr	r3, [pc, #20]	; (800108c <HAL_IncTick+0x1c>)
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	4b05      	ldr	r3, [pc, #20]	; (8001090 <HAL_IncTick+0x20>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4413      	add	r3, r2
 800107e:	4a03      	ldr	r2, [pc, #12]	; (800108c <HAL_IncTick+0x1c>)
 8001080:	6013      	str	r3, [r2, #0]
}
 8001082:	bf00      	nop
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	20000248 	.word	0x20000248
 8001090:	20000008 	.word	0x20000008

08001094 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  return uwTick;
 8001098:	4b03      	ldr	r3, [pc, #12]	; (80010a8 <HAL_GetTick+0x14>)
 800109a:	681b      	ldr	r3, [r3, #0]
}
 800109c:	4618      	mov	r0, r3
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	20000248 	.word	0x20000248

080010ac <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	431a      	orrs	r2, r3
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	609a      	str	r2, [r3, #8]
}
 80010c6:	bf00      	nop
 80010c8:	370c      	adds	r7, #12
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr

080010d2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80010d2:	b480      	push	{r7}
 80010d4:	b083      	sub	sp, #12
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
 80010da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	689b      	ldr	r3, [r3, #8]
 80010e0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	431a      	orrs	r2, r3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	609a      	str	r2, [r3, #8]
}
 80010ec:	bf00      	nop
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001108:	4618      	mov	r0, r3
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr

08001114 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001114:	b480      	push	{r7}
 8001116:	b087      	sub	sp, #28
 8001118:	af00      	add	r7, sp, #0
 800111a:	60f8      	str	r0, [r7, #12]
 800111c:	60b9      	str	r1, [r7, #8]
 800111e:	607a      	str	r2, [r7, #4]
 8001120:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	3360      	adds	r3, #96	; 0x60
 8001126:	461a      	mov	r2, r3
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	4413      	add	r3, r2
 800112e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	4b08      	ldr	r3, [pc, #32]	; (8001158 <LL_ADC_SetOffset+0x44>)
 8001136:	4013      	ands	r3, r2
 8001138:	687a      	ldr	r2, [r7, #4]
 800113a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800113e:	683a      	ldr	r2, [r7, #0]
 8001140:	430a      	orrs	r2, r1
 8001142:	4313      	orrs	r3, r2
 8001144:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800114c:	bf00      	nop
 800114e:	371c      	adds	r7, #28
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	03fff000 	.word	0x03fff000

0800115c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800115c:	b480      	push	{r7}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	3360      	adds	r3, #96	; 0x60
 800116a:	461a      	mov	r2, r3
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	4413      	add	r3, r2
 8001172:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800117c:	4618      	mov	r0, r3
 800117e:	3714      	adds	r7, #20
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr

08001188 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001188:	b480      	push	{r7}
 800118a:	b087      	sub	sp, #28
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	3360      	adds	r3, #96	; 0x60
 8001198:	461a      	mov	r2, r3
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	4413      	add	r3, r2
 80011a0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	431a      	orrs	r2, r3
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80011b2:	bf00      	nop
 80011b4:	371c      	adds	r7, #28
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr

080011be <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80011be:	b480      	push	{r7}
 80011c0:	b087      	sub	sp, #28
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	60f8      	str	r0, [r7, #12]
 80011c6:	60b9      	str	r1, [r7, #8]
 80011c8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	3360      	adds	r3, #96	; 0x60
 80011ce:	461a      	mov	r2, r3
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	4413      	add	r3, r2
 80011d6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	431a      	orrs	r2, r3
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80011e8:	bf00      	nop
 80011ea:	371c      	adds	r7, #28
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr

080011f4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b087      	sub	sp, #28
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	60f8      	str	r0, [r7, #12]
 80011fc:	60b9      	str	r1, [r7, #8]
 80011fe:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	3360      	adds	r3, #96	; 0x60
 8001204:	461a      	mov	r2, r3
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	4413      	add	r3, r2
 800120c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	431a      	orrs	r2, r3
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800121e:	bf00      	nop
 8001220:	371c      	adds	r7, #28
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr

0800122a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800122a:	b480      	push	{r7}
 800122c:	b083      	sub	sp, #12
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
 8001232:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	695b      	ldr	r3, [r3, #20]
 8001238:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	431a      	orrs	r2, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	615a      	str	r2, [r3, #20]
}
 8001244:	bf00      	nop
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001260:	2b00      	cmp	r3, #0
 8001262:	d101      	bne.n	8001268 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001264:	2301      	movs	r3, #1
 8001266:	e000      	b.n	800126a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001268:	2300      	movs	r3, #0
}
 800126a:	4618      	mov	r0, r3
 800126c:	370c      	adds	r7, #12
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr

08001276 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001276:	b480      	push	{r7}
 8001278:	b087      	sub	sp, #28
 800127a:	af00      	add	r7, sp, #0
 800127c:	60f8      	str	r0, [r7, #12]
 800127e:	60b9      	str	r1, [r7, #8]
 8001280:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	3330      	adds	r3, #48	; 0x30
 8001286:	461a      	mov	r2, r3
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	0a1b      	lsrs	r3, r3, #8
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	f003 030c 	and.w	r3, r3, #12
 8001292:	4413      	add	r3, r2
 8001294:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	68bb      	ldr	r3, [r7, #8]
 800129c:	f003 031f 	and.w	r3, r3, #31
 80012a0:	211f      	movs	r1, #31
 80012a2:	fa01 f303 	lsl.w	r3, r1, r3
 80012a6:	43db      	mvns	r3, r3
 80012a8:	401a      	ands	r2, r3
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	0e9b      	lsrs	r3, r3, #26
 80012ae:	f003 011f 	and.w	r1, r3, #31
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	f003 031f 	and.w	r3, r3, #31
 80012b8:	fa01 f303 	lsl.w	r3, r1, r3
 80012bc:	431a      	orrs	r2, r3
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80012c2:	bf00      	nop
 80012c4:	371c      	adds	r7, #28
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr

080012ce <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80012ce:	b480      	push	{r7}
 80012d0:	b083      	sub	sp, #12
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012da:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d101      	bne.n	80012e6 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80012e2:	2301      	movs	r3, #1
 80012e4:	e000      	b.n	80012e8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80012e6:	2300      	movs	r3, #0
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b087      	sub	sp, #28
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	3314      	adds	r3, #20
 8001304:	461a      	mov	r2, r3
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	0e5b      	lsrs	r3, r3, #25
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	f003 0304 	and.w	r3, r3, #4
 8001310:	4413      	add	r3, r2
 8001312:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	0d1b      	lsrs	r3, r3, #20
 800131c:	f003 031f 	and.w	r3, r3, #31
 8001320:	2107      	movs	r1, #7
 8001322:	fa01 f303 	lsl.w	r3, r1, r3
 8001326:	43db      	mvns	r3, r3
 8001328:	401a      	ands	r2, r3
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	0d1b      	lsrs	r3, r3, #20
 800132e:	f003 031f 	and.w	r3, r3, #31
 8001332:	6879      	ldr	r1, [r7, #4]
 8001334:	fa01 f303 	lsl.w	r3, r1, r3
 8001338:	431a      	orrs	r2, r3
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800133e:	bf00      	nop
 8001340:	371c      	adds	r7, #28
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
	...

0800134c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800134c:	b480      	push	{r7}
 800134e:	b085      	sub	sp, #20
 8001350:	af00      	add	r7, sp, #0
 8001352:	60f8      	str	r0, [r7, #12]
 8001354:	60b9      	str	r1, [r7, #8]
 8001356:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	4a0f      	ldr	r2, [pc, #60]	; (8001398 <LL_ADC_SetChannelSingleDiff+0x4c>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d10a      	bne.n	8001376 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800136c:	431a      	orrs	r2, r3
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8001374:	e00a      	b.n	800138c <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001382:	43db      	mvns	r3, r3
 8001384:	401a      	ands	r2, r3
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800138c:	bf00      	nop
 800138e:	3714      	adds	r7, #20
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	407f0000 	.word	0x407f0000

0800139c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	f003 031f 	and.w	r3, r3, #31
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	370c      	adds	r7, #12
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80013e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80013e8:	687a      	ldr	r2, [r7, #4]
 80013ea:	6093      	str	r3, [r2, #8]
}
 80013ec:	bf00      	nop
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001408:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800140c:	d101      	bne.n	8001412 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800140e:	2301      	movs	r3, #1
 8001410:	e000      	b.n	8001414 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001412:	2300      	movs	r3, #0
}
 8001414:	4618      	mov	r0, r3
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001430:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001434:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800143c:	bf00      	nop
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001458:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800145c:	d101      	bne.n	8001462 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800145e:	2301      	movs	r3, #1
 8001460:	e000      	b.n	8001464 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001462:	2300      	movs	r3, #0
}
 8001464:	4618      	mov	r0, r3
 8001466:	370c      	adds	r7, #12
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr

08001470 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001480:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001484:	f043 0201 	orr.w	r2, r3, #1
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800148c:	bf00      	nop
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr

08001498 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	f003 0301 	and.w	r3, r3, #1
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d101      	bne.n	80014b0 <LL_ADC_IsEnabled+0x18>
 80014ac:	2301      	movs	r3, #1
 80014ae:	e000      	b.n	80014b2 <LL_ADC_IsEnabled+0x1a>
 80014b0:	2300      	movs	r3, #0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr

080014be <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80014be:	b480      	push	{r7}
 80014c0:	b083      	sub	sp, #12
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80014ce:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014d2:	f043 0204 	orr.w	r2, r3, #4
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80014da:	bf00      	nop
 80014dc:	370c      	adds	r7, #12
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr

080014e6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80014e6:	b480      	push	{r7}
 80014e8:	b083      	sub	sp, #12
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	f003 0304 	and.w	r3, r3, #4
 80014f6:	2b04      	cmp	r3, #4
 80014f8:	d101      	bne.n	80014fe <LL_ADC_REG_IsConversionOngoing+0x18>
 80014fa:	2301      	movs	r3, #1
 80014fc:	e000      	b.n	8001500 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80014fe:	2300      	movs	r3, #0
}
 8001500:	4618      	mov	r0, r3
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	f003 0308 	and.w	r3, r3, #8
 800151c:	2b08      	cmp	r3, #8
 800151e:	d101      	bne.n	8001524 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001520:	2301      	movs	r3, #1
 8001522:	e000      	b.n	8001526 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001524:	2300      	movs	r3, #0
}
 8001526:	4618      	mov	r0, r3
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
	...

08001534 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001534:	b590      	push	{r4, r7, lr}
 8001536:	b089      	sub	sp, #36	; 0x24
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800153c:	2300      	movs	r3, #0
 800153e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001540:	2300      	movs	r3, #0
 8001542:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d101      	bne.n	800154e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e1af      	b.n	80018ae <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	695b      	ldr	r3, [r3, #20]
 8001552:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001558:	2b00      	cmp	r3, #0
 800155a:	d109      	bne.n	8001570 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f7ff fb7f 	bl	8000c60 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2200      	movs	r2, #0
 8001566:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2200      	movs	r2, #0
 800156c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4618      	mov	r0, r3
 8001576:	f7ff ff3f 	bl	80013f8 <LL_ADC_IsDeepPowerDownEnabled>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d004      	beq.n	800158a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff ff25 	bl	80013d4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4618      	mov	r0, r3
 8001590:	f7ff ff5a 	bl	8001448 <LL_ADC_IsInternalRegulatorEnabled>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d115      	bne.n	80015c6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4618      	mov	r0, r3
 80015a0:	f7ff ff3e 	bl	8001420 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80015a4:	4b9f      	ldr	r3, [pc, #636]	; (8001824 <HAL_ADC_Init+0x2f0>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	099b      	lsrs	r3, r3, #6
 80015aa:	4a9f      	ldr	r2, [pc, #636]	; (8001828 <HAL_ADC_Init+0x2f4>)
 80015ac:	fba2 2303 	umull	r2, r3, r2, r3
 80015b0:	099b      	lsrs	r3, r3, #6
 80015b2:	3301      	adds	r3, #1
 80015b4:	005b      	lsls	r3, r3, #1
 80015b6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80015b8:	e002      	b.n	80015c0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	3b01      	subs	r3, #1
 80015be:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d1f9      	bne.n	80015ba <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7ff ff3c 	bl	8001448 <LL_ADC_IsInternalRegulatorEnabled>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d10d      	bne.n	80015f2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015da:	f043 0210 	orr.w	r2, r3, #16
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015e6:	f043 0201 	orr.w	r2, r3, #1
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7ff ff75 	bl	80014e6 <LL_ADC_REG_IsConversionOngoing>
 80015fc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001602:	f003 0310 	and.w	r3, r3, #16
 8001606:	2b00      	cmp	r3, #0
 8001608:	f040 8148 	bne.w	800189c <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	2b00      	cmp	r3, #0
 8001610:	f040 8144 	bne.w	800189c <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001618:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800161c:	f043 0202 	orr.w	r2, r3, #2
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4618      	mov	r0, r3
 800162a:	f7ff ff35 	bl	8001498 <LL_ADC_IsEnabled>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d141      	bne.n	80016b8 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800163c:	d004      	beq.n	8001648 <HAL_ADC_Init+0x114>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a7a      	ldr	r2, [pc, #488]	; (800182c <HAL_ADC_Init+0x2f8>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d10f      	bne.n	8001668 <HAL_ADC_Init+0x134>
 8001648:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800164c:	f7ff ff24 	bl	8001498 <LL_ADC_IsEnabled>
 8001650:	4604      	mov	r4, r0
 8001652:	4876      	ldr	r0, [pc, #472]	; (800182c <HAL_ADC_Init+0x2f8>)
 8001654:	f7ff ff20 	bl	8001498 <LL_ADC_IsEnabled>
 8001658:	4603      	mov	r3, r0
 800165a:	4323      	orrs	r3, r4
 800165c:	2b00      	cmp	r3, #0
 800165e:	bf0c      	ite	eq
 8001660:	2301      	moveq	r3, #1
 8001662:	2300      	movne	r3, #0
 8001664:	b2db      	uxtb	r3, r3
 8001666:	e012      	b.n	800168e <HAL_ADC_Init+0x15a>
 8001668:	4871      	ldr	r0, [pc, #452]	; (8001830 <HAL_ADC_Init+0x2fc>)
 800166a:	f7ff ff15 	bl	8001498 <LL_ADC_IsEnabled>
 800166e:	4604      	mov	r4, r0
 8001670:	4870      	ldr	r0, [pc, #448]	; (8001834 <HAL_ADC_Init+0x300>)
 8001672:	f7ff ff11 	bl	8001498 <LL_ADC_IsEnabled>
 8001676:	4603      	mov	r3, r0
 8001678:	431c      	orrs	r4, r3
 800167a:	486f      	ldr	r0, [pc, #444]	; (8001838 <HAL_ADC_Init+0x304>)
 800167c:	f7ff ff0c 	bl	8001498 <LL_ADC_IsEnabled>
 8001680:	4603      	mov	r3, r0
 8001682:	4323      	orrs	r3, r4
 8001684:	2b00      	cmp	r3, #0
 8001686:	bf0c      	ite	eq
 8001688:	2301      	moveq	r3, #1
 800168a:	2300      	movne	r3, #0
 800168c:	b2db      	uxtb	r3, r3
 800168e:	2b00      	cmp	r3, #0
 8001690:	d012      	beq.n	80016b8 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800169a:	d004      	beq.n	80016a6 <HAL_ADC_Init+0x172>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a62      	ldr	r2, [pc, #392]	; (800182c <HAL_ADC_Init+0x2f8>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d101      	bne.n	80016aa <HAL_ADC_Init+0x176>
 80016a6:	4a65      	ldr	r2, [pc, #404]	; (800183c <HAL_ADC_Init+0x308>)
 80016a8:	e000      	b.n	80016ac <HAL_ADC_Init+0x178>
 80016aa:	4a65      	ldr	r2, [pc, #404]	; (8001840 <HAL_ADC_Init+0x30c>)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	4619      	mov	r1, r3
 80016b2:	4610      	mov	r0, r2
 80016b4:	f7ff fcfa 	bl	80010ac <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	7f5b      	ldrb	r3, [r3, #29]
 80016bc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80016c2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80016c8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80016ce:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80016d6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80016d8:	4313      	orrs	r3, r2
 80016da:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d106      	bne.n	80016f4 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ea:	3b01      	subs	r3, #1
 80016ec:	045b      	lsls	r3, r3, #17
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d009      	beq.n	8001710 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001700:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001708:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800170a:	69ba      	ldr	r2, [r7, #24]
 800170c:	4313      	orrs	r3, r2
 800170e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	68da      	ldr	r2, [r3, #12]
 8001716:	4b4b      	ldr	r3, [pc, #300]	; (8001844 <HAL_ADC_Init+0x310>)
 8001718:	4013      	ands	r3, r2
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	6812      	ldr	r2, [r2, #0]
 800171e:	69b9      	ldr	r1, [r7, #24]
 8001720:	430b      	orrs	r3, r1
 8001722:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	691b      	ldr	r3, [r3, #16]
 800172a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	430a      	orrs	r2, r1
 8001738:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4618      	mov	r0, r3
 8001740:	f7ff fed1 	bl	80014e6 <LL_ADC_REG_IsConversionOngoing>
 8001744:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4618      	mov	r0, r3
 800174c:	f7ff fede 	bl	800150c <LL_ADC_INJ_IsConversionOngoing>
 8001750:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d17f      	bne.n	8001858 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d17c      	bne.n	8001858 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001762:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800176a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800176c:	4313      	orrs	r3, r2
 800176e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	68db      	ldr	r3, [r3, #12]
 8001776:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800177a:	f023 0302 	bic.w	r3, r3, #2
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	6812      	ldr	r2, [r2, #0]
 8001782:	69b9      	ldr	r1, [r7, #24]
 8001784:	430b      	orrs	r3, r1
 8001786:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	691b      	ldr	r3, [r3, #16]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d017      	beq.n	80017c0 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	691a      	ldr	r2, [r3, #16]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800179e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80017a8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80017ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80017b0:	687a      	ldr	r2, [r7, #4]
 80017b2:	6911      	ldr	r1, [r2, #16]
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	6812      	ldr	r2, [r2, #0]
 80017b8:	430b      	orrs	r3, r1
 80017ba:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80017be:	e013      	b.n	80017e8 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	691a      	ldr	r2, [r3, #16]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80017ce:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	6812      	ldr	r2, [r2, #0]
 80017dc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80017e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80017e4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d12a      	bne.n	8001848 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	691b      	ldr	r3, [r3, #16]
 80017f8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80017fc:	f023 0304 	bic.w	r3, r3, #4
 8001800:	687a      	ldr	r2, [r7, #4]
 8001802:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001808:	4311      	orrs	r1, r2
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800180e:	4311      	orrs	r1, r2
 8001810:	687a      	ldr	r2, [r7, #4]
 8001812:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001814:	430a      	orrs	r2, r1
 8001816:	431a      	orrs	r2, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f042 0201 	orr.w	r2, r2, #1
 8001820:	611a      	str	r2, [r3, #16]
 8001822:	e019      	b.n	8001858 <HAL_ADC_Init+0x324>
 8001824:	20000000 	.word	0x20000000
 8001828:	053e2d63 	.word	0x053e2d63
 800182c:	50000100 	.word	0x50000100
 8001830:	50000400 	.word	0x50000400
 8001834:	50000500 	.word	0x50000500
 8001838:	50000600 	.word	0x50000600
 800183c:	50000300 	.word	0x50000300
 8001840:	50000700 	.word	0x50000700
 8001844:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	691a      	ldr	r2, [r3, #16]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f022 0201 	bic.w	r2, r2, #1
 8001856:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	695b      	ldr	r3, [r3, #20]
 800185c:	2b01      	cmp	r3, #1
 800185e:	d10c      	bne.n	800187a <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	f023 010f 	bic.w	r1, r3, #15
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6a1b      	ldr	r3, [r3, #32]
 800186e:	1e5a      	subs	r2, r3, #1
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	430a      	orrs	r2, r1
 8001876:	631a      	str	r2, [r3, #48]	; 0x30
 8001878:	e007      	b.n	800188a <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f022 020f 	bic.w	r2, r2, #15
 8001888:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800188e:	f023 0303 	bic.w	r3, r3, #3
 8001892:	f043 0201 	orr.w	r2, r3, #1
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	65da      	str	r2, [r3, #92]	; 0x5c
 800189a:	e007      	b.n	80018ac <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018a0:	f043 0210 	orr.w	r2, r3, #16
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80018ac:	7ffb      	ldrb	r3, [r7, #31]
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3724      	adds	r7, #36	; 0x24
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd90      	pop	{r4, r7, pc}
 80018b6:	bf00      	nop

080018b8 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b086      	sub	sp, #24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018c8:	d004      	beq.n	80018d4 <HAL_ADC_Start_IT+0x1c>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a92      	ldr	r2, [pc, #584]	; (8001b18 <HAL_ADC_Start_IT+0x260>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d101      	bne.n	80018d8 <HAL_ADC_Start_IT+0x20>
 80018d4:	4b91      	ldr	r3, [pc, #580]	; (8001b1c <HAL_ADC_Start_IT+0x264>)
 80018d6:	e000      	b.n	80018da <HAL_ADC_Start_IT+0x22>
 80018d8:	4b91      	ldr	r3, [pc, #580]	; (8001b20 <HAL_ADC_Start_IT+0x268>)
 80018da:	4618      	mov	r0, r3
 80018dc:	f7ff fd5e 	bl	800139c <LL_ADC_GetMultimode>
 80018e0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7ff fdfd 	bl	80014e6 <LL_ADC_REG_IsConversionOngoing>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	f040 8132 	bne.w	8001b58 <HAL_ADC_Start_IT+0x2a0>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d101      	bne.n	8001902 <HAL_ADC_Start_IT+0x4a>
 80018fe:	2302      	movs	r3, #2
 8001900:	e12d      	b.n	8001b5e <HAL_ADC_Start_IT+0x2a6>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2201      	movs	r2, #1
 8001906:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f000 ffee 	bl	80028ec <ADC_Enable>
 8001910:	4603      	mov	r3, r0
 8001912:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001914:	7dfb      	ldrb	r3, [r7, #23]
 8001916:	2b00      	cmp	r3, #0
 8001918:	f040 8119 	bne.w	8001b4e <HAL_ADC_Start_IT+0x296>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001920:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001924:	f023 0301 	bic.w	r3, r3, #1
 8001928:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a78      	ldr	r2, [pc, #480]	; (8001b18 <HAL_ADC_Start_IT+0x260>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d009      	beq.n	800194e <HAL_ADC_Start_IT+0x96>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a79      	ldr	r2, [pc, #484]	; (8001b24 <HAL_ADC_Start_IT+0x26c>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d002      	beq.n	800194a <HAL_ADC_Start_IT+0x92>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	e003      	b.n	8001952 <HAL_ADC_Start_IT+0x9a>
 800194a:	4b77      	ldr	r3, [pc, #476]	; (8001b28 <HAL_ADC_Start_IT+0x270>)
 800194c:	e001      	b.n	8001952 <HAL_ADC_Start_IT+0x9a>
 800194e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	6812      	ldr	r2, [r2, #0]
 8001956:	4293      	cmp	r3, r2
 8001958:	d002      	beq.n	8001960 <HAL_ADC_Start_IT+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d105      	bne.n	800196c <HAL_ADC_Start_IT+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001964:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001970:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001974:	2b00      	cmp	r3, #0
 8001976:	d006      	beq.n	8001986 <HAL_ADC_Start_IT+0xce>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800197c:	f023 0206 	bic.w	r2, r3, #6
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	661a      	str	r2, [r3, #96]	; 0x60
 8001984:	e002      	b.n	800198c <HAL_ADC_Start_IT+0xd4>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2200      	movs	r2, #0
 800198a:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	221c      	movs	r2, #28
 8001992:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2200      	movs	r2, #0
 8001998:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	685a      	ldr	r2, [r3, #4]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f022 021c 	bic.w	r2, r2, #28
 80019aa:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	699b      	ldr	r3, [r3, #24]
 80019b0:	2b08      	cmp	r3, #8
 80019b2:	d108      	bne.n	80019c6 <HAL_ADC_Start_IT+0x10e>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	685a      	ldr	r2, [r3, #4]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f042 0208 	orr.w	r2, r2, #8
 80019c2:	605a      	str	r2, [r3, #4]
          break;
 80019c4:	e008      	b.n	80019d8 <HAL_ADC_Start_IT+0x120>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	685a      	ldr	r2, [r3, #4]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f042 0204 	orr.w	r2, r2, #4
 80019d4:	605a      	str	r2, [r3, #4]
          break;
 80019d6:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d107      	bne.n	80019f0 <HAL_ADC_Start_IT+0x138>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	685a      	ldr	r2, [r3, #4]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f042 0210 	orr.w	r2, r2, #16
 80019ee:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a48      	ldr	r2, [pc, #288]	; (8001b18 <HAL_ADC_Start_IT+0x260>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d009      	beq.n	8001a0e <HAL_ADC_Start_IT+0x156>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a49      	ldr	r2, [pc, #292]	; (8001b24 <HAL_ADC_Start_IT+0x26c>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d002      	beq.n	8001a0a <HAL_ADC_Start_IT+0x152>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	e003      	b.n	8001a12 <HAL_ADC_Start_IT+0x15a>
 8001a0a:	4b47      	ldr	r3, [pc, #284]	; (8001b28 <HAL_ADC_Start_IT+0x270>)
 8001a0c:	e001      	b.n	8001a12 <HAL_ADC_Start_IT+0x15a>
 8001a0e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	6812      	ldr	r2, [r2, #0]
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d008      	beq.n	8001a2c <HAL_ADC_Start_IT+0x174>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d005      	beq.n	8001a2c <HAL_ADC_Start_IT+0x174>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	2b05      	cmp	r3, #5
 8001a24:	d002      	beq.n	8001a2c <HAL_ADC_Start_IT+0x174>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	2b09      	cmp	r3, #9
 8001a2a:	d13a      	bne.n	8001aa2 <HAL_ADC_Start_IT+0x1ea>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	68db      	ldr	r3, [r3, #12]
 8001a32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d02d      	beq.n	8001a96 <HAL_ADC_Start_IT+0x1de>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a3e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a42:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	699b      	ldr	r3, [r3, #24]
 8001a4e:	2b08      	cmp	r3, #8
 8001a50:	d110      	bne.n	8001a74 <HAL_ADC_Start_IT+0x1bc>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	685a      	ldr	r2, [r3, #4]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f022 0220 	bic.w	r2, r2, #32
 8001a60:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	685a      	ldr	r2, [r3, #4]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a70:	605a      	str	r2, [r3, #4]
              break;
 8001a72:	e010      	b.n	8001a96 <HAL_ADC_Start_IT+0x1de>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	685a      	ldr	r2, [r3, #4]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a82:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	685a      	ldr	r2, [r3, #4]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f042 0220 	orr.w	r2, r2, #32
 8001a92:	605a      	str	r2, [r3, #4]
              break;
 8001a94:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7ff fd0f 	bl	80014be <LL_ADC_REG_StartConversion>
 8001aa0:	e05c      	b.n	8001b5c <HAL_ADC_Start_IT+0x2a4>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aa6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a19      	ldr	r2, [pc, #100]	; (8001b18 <HAL_ADC_Start_IT+0x260>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d009      	beq.n	8001acc <HAL_ADC_Start_IT+0x214>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a19      	ldr	r2, [pc, #100]	; (8001b24 <HAL_ADC_Start_IT+0x26c>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d002      	beq.n	8001ac8 <HAL_ADC_Start_IT+0x210>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	e003      	b.n	8001ad0 <HAL_ADC_Start_IT+0x218>
 8001ac8:	4b17      	ldr	r3, [pc, #92]	; (8001b28 <HAL_ADC_Start_IT+0x270>)
 8001aca:	e001      	b.n	8001ad0 <HAL_ADC_Start_IT+0x218>
 8001acc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001ad0:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	68db      	ldr	r3, [r3, #12]
 8001ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d03e      	beq.n	8001b5c <HAL_ADC_Start_IT+0x2a4>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ae2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ae6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	65da      	str	r2, [r3, #92]	; 0x5c
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	699b      	ldr	r3, [r3, #24]
 8001af2:	2b08      	cmp	r3, #8
 8001af4:	d11a      	bne.n	8001b2c <HAL_ADC_Start_IT+0x274>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	685a      	ldr	r2, [r3, #4]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f022 0220 	bic.w	r2, r2, #32
 8001b04:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	685a      	ldr	r2, [r3, #4]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b14:	605a      	str	r2, [r3, #4]
              break;
 8001b16:	e021      	b.n	8001b5c <HAL_ADC_Start_IT+0x2a4>
 8001b18:	50000100 	.word	0x50000100
 8001b1c:	50000300 	.word	0x50000300
 8001b20:	50000700 	.word	0x50000700
 8001b24:	50000500 	.word	0x50000500
 8001b28:	50000400 	.word	0x50000400
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	685a      	ldr	r2, [r3, #4]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b3a:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	685a      	ldr	r2, [r3, #4]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f042 0220 	orr.w	r2, r2, #32
 8001b4a:	605a      	str	r2, [r3, #4]
              break;
 8001b4c:	e006      	b.n	8001b5c <HAL_ADC_Start_IT+0x2a4>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2200      	movs	r2, #0
 8001b52:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8001b56:	e001      	b.n	8001b5c <HAL_ADC_Start_IT+0x2a4>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001b58:	2302      	movs	r3, #2
 8001b5a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001b5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3718      	adds	r7, #24
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop

08001b68 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	370c      	adds	r7, #12
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
	...

08001b84 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b08a      	sub	sp, #40	; 0x28
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ba8:	d004      	beq.n	8001bb4 <HAL_ADC_IRQHandler+0x30>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a8e      	ldr	r2, [pc, #568]	; (8001de8 <HAL_ADC_IRQHandler+0x264>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d101      	bne.n	8001bb8 <HAL_ADC_IRQHandler+0x34>
 8001bb4:	4b8d      	ldr	r3, [pc, #564]	; (8001dec <HAL_ADC_IRQHandler+0x268>)
 8001bb6:	e000      	b.n	8001bba <HAL_ADC_IRQHandler+0x36>
 8001bb8:	4b8d      	ldr	r3, [pc, #564]	; (8001df0 <HAL_ADC_IRQHandler+0x26c>)
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7ff fbee 	bl	800139c <LL_ADC_GetMultimode>
 8001bc0:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	f003 0302 	and.w	r3, r3, #2
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d017      	beq.n	8001bfc <HAL_ADC_IRQHandler+0x78>
 8001bcc:	69bb      	ldr	r3, [r7, #24]
 8001bce:	f003 0302 	and.w	r3, r3, #2
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d012      	beq.n	8001bfc <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bda:	f003 0310 	and.w	r3, r3, #16
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d105      	bne.n	8001bee <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001be6:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f7fe ff82 	bl	8000af8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2202      	movs	r2, #2
 8001bfa:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	f003 0304 	and.w	r3, r3, #4
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d004      	beq.n	8001c10 <HAL_ADC_IRQHandler+0x8c>
 8001c06:	69bb      	ldr	r3, [r7, #24]
 8001c08:	f003 0304 	and.w	r3, r3, #4
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d10b      	bne.n	8001c28 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	f000 8094 	beq.w	8001d44 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001c1c:	69bb      	ldr	r3, [r7, #24]
 8001c1e:	f003 0308 	and.w	r3, r3, #8
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	f000 808e 	beq.w	8001d44 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c2c:	f003 0310 	and.w	r3, r3, #16
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d105      	bne.n	8001c40 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c38:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7ff fb03 	bl	8001250 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d072      	beq.n	8001d36 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a64      	ldr	r2, [pc, #400]	; (8001de8 <HAL_ADC_IRQHandler+0x264>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d009      	beq.n	8001c6e <HAL_ADC_IRQHandler+0xea>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a65      	ldr	r2, [pc, #404]	; (8001df4 <HAL_ADC_IRQHandler+0x270>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d002      	beq.n	8001c6a <HAL_ADC_IRQHandler+0xe6>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	e003      	b.n	8001c72 <HAL_ADC_IRQHandler+0xee>
 8001c6a:	4b63      	ldr	r3, [pc, #396]	; (8001df8 <HAL_ADC_IRQHandler+0x274>)
 8001c6c:	e001      	b.n	8001c72 <HAL_ADC_IRQHandler+0xee>
 8001c6e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	6812      	ldr	r2, [r2, #0]
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d008      	beq.n	8001c8c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d005      	beq.n	8001c8c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	2b05      	cmp	r3, #5
 8001c84:	d002      	beq.n	8001c8c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	2b09      	cmp	r3, #9
 8001c8a:	d104      	bne.n	8001c96 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	68db      	ldr	r3, [r3, #12]
 8001c92:	623b      	str	r3, [r7, #32]
 8001c94:	e014      	b.n	8001cc0 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a53      	ldr	r2, [pc, #332]	; (8001de8 <HAL_ADC_IRQHandler+0x264>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d009      	beq.n	8001cb4 <HAL_ADC_IRQHandler+0x130>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a53      	ldr	r2, [pc, #332]	; (8001df4 <HAL_ADC_IRQHandler+0x270>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d002      	beq.n	8001cb0 <HAL_ADC_IRQHandler+0x12c>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	e003      	b.n	8001cb8 <HAL_ADC_IRQHandler+0x134>
 8001cb0:	4b51      	ldr	r3, [pc, #324]	; (8001df8 <HAL_ADC_IRQHandler+0x274>)
 8001cb2:	e001      	b.n	8001cb8 <HAL_ADC_IRQHandler+0x134>
 8001cb4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001cb8:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	68db      	ldr	r3, [r3, #12]
 8001cbe:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001cc0:	6a3b      	ldr	r3, [r7, #32]
 8001cc2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d135      	bne.n	8001d36 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0308 	and.w	r3, r3, #8
 8001cd4:	2b08      	cmp	r3, #8
 8001cd6:	d12e      	bne.n	8001d36 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7ff fc02 	bl	80014e6 <LL_ADC_REG_IsConversionOngoing>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d11a      	bne.n	8001d1e <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	685a      	ldr	r2, [r3, #4]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f022 020c 	bic.w	r2, r2, #12
 8001cf6:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cfc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d112      	bne.n	8001d36 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d14:	f043 0201 	orr.w	r2, r3, #1
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	65da      	str	r2, [r3, #92]	; 0x5c
 8001d1c:	e00b      	b.n	8001d36 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d22:	f043 0210 	orr.w	r2, r3, #16
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d2e:	f043 0201 	orr.w	r2, r3, #1
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f7fe ff04 	bl	8000b44 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	220c      	movs	r2, #12
 8001d42:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	f003 0320 	and.w	r3, r3, #32
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d004      	beq.n	8001d58 <HAL_ADC_IRQHandler+0x1d4>
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	f003 0320 	and.w	r3, r3, #32
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d10b      	bne.n	8001d70 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	f000 80b3 	beq.w	8001eca <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	f000 80ad 	beq.w	8001eca <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d74:	f003 0310 	and.w	r3, r3, #16
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d105      	bne.n	8001d88 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d80:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7ff fa9e 	bl	80012ce <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001d92:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7ff fa59 	bl	8001250 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001d9e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a10      	ldr	r2, [pc, #64]	; (8001de8 <HAL_ADC_IRQHandler+0x264>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d009      	beq.n	8001dbe <HAL_ADC_IRQHandler+0x23a>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a11      	ldr	r2, [pc, #68]	; (8001df4 <HAL_ADC_IRQHandler+0x270>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d002      	beq.n	8001dba <HAL_ADC_IRQHandler+0x236>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	e003      	b.n	8001dc2 <HAL_ADC_IRQHandler+0x23e>
 8001dba:	4b0f      	ldr	r3, [pc, #60]	; (8001df8 <HAL_ADC_IRQHandler+0x274>)
 8001dbc:	e001      	b.n	8001dc2 <HAL_ADC_IRQHandler+0x23e>
 8001dbe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	6812      	ldr	r2, [r2, #0]
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d008      	beq.n	8001ddc <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d005      	beq.n	8001ddc <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	2b06      	cmp	r3, #6
 8001dd4:	d002      	beq.n	8001ddc <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	2b07      	cmp	r3, #7
 8001dda:	d10f      	bne.n	8001dfc <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	68db      	ldr	r3, [r3, #12]
 8001de2:	623b      	str	r3, [r7, #32]
 8001de4:	e01f      	b.n	8001e26 <HAL_ADC_IRQHandler+0x2a2>
 8001de6:	bf00      	nop
 8001de8:	50000100 	.word	0x50000100
 8001dec:	50000300 	.word	0x50000300
 8001df0:	50000700 	.word	0x50000700
 8001df4:	50000500 	.word	0x50000500
 8001df8:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a8b      	ldr	r2, [pc, #556]	; (8002030 <HAL_ADC_IRQHandler+0x4ac>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d009      	beq.n	8001e1a <HAL_ADC_IRQHandler+0x296>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a8a      	ldr	r2, [pc, #552]	; (8002034 <HAL_ADC_IRQHandler+0x4b0>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d002      	beq.n	8001e16 <HAL_ADC_IRQHandler+0x292>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	e003      	b.n	8001e1e <HAL_ADC_IRQHandler+0x29a>
 8001e16:	4b88      	ldr	r3, [pc, #544]	; (8002038 <HAL_ADC_IRQHandler+0x4b4>)
 8001e18:	e001      	b.n	8001e1e <HAL_ADC_IRQHandler+0x29a>
 8001e1a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001e1e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d047      	beq.n	8001ebc <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001e2c:	6a3b      	ldr	r3, [r7, #32]
 8001e2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d007      	beq.n	8001e46 <HAL_ADC_IRQHandler+0x2c2>
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d03f      	beq.n	8001ebc <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001e3c:	6a3b      	ldr	r3, [r7, #32]
 8001e3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d13a      	bne.n	8001ebc <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e50:	2b40      	cmp	r3, #64	; 0x40
 8001e52:	d133      	bne.n	8001ebc <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001e54:	6a3b      	ldr	r3, [r7, #32]
 8001e56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d12e      	bne.n	8001ebc <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7ff fb52 	bl	800150c <LL_ADC_INJ_IsConversionOngoing>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d11a      	bne.n	8001ea4 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	685a      	ldr	r2, [r3, #4]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001e7c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d112      	bne.n	8001ebc <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e9a:	f043 0201 	orr.w	r2, r3, #1
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	65da      	str	r2, [r3, #92]	; 0x5c
 8001ea2:	e00b      	b.n	8001ebc <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ea8:	f043 0210 	orr.w	r2, r3, #16
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eb4:	f043 0201 	orr.w	r2, r3, #1
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f000 fd9d 	bl	80029fc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	2260      	movs	r2, #96	; 0x60
 8001ec8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d011      	beq.n	8001ef8 <HAL_ADC_IRQHandler+0x374>
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d00c      	beq.n	8001ef8 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ee2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f000 f8aa 	bl	8002044 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2280      	movs	r2, #128	; 0x80
 8001ef6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d012      	beq.n	8001f28 <HAL_ADC_IRQHandler+0x3a4>
 8001f02:	69bb      	ldr	r3, [r7, #24]
 8001f04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d00d      	beq.n	8001f28 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f10:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f000 fd83 	bl	8002a24 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f26:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d012      	beq.n	8001f58 <HAL_ADC_IRQHandler+0x3d4>
 8001f32:	69bb      	ldr	r3, [r7, #24]
 8001f34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d00d      	beq.n	8001f58 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f40:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f000 fd75 	bl	8002a38 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f56:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	f003 0310 	and.w	r3, r3, #16
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d043      	beq.n	8001fea <HAL_ADC_IRQHandler+0x466>
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	f003 0310 	and.w	r3, r3, #16
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d03e      	beq.n	8001fea <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d102      	bne.n	8001f7a <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8001f74:	2301      	movs	r3, #1
 8001f76:	627b      	str	r3, [r7, #36]	; 0x24
 8001f78:	e021      	b.n	8001fbe <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d015      	beq.n	8001fac <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f88:	d004      	beq.n	8001f94 <HAL_ADC_IRQHandler+0x410>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a28      	ldr	r2, [pc, #160]	; (8002030 <HAL_ADC_IRQHandler+0x4ac>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d101      	bne.n	8001f98 <HAL_ADC_IRQHandler+0x414>
 8001f94:	4b29      	ldr	r3, [pc, #164]	; (800203c <HAL_ADC_IRQHandler+0x4b8>)
 8001f96:	e000      	b.n	8001f9a <HAL_ADC_IRQHandler+0x416>
 8001f98:	4b29      	ldr	r3, [pc, #164]	; (8002040 <HAL_ADC_IRQHandler+0x4bc>)
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7ff fa0c 	bl	80013b8 <LL_ADC_GetMultiDMATransfer>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d00b      	beq.n	8001fbe <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	627b      	str	r3, [r7, #36]	; 0x24
 8001faa:	e008      	b.n	8001fbe <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8001fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d10e      	bne.n	8001fe2 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fc8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fd4:	f043 0202 	orr.w	r2, r3, #2
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f000 f83b 	bl	8002058 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	2210      	movs	r2, #16
 8001fe8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d018      	beq.n	8002026 <HAL_ADC_IRQHandler+0x4a2>
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d013      	beq.n	8002026 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002002:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800200e:	f043 0208 	orr.w	r2, r3, #8
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800201e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f000 fcf5 	bl	8002a10 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002026:	bf00      	nop
 8002028:	3728      	adds	r7, #40	; 0x28
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	50000100 	.word	0x50000100
 8002034:	50000500 	.word	0x50000500
 8002038:	50000400 	.word	0x50000400
 800203c:	50000300 	.word	0x50000300
 8002040:	50000700 	.word	0x50000700

08002044 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800204c:	bf00      	nop
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002060:	bf00      	nop
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b0b6      	sub	sp, #216	; 0xd8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002076:	2300      	movs	r3, #0
 8002078:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800207c:	2300      	movs	r3, #0
 800207e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002086:	2b01      	cmp	r3, #1
 8002088:	d102      	bne.n	8002090 <HAL_ADC_ConfigChannel+0x24>
 800208a:	2302      	movs	r3, #2
 800208c:	f000 bc13 	b.w	80028b6 <HAL_ADC_ConfigChannel+0x84a>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2201      	movs	r2, #1
 8002094:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4618      	mov	r0, r3
 800209e:	f7ff fa22 	bl	80014e6 <LL_ADC_REG_IsConversionOngoing>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	f040 83f3 	bne.w	8002890 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6818      	ldr	r0, [r3, #0]
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	6859      	ldr	r1, [r3, #4]
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	461a      	mov	r2, r3
 80020b8:	f7ff f8dd 	bl	8001276 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7ff fa10 	bl	80014e6 <LL_ADC_REG_IsConversionOngoing>
 80020c6:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7ff fa1c 	bl	800150c <LL_ADC_INJ_IsConversionOngoing>
 80020d4:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80020d8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	f040 81d9 	bne.w	8002494 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80020e2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	f040 81d4 	bne.w	8002494 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80020f4:	d10f      	bne.n	8002116 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6818      	ldr	r0, [r3, #0]
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	2200      	movs	r2, #0
 8002100:	4619      	mov	r1, r3
 8002102:	f7ff f8f7 	bl	80012f4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800210e:	4618      	mov	r0, r3
 8002110:	f7ff f88b 	bl	800122a <LL_ADC_SetSamplingTimeCommonConfig>
 8002114:	e00e      	b.n	8002134 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6818      	ldr	r0, [r3, #0]
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	6819      	ldr	r1, [r3, #0]
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	461a      	mov	r2, r3
 8002124:	f7ff f8e6 	bl	80012f4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	2100      	movs	r1, #0
 800212e:	4618      	mov	r0, r3
 8002130:	f7ff f87b 	bl	800122a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	695a      	ldr	r2, [r3, #20]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	08db      	lsrs	r3, r3, #3
 8002140:	f003 0303 	and.w	r3, r3, #3
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	fa02 f303 	lsl.w	r3, r2, r3
 800214a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	691b      	ldr	r3, [r3, #16]
 8002152:	2b04      	cmp	r3, #4
 8002154:	d022      	beq.n	800219c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6818      	ldr	r0, [r3, #0]
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	6919      	ldr	r1, [r3, #16]
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002166:	f7fe ffd5 	bl	8001114 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6818      	ldr	r0, [r3, #0]
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	6919      	ldr	r1, [r3, #16]
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	699b      	ldr	r3, [r3, #24]
 8002176:	461a      	mov	r2, r3
 8002178:	f7ff f821 	bl	80011be <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6818      	ldr	r0, [r3, #0]
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	6919      	ldr	r1, [r3, #16]
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	7f1b      	ldrb	r3, [r3, #28]
 8002188:	2b01      	cmp	r3, #1
 800218a:	d102      	bne.n	8002192 <HAL_ADC_ConfigChannel+0x126>
 800218c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002190:	e000      	b.n	8002194 <HAL_ADC_ConfigChannel+0x128>
 8002192:	2300      	movs	r3, #0
 8002194:	461a      	mov	r2, r3
 8002196:	f7ff f82d 	bl	80011f4 <LL_ADC_SetOffsetSaturation>
 800219a:	e17b      	b.n	8002494 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2100      	movs	r1, #0
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7fe ffda 	bl	800115c <LL_ADC_GetOffsetChannel>
 80021a8:	4603      	mov	r3, r0
 80021aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d10a      	bne.n	80021c8 <HAL_ADC_ConfigChannel+0x15c>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	2100      	movs	r1, #0
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7fe ffcf 	bl	800115c <LL_ADC_GetOffsetChannel>
 80021be:	4603      	mov	r3, r0
 80021c0:	0e9b      	lsrs	r3, r3, #26
 80021c2:	f003 021f 	and.w	r2, r3, #31
 80021c6:	e01e      	b.n	8002206 <HAL_ADC_ConfigChannel+0x19a>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2100      	movs	r1, #0
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7fe ffc4 	bl	800115c <LL_ADC_GetOffsetChannel>
 80021d4:	4603      	mov	r3, r0
 80021d6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021da:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80021de:	fa93 f3a3 	rbit	r3, r3
 80021e2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80021e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80021ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80021ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d101      	bne.n	80021fa <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80021f6:	2320      	movs	r3, #32
 80021f8:	e004      	b.n	8002204 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80021fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80021fe:	fab3 f383 	clz	r3, r3
 8002202:	b2db      	uxtb	r3, r3
 8002204:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800220e:	2b00      	cmp	r3, #0
 8002210:	d105      	bne.n	800221e <HAL_ADC_ConfigChannel+0x1b2>
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	0e9b      	lsrs	r3, r3, #26
 8002218:	f003 031f 	and.w	r3, r3, #31
 800221c:	e018      	b.n	8002250 <HAL_ADC_ConfigChannel+0x1e4>
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002226:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800222a:	fa93 f3a3 	rbit	r3, r3
 800222e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002232:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002236:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800223a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800223e:	2b00      	cmp	r3, #0
 8002240:	d101      	bne.n	8002246 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002242:	2320      	movs	r3, #32
 8002244:	e004      	b.n	8002250 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002246:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800224a:	fab3 f383 	clz	r3, r3
 800224e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002250:	429a      	cmp	r2, r3
 8002252:	d106      	bne.n	8002262 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2200      	movs	r2, #0
 800225a:	2100      	movs	r1, #0
 800225c:	4618      	mov	r0, r3
 800225e:	f7fe ff93 	bl	8001188 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2101      	movs	r1, #1
 8002268:	4618      	mov	r0, r3
 800226a:	f7fe ff77 	bl	800115c <LL_ADC_GetOffsetChannel>
 800226e:	4603      	mov	r3, r0
 8002270:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002274:	2b00      	cmp	r3, #0
 8002276:	d10a      	bne.n	800228e <HAL_ADC_ConfigChannel+0x222>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2101      	movs	r1, #1
 800227e:	4618      	mov	r0, r3
 8002280:	f7fe ff6c 	bl	800115c <LL_ADC_GetOffsetChannel>
 8002284:	4603      	mov	r3, r0
 8002286:	0e9b      	lsrs	r3, r3, #26
 8002288:	f003 021f 	and.w	r2, r3, #31
 800228c:	e01e      	b.n	80022cc <HAL_ADC_ConfigChannel+0x260>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	2101      	movs	r1, #1
 8002294:	4618      	mov	r0, r3
 8002296:	f7fe ff61 	bl	800115c <LL_ADC_GetOffsetChannel>
 800229a:	4603      	mov	r3, r0
 800229c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80022a4:	fa93 f3a3 	rbit	r3, r3
 80022a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80022ac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80022b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80022b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d101      	bne.n	80022c0 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80022bc:	2320      	movs	r3, #32
 80022be:	e004      	b.n	80022ca <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80022c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80022c4:	fab3 f383 	clz	r3, r3
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d105      	bne.n	80022e4 <HAL_ADC_ConfigChannel+0x278>
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	0e9b      	lsrs	r3, r3, #26
 80022de:	f003 031f 	and.w	r3, r3, #31
 80022e2:	e018      	b.n	8002316 <HAL_ADC_ConfigChannel+0x2aa>
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80022f0:	fa93 f3a3 	rbit	r3, r3
 80022f4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80022f8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80022fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002300:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002304:	2b00      	cmp	r3, #0
 8002306:	d101      	bne.n	800230c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002308:	2320      	movs	r3, #32
 800230a:	e004      	b.n	8002316 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800230c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002310:	fab3 f383 	clz	r3, r3
 8002314:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002316:	429a      	cmp	r2, r3
 8002318:	d106      	bne.n	8002328 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2200      	movs	r2, #0
 8002320:	2101      	movs	r1, #1
 8002322:	4618      	mov	r0, r3
 8002324:	f7fe ff30 	bl	8001188 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2102      	movs	r1, #2
 800232e:	4618      	mov	r0, r3
 8002330:	f7fe ff14 	bl	800115c <LL_ADC_GetOffsetChannel>
 8002334:	4603      	mov	r3, r0
 8002336:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800233a:	2b00      	cmp	r3, #0
 800233c:	d10a      	bne.n	8002354 <HAL_ADC_ConfigChannel+0x2e8>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	2102      	movs	r1, #2
 8002344:	4618      	mov	r0, r3
 8002346:	f7fe ff09 	bl	800115c <LL_ADC_GetOffsetChannel>
 800234a:	4603      	mov	r3, r0
 800234c:	0e9b      	lsrs	r3, r3, #26
 800234e:	f003 021f 	and.w	r2, r3, #31
 8002352:	e01e      	b.n	8002392 <HAL_ADC_ConfigChannel+0x326>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2102      	movs	r1, #2
 800235a:	4618      	mov	r0, r3
 800235c:	f7fe fefe 	bl	800115c <LL_ADC_GetOffsetChannel>
 8002360:	4603      	mov	r3, r0
 8002362:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002366:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800236a:	fa93 f3a3 	rbit	r3, r3
 800236e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002372:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002376:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800237a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800237e:	2b00      	cmp	r3, #0
 8002380:	d101      	bne.n	8002386 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002382:	2320      	movs	r3, #32
 8002384:	e004      	b.n	8002390 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002386:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800238a:	fab3 f383 	clz	r3, r3
 800238e:	b2db      	uxtb	r3, r3
 8002390:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800239a:	2b00      	cmp	r3, #0
 800239c:	d105      	bne.n	80023aa <HAL_ADC_ConfigChannel+0x33e>
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	0e9b      	lsrs	r3, r3, #26
 80023a4:	f003 031f 	and.w	r3, r3, #31
 80023a8:	e016      	b.n	80023d8 <HAL_ADC_ConfigChannel+0x36c>
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80023b6:	fa93 f3a3 	rbit	r3, r3
 80023ba:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80023bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80023be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80023c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d101      	bne.n	80023ce <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80023ca:	2320      	movs	r3, #32
 80023cc:	e004      	b.n	80023d8 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80023ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80023d2:	fab3 f383 	clz	r3, r3
 80023d6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80023d8:	429a      	cmp	r2, r3
 80023da:	d106      	bne.n	80023ea <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2200      	movs	r2, #0
 80023e2:	2102      	movs	r1, #2
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7fe fecf 	bl	8001188 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	2103      	movs	r1, #3
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7fe feb3 	bl	800115c <LL_ADC_GetOffsetChannel>
 80023f6:	4603      	mov	r3, r0
 80023f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d10a      	bne.n	8002416 <HAL_ADC_ConfigChannel+0x3aa>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2103      	movs	r1, #3
 8002406:	4618      	mov	r0, r3
 8002408:	f7fe fea8 	bl	800115c <LL_ADC_GetOffsetChannel>
 800240c:	4603      	mov	r3, r0
 800240e:	0e9b      	lsrs	r3, r3, #26
 8002410:	f003 021f 	and.w	r2, r3, #31
 8002414:	e017      	b.n	8002446 <HAL_ADC_ConfigChannel+0x3da>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	2103      	movs	r1, #3
 800241c:	4618      	mov	r0, r3
 800241e:	f7fe fe9d 	bl	800115c <LL_ADC_GetOffsetChannel>
 8002422:	4603      	mov	r3, r0
 8002424:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002426:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002428:	fa93 f3a3 	rbit	r3, r3
 800242c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800242e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002430:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002432:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002434:	2b00      	cmp	r3, #0
 8002436:	d101      	bne.n	800243c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002438:	2320      	movs	r3, #32
 800243a:	e003      	b.n	8002444 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800243c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800243e:	fab3 f383 	clz	r3, r3
 8002442:	b2db      	uxtb	r3, r3
 8002444:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800244e:	2b00      	cmp	r3, #0
 8002450:	d105      	bne.n	800245e <HAL_ADC_ConfigChannel+0x3f2>
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	0e9b      	lsrs	r3, r3, #26
 8002458:	f003 031f 	and.w	r3, r3, #31
 800245c:	e011      	b.n	8002482 <HAL_ADC_ConfigChannel+0x416>
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002464:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002466:	fa93 f3a3 	rbit	r3, r3
 800246a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800246c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800246e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002470:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002472:	2b00      	cmp	r3, #0
 8002474:	d101      	bne.n	800247a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002476:	2320      	movs	r3, #32
 8002478:	e003      	b.n	8002482 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800247a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800247c:	fab3 f383 	clz	r3, r3
 8002480:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002482:	429a      	cmp	r2, r3
 8002484:	d106      	bne.n	8002494 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2200      	movs	r2, #0
 800248c:	2103      	movs	r1, #3
 800248e:	4618      	mov	r0, r3
 8002490:	f7fe fe7a 	bl	8001188 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4618      	mov	r0, r3
 800249a:	f7fe fffd 	bl	8001498 <LL_ADC_IsEnabled>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	f040 813d 	bne.w	8002720 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6818      	ldr	r0, [r3, #0]
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	6819      	ldr	r1, [r3, #0]
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	461a      	mov	r2, r3
 80024b4:	f7fe ff4a 	bl	800134c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	4aa2      	ldr	r2, [pc, #648]	; (8002748 <HAL_ADC_ConfigChannel+0x6dc>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	f040 812e 	bne.w	8002720 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d10b      	bne.n	80024ec <HAL_ADC_ConfigChannel+0x480>
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	0e9b      	lsrs	r3, r3, #26
 80024da:	3301      	adds	r3, #1
 80024dc:	f003 031f 	and.w	r3, r3, #31
 80024e0:	2b09      	cmp	r3, #9
 80024e2:	bf94      	ite	ls
 80024e4:	2301      	movls	r3, #1
 80024e6:	2300      	movhi	r3, #0
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	e019      	b.n	8002520 <HAL_ADC_ConfigChannel+0x4b4>
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024f4:	fa93 f3a3 	rbit	r3, r3
 80024f8:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80024fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024fc:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80024fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002500:	2b00      	cmp	r3, #0
 8002502:	d101      	bne.n	8002508 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002504:	2320      	movs	r3, #32
 8002506:	e003      	b.n	8002510 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002508:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800250a:	fab3 f383 	clz	r3, r3
 800250e:	b2db      	uxtb	r3, r3
 8002510:	3301      	adds	r3, #1
 8002512:	f003 031f 	and.w	r3, r3, #31
 8002516:	2b09      	cmp	r3, #9
 8002518:	bf94      	ite	ls
 800251a:	2301      	movls	r3, #1
 800251c:	2300      	movhi	r3, #0
 800251e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002520:	2b00      	cmp	r3, #0
 8002522:	d079      	beq.n	8002618 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800252c:	2b00      	cmp	r3, #0
 800252e:	d107      	bne.n	8002540 <HAL_ADC_ConfigChannel+0x4d4>
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	0e9b      	lsrs	r3, r3, #26
 8002536:	3301      	adds	r3, #1
 8002538:	069b      	lsls	r3, r3, #26
 800253a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800253e:	e015      	b.n	800256c <HAL_ADC_ConfigChannel+0x500>
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002546:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002548:	fa93 f3a3 	rbit	r3, r3
 800254c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800254e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002550:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002552:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002554:	2b00      	cmp	r3, #0
 8002556:	d101      	bne.n	800255c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002558:	2320      	movs	r3, #32
 800255a:	e003      	b.n	8002564 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 800255c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800255e:	fab3 f383 	clz	r3, r3
 8002562:	b2db      	uxtb	r3, r3
 8002564:	3301      	adds	r3, #1
 8002566:	069b      	lsls	r3, r3, #26
 8002568:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002574:	2b00      	cmp	r3, #0
 8002576:	d109      	bne.n	800258c <HAL_ADC_ConfigChannel+0x520>
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	0e9b      	lsrs	r3, r3, #26
 800257e:	3301      	adds	r3, #1
 8002580:	f003 031f 	and.w	r3, r3, #31
 8002584:	2101      	movs	r1, #1
 8002586:	fa01 f303 	lsl.w	r3, r1, r3
 800258a:	e017      	b.n	80025bc <HAL_ADC_ConfigChannel+0x550>
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002592:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002594:	fa93 f3a3 	rbit	r3, r3
 8002598:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800259a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800259c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800259e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d101      	bne.n	80025a8 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80025a4:	2320      	movs	r3, #32
 80025a6:	e003      	b.n	80025b0 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80025a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025aa:	fab3 f383 	clz	r3, r3
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	3301      	adds	r3, #1
 80025b2:	f003 031f 	and.w	r3, r3, #31
 80025b6:	2101      	movs	r1, #1
 80025b8:	fa01 f303 	lsl.w	r3, r1, r3
 80025bc:	ea42 0103 	orr.w	r1, r2, r3
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d10a      	bne.n	80025e2 <HAL_ADC_ConfigChannel+0x576>
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	0e9b      	lsrs	r3, r3, #26
 80025d2:	3301      	adds	r3, #1
 80025d4:	f003 021f 	and.w	r2, r3, #31
 80025d8:	4613      	mov	r3, r2
 80025da:	005b      	lsls	r3, r3, #1
 80025dc:	4413      	add	r3, r2
 80025de:	051b      	lsls	r3, r3, #20
 80025e0:	e018      	b.n	8002614 <HAL_ADC_ConfigChannel+0x5a8>
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025ea:	fa93 f3a3 	rbit	r3, r3
 80025ee:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80025f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80025f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d101      	bne.n	80025fe <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80025fa:	2320      	movs	r3, #32
 80025fc:	e003      	b.n	8002606 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80025fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002600:	fab3 f383 	clz	r3, r3
 8002604:	b2db      	uxtb	r3, r3
 8002606:	3301      	adds	r3, #1
 8002608:	f003 021f 	and.w	r2, r3, #31
 800260c:	4613      	mov	r3, r2
 800260e:	005b      	lsls	r3, r3, #1
 8002610:	4413      	add	r3, r2
 8002612:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002614:	430b      	orrs	r3, r1
 8002616:	e07e      	b.n	8002716 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002620:	2b00      	cmp	r3, #0
 8002622:	d107      	bne.n	8002634 <HAL_ADC_ConfigChannel+0x5c8>
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	0e9b      	lsrs	r3, r3, #26
 800262a:	3301      	adds	r3, #1
 800262c:	069b      	lsls	r3, r3, #26
 800262e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002632:	e015      	b.n	8002660 <HAL_ADC_ConfigChannel+0x5f4>
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800263a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800263c:	fa93 f3a3 	rbit	r3, r3
 8002640:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002644:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002648:	2b00      	cmp	r3, #0
 800264a:	d101      	bne.n	8002650 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800264c:	2320      	movs	r3, #32
 800264e:	e003      	b.n	8002658 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002652:	fab3 f383 	clz	r3, r3
 8002656:	b2db      	uxtb	r3, r3
 8002658:	3301      	adds	r3, #1
 800265a:	069b      	lsls	r3, r3, #26
 800265c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002668:	2b00      	cmp	r3, #0
 800266a:	d109      	bne.n	8002680 <HAL_ADC_ConfigChannel+0x614>
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	0e9b      	lsrs	r3, r3, #26
 8002672:	3301      	adds	r3, #1
 8002674:	f003 031f 	and.w	r3, r3, #31
 8002678:	2101      	movs	r1, #1
 800267a:	fa01 f303 	lsl.w	r3, r1, r3
 800267e:	e017      	b.n	80026b0 <HAL_ADC_ConfigChannel+0x644>
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002686:	6a3b      	ldr	r3, [r7, #32]
 8002688:	fa93 f3a3 	rbit	r3, r3
 800268c:	61fb      	str	r3, [r7, #28]
  return result;
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002694:	2b00      	cmp	r3, #0
 8002696:	d101      	bne.n	800269c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002698:	2320      	movs	r3, #32
 800269a:	e003      	b.n	80026a4 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800269c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269e:	fab3 f383 	clz	r3, r3
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	3301      	adds	r3, #1
 80026a6:	f003 031f 	and.w	r3, r3, #31
 80026aa:	2101      	movs	r1, #1
 80026ac:	fa01 f303 	lsl.w	r3, r1, r3
 80026b0:	ea42 0103 	orr.w	r1, r2, r3
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d10d      	bne.n	80026dc <HAL_ADC_ConfigChannel+0x670>
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	0e9b      	lsrs	r3, r3, #26
 80026c6:	3301      	adds	r3, #1
 80026c8:	f003 021f 	and.w	r2, r3, #31
 80026cc:	4613      	mov	r3, r2
 80026ce:	005b      	lsls	r3, r3, #1
 80026d0:	4413      	add	r3, r2
 80026d2:	3b1e      	subs	r3, #30
 80026d4:	051b      	lsls	r3, r3, #20
 80026d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026da:	e01b      	b.n	8002714 <HAL_ADC_ConfigChannel+0x6a8>
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	fa93 f3a3 	rbit	r3, r3
 80026e8:	613b      	str	r3, [r7, #16]
  return result;
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d101      	bne.n	80026f8 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80026f4:	2320      	movs	r3, #32
 80026f6:	e003      	b.n	8002700 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	fab3 f383 	clz	r3, r3
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	3301      	adds	r3, #1
 8002702:	f003 021f 	and.w	r2, r3, #31
 8002706:	4613      	mov	r3, r2
 8002708:	005b      	lsls	r3, r3, #1
 800270a:	4413      	add	r3, r2
 800270c:	3b1e      	subs	r3, #30
 800270e:	051b      	lsls	r3, r3, #20
 8002710:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002714:	430b      	orrs	r3, r1
 8002716:	683a      	ldr	r2, [r7, #0]
 8002718:	6892      	ldr	r2, [r2, #8]
 800271a:	4619      	mov	r1, r3
 800271c:	f7fe fdea 	bl	80012f4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	4b09      	ldr	r3, [pc, #36]	; (800274c <HAL_ADC_ConfigChannel+0x6e0>)
 8002726:	4013      	ands	r3, r2
 8002728:	2b00      	cmp	r3, #0
 800272a:	f000 80be 	beq.w	80028aa <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002736:	d004      	beq.n	8002742 <HAL_ADC_ConfigChannel+0x6d6>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a04      	ldr	r2, [pc, #16]	; (8002750 <HAL_ADC_ConfigChannel+0x6e4>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d10a      	bne.n	8002758 <HAL_ADC_ConfigChannel+0x6ec>
 8002742:	4b04      	ldr	r3, [pc, #16]	; (8002754 <HAL_ADC_ConfigChannel+0x6e8>)
 8002744:	e009      	b.n	800275a <HAL_ADC_ConfigChannel+0x6ee>
 8002746:	bf00      	nop
 8002748:	407f0000 	.word	0x407f0000
 800274c:	80080000 	.word	0x80080000
 8002750:	50000100 	.word	0x50000100
 8002754:	50000300 	.word	0x50000300
 8002758:	4b59      	ldr	r3, [pc, #356]	; (80028c0 <HAL_ADC_ConfigChannel+0x854>)
 800275a:	4618      	mov	r0, r3
 800275c:	f7fe fccc 	bl	80010f8 <LL_ADC_GetCommonPathInternalCh>
 8002760:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a56      	ldr	r2, [pc, #344]	; (80028c4 <HAL_ADC_ConfigChannel+0x858>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d004      	beq.n	8002778 <HAL_ADC_ConfigChannel+0x70c>
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a55      	ldr	r2, [pc, #340]	; (80028c8 <HAL_ADC_ConfigChannel+0x85c>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d13a      	bne.n	80027ee <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002778:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800277c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d134      	bne.n	80027ee <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800278c:	d005      	beq.n	800279a <HAL_ADC_ConfigChannel+0x72e>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a4e      	ldr	r2, [pc, #312]	; (80028cc <HAL_ADC_ConfigChannel+0x860>)
 8002794:	4293      	cmp	r3, r2
 8002796:	f040 8085 	bne.w	80028a4 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027a2:	d004      	beq.n	80027ae <HAL_ADC_ConfigChannel+0x742>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a49      	ldr	r2, [pc, #292]	; (80028d0 <HAL_ADC_ConfigChannel+0x864>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d101      	bne.n	80027b2 <HAL_ADC_ConfigChannel+0x746>
 80027ae:	4a49      	ldr	r2, [pc, #292]	; (80028d4 <HAL_ADC_ConfigChannel+0x868>)
 80027b0:	e000      	b.n	80027b4 <HAL_ADC_ConfigChannel+0x748>
 80027b2:	4a43      	ldr	r2, [pc, #268]	; (80028c0 <HAL_ADC_ConfigChannel+0x854>)
 80027b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027b8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80027bc:	4619      	mov	r1, r3
 80027be:	4610      	mov	r0, r2
 80027c0:	f7fe fc87 	bl	80010d2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80027c4:	4b44      	ldr	r3, [pc, #272]	; (80028d8 <HAL_ADC_ConfigChannel+0x86c>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	099b      	lsrs	r3, r3, #6
 80027ca:	4a44      	ldr	r2, [pc, #272]	; (80028dc <HAL_ADC_ConfigChannel+0x870>)
 80027cc:	fba2 2303 	umull	r2, r3, r2, r3
 80027d0:	099b      	lsrs	r3, r3, #6
 80027d2:	1c5a      	adds	r2, r3, #1
 80027d4:	4613      	mov	r3, r2
 80027d6:	005b      	lsls	r3, r3, #1
 80027d8:	4413      	add	r3, r2
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80027de:	e002      	b.n	80027e6 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	3b01      	subs	r3, #1
 80027e4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d1f9      	bne.n	80027e0 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80027ec:	e05a      	b.n	80028a4 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a3b      	ldr	r2, [pc, #236]	; (80028e0 <HAL_ADC_ConfigChannel+0x874>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d125      	bne.n	8002844 <HAL_ADC_ConfigChannel+0x7d8>
 80027f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d11f      	bne.n	8002844 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a31      	ldr	r2, [pc, #196]	; (80028d0 <HAL_ADC_ConfigChannel+0x864>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d104      	bne.n	8002818 <HAL_ADC_ConfigChannel+0x7ac>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a34      	ldr	r2, [pc, #208]	; (80028e4 <HAL_ADC_ConfigChannel+0x878>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d047      	beq.n	80028a8 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002820:	d004      	beq.n	800282c <HAL_ADC_ConfigChannel+0x7c0>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a2a      	ldr	r2, [pc, #168]	; (80028d0 <HAL_ADC_ConfigChannel+0x864>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d101      	bne.n	8002830 <HAL_ADC_ConfigChannel+0x7c4>
 800282c:	4a29      	ldr	r2, [pc, #164]	; (80028d4 <HAL_ADC_ConfigChannel+0x868>)
 800282e:	e000      	b.n	8002832 <HAL_ADC_ConfigChannel+0x7c6>
 8002830:	4a23      	ldr	r2, [pc, #140]	; (80028c0 <HAL_ADC_ConfigChannel+0x854>)
 8002832:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002836:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800283a:	4619      	mov	r1, r3
 800283c:	4610      	mov	r0, r2
 800283e:	f7fe fc48 	bl	80010d2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002842:	e031      	b.n	80028a8 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a27      	ldr	r2, [pc, #156]	; (80028e8 <HAL_ADC_ConfigChannel+0x87c>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d12d      	bne.n	80028aa <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800284e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002852:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d127      	bne.n	80028aa <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a1c      	ldr	r2, [pc, #112]	; (80028d0 <HAL_ADC_ConfigChannel+0x864>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d022      	beq.n	80028aa <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800286c:	d004      	beq.n	8002878 <HAL_ADC_ConfigChannel+0x80c>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a17      	ldr	r2, [pc, #92]	; (80028d0 <HAL_ADC_ConfigChannel+0x864>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d101      	bne.n	800287c <HAL_ADC_ConfigChannel+0x810>
 8002878:	4a16      	ldr	r2, [pc, #88]	; (80028d4 <HAL_ADC_ConfigChannel+0x868>)
 800287a:	e000      	b.n	800287e <HAL_ADC_ConfigChannel+0x812>
 800287c:	4a10      	ldr	r2, [pc, #64]	; (80028c0 <HAL_ADC_ConfigChannel+0x854>)
 800287e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002882:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002886:	4619      	mov	r1, r3
 8002888:	4610      	mov	r0, r2
 800288a:	f7fe fc22 	bl	80010d2 <LL_ADC_SetCommonPathInternalCh>
 800288e:	e00c      	b.n	80028aa <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002894:	f043 0220 	orr.w	r2, r3, #32
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80028a2:	e002      	b.n	80028aa <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80028a4:	bf00      	nop
 80028a6:	e000      	b.n	80028aa <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028a8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80028b2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	37d8      	adds	r7, #216	; 0xd8
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	50000700 	.word	0x50000700
 80028c4:	c3210000 	.word	0xc3210000
 80028c8:	90c00010 	.word	0x90c00010
 80028cc:	50000600 	.word	0x50000600
 80028d0:	50000100 	.word	0x50000100
 80028d4:	50000300 	.word	0x50000300
 80028d8:	20000000 	.word	0x20000000
 80028dc:	053e2d63 	.word	0x053e2d63
 80028e0:	c7520000 	.word	0xc7520000
 80028e4:	50000500 	.word	0x50000500
 80028e8:	cb840000 	.word	0xcb840000

080028ec <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7fe fdcd 	bl	8001498 <LL_ADC_IsEnabled>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d14d      	bne.n	80029a0 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	689a      	ldr	r2, [r3, #8]
 800290a:	4b28      	ldr	r3, [pc, #160]	; (80029ac <ADC_Enable+0xc0>)
 800290c:	4013      	ands	r3, r2
 800290e:	2b00      	cmp	r3, #0
 8002910:	d00d      	beq.n	800292e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002916:	f043 0210 	orr.w	r2, r3, #16
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002922:	f043 0201 	orr.w	r2, r3, #1
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e039      	b.n	80029a2 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4618      	mov	r0, r3
 8002934:	f7fe fd9c 	bl	8001470 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002938:	f7fe fbac 	bl	8001094 <HAL_GetTick>
 800293c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800293e:	e028      	b.n	8002992 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4618      	mov	r0, r3
 8002946:	f7fe fda7 	bl	8001498 <LL_ADC_IsEnabled>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d104      	bne.n	800295a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4618      	mov	r0, r3
 8002956:	f7fe fd8b 	bl	8001470 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800295a:	f7fe fb9b 	bl	8001094 <HAL_GetTick>
 800295e:	4602      	mov	r2, r0
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	2b02      	cmp	r3, #2
 8002966:	d914      	bls.n	8002992 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	2b01      	cmp	r3, #1
 8002974:	d00d      	beq.n	8002992 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800297a:	f043 0210 	orr.w	r2, r3, #16
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002986:	f043 0201 	orr.w	r2, r3, #1
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e007      	b.n	80029a2 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0301 	and.w	r3, r3, #1
 800299c:	2b01      	cmp	r3, #1
 800299e:	d1cf      	bne.n	8002940 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80029a0:	2300      	movs	r3, #0
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3710      	adds	r7, #16
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	8000003f 	.word	0x8000003f

080029b0 <LL_ADC_IsEnabled>:
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	f003 0301 	and.w	r3, r3, #1
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d101      	bne.n	80029c8 <LL_ADC_IsEnabled+0x18>
 80029c4:	2301      	movs	r3, #1
 80029c6:	e000      	b.n	80029ca <LL_ADC_IsEnabled+0x1a>
 80029c8:	2300      	movs	r3, #0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	370c      	adds	r7, #12
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr

080029d6 <LL_ADC_REG_IsConversionOngoing>:
{
 80029d6:	b480      	push	{r7}
 80029d8:	b083      	sub	sp, #12
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f003 0304 	and.w	r3, r3, #4
 80029e6:	2b04      	cmp	r3, #4
 80029e8:	d101      	bne.n	80029ee <LL_ADC_REG_IsConversionOngoing+0x18>
 80029ea:	2301      	movs	r3, #1
 80029ec:	e000      	b.n	80029f0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80029ee:	2300      	movs	r3, #0
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	370c      	adds	r7, #12
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr

080029fc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002a04:	bf00      	nop
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002a18:	bf00      	nop
 8002a1a:	370c      	adds	r7, #12
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr

08002a24 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002a2c:	bf00      	nop
 8002a2e:	370c      	adds	r7, #12
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr

08002a38 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002a40:	bf00      	nop
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002a4c:	b590      	push	{r4, r7, lr}
 8002a4e:	b0a1      	sub	sp, #132	; 0x84
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a56:	2300      	movs	r3, #0
 8002a58:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d101      	bne.n	8002a6a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002a66:	2302      	movs	r3, #2
 8002a68:	e0e7      	b.n	8002c3a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002a72:	2300      	movs	r3, #0
 8002a74:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002a76:	2300      	movs	r3, #0
 8002a78:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a82:	d102      	bne.n	8002a8a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002a84:	4b6f      	ldr	r3, [pc, #444]	; (8002c44 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002a86:	60bb      	str	r3, [r7, #8]
 8002a88:	e009      	b.n	8002a9e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a6e      	ldr	r2, [pc, #440]	; (8002c48 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d102      	bne.n	8002a9a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002a94:	4b6d      	ldr	r3, [pc, #436]	; (8002c4c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002a96:	60bb      	str	r3, [r7, #8]
 8002a98:	e001      	b.n	8002a9e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d10b      	bne.n	8002abc <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aa8:	f043 0220 	orr.w	r2, r3, #32
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e0be      	b.n	8002c3a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7ff ff89 	bl	80029d6 <LL_ADC_REG_IsConversionOngoing>
 8002ac4:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7ff ff83 	bl	80029d6 <LL_ADC_REG_IsConversionOngoing>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	f040 80a0 	bne.w	8002c18 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002ad8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	f040 809c 	bne.w	8002c18 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ae8:	d004      	beq.n	8002af4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a55      	ldr	r2, [pc, #340]	; (8002c44 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d101      	bne.n	8002af8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002af4:	4b56      	ldr	r3, [pc, #344]	; (8002c50 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8002af6:	e000      	b.n	8002afa <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002af8:	4b56      	ldr	r3, [pc, #344]	; (8002c54 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8002afa:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d04b      	beq.n	8002b9c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002b04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	6859      	ldr	r1, [r3, #4]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002b16:	035b      	lsls	r3, r3, #13
 8002b18:	430b      	orrs	r3, r1
 8002b1a:	431a      	orrs	r2, r3
 8002b1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b1e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b28:	d004      	beq.n	8002b34 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a45      	ldr	r2, [pc, #276]	; (8002c44 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d10f      	bne.n	8002b54 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8002b34:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002b38:	f7ff ff3a 	bl	80029b0 <LL_ADC_IsEnabled>
 8002b3c:	4604      	mov	r4, r0
 8002b3e:	4841      	ldr	r0, [pc, #260]	; (8002c44 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002b40:	f7ff ff36 	bl	80029b0 <LL_ADC_IsEnabled>
 8002b44:	4603      	mov	r3, r0
 8002b46:	4323      	orrs	r3, r4
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	bf0c      	ite	eq
 8002b4c:	2301      	moveq	r3, #1
 8002b4e:	2300      	movne	r3, #0
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	e012      	b.n	8002b7a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8002b54:	483c      	ldr	r0, [pc, #240]	; (8002c48 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002b56:	f7ff ff2b 	bl	80029b0 <LL_ADC_IsEnabled>
 8002b5a:	4604      	mov	r4, r0
 8002b5c:	483b      	ldr	r0, [pc, #236]	; (8002c4c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002b5e:	f7ff ff27 	bl	80029b0 <LL_ADC_IsEnabled>
 8002b62:	4603      	mov	r3, r0
 8002b64:	431c      	orrs	r4, r3
 8002b66:	483c      	ldr	r0, [pc, #240]	; (8002c58 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002b68:	f7ff ff22 	bl	80029b0 <LL_ADC_IsEnabled>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	4323      	orrs	r3, r4
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	bf0c      	ite	eq
 8002b74:	2301      	moveq	r3, #1
 8002b76:	2300      	movne	r3, #0
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d056      	beq.n	8002c2c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002b7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002b86:	f023 030f 	bic.w	r3, r3, #15
 8002b8a:	683a      	ldr	r2, [r7, #0]
 8002b8c:	6811      	ldr	r1, [r2, #0]
 8002b8e:	683a      	ldr	r2, [r7, #0]
 8002b90:	6892      	ldr	r2, [r2, #8]
 8002b92:	430a      	orrs	r2, r1
 8002b94:	431a      	orrs	r2, r3
 8002b96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b98:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b9a:	e047      	b.n	8002c2c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002b9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ba4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ba6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bb0:	d004      	beq.n	8002bbc <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a23      	ldr	r2, [pc, #140]	; (8002c44 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d10f      	bne.n	8002bdc <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002bbc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002bc0:	f7ff fef6 	bl	80029b0 <LL_ADC_IsEnabled>
 8002bc4:	4604      	mov	r4, r0
 8002bc6:	481f      	ldr	r0, [pc, #124]	; (8002c44 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002bc8:	f7ff fef2 	bl	80029b0 <LL_ADC_IsEnabled>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	4323      	orrs	r3, r4
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	bf0c      	ite	eq
 8002bd4:	2301      	moveq	r3, #1
 8002bd6:	2300      	movne	r3, #0
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	e012      	b.n	8002c02 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002bdc:	481a      	ldr	r0, [pc, #104]	; (8002c48 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002bde:	f7ff fee7 	bl	80029b0 <LL_ADC_IsEnabled>
 8002be2:	4604      	mov	r4, r0
 8002be4:	4819      	ldr	r0, [pc, #100]	; (8002c4c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002be6:	f7ff fee3 	bl	80029b0 <LL_ADC_IsEnabled>
 8002bea:	4603      	mov	r3, r0
 8002bec:	431c      	orrs	r4, r3
 8002bee:	481a      	ldr	r0, [pc, #104]	; (8002c58 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002bf0:	f7ff fede 	bl	80029b0 <LL_ADC_IsEnabled>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	4323      	orrs	r3, r4
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	bf0c      	ite	eq
 8002bfc:	2301      	moveq	r3, #1
 8002bfe:	2300      	movne	r3, #0
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d012      	beq.n	8002c2c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002c06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002c0e:	f023 030f 	bic.w	r3, r3, #15
 8002c12:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002c14:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c16:	e009      	b.n	8002c2c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c1c:	f043 0220 	orr.w	r2, r3, #32
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002c2a:	e000      	b.n	8002c2e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c2c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002c36:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3784      	adds	r7, #132	; 0x84
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd90      	pop	{r4, r7, pc}
 8002c42:	bf00      	nop
 8002c44:	50000100 	.word	0x50000100
 8002c48:	50000400 	.word	0x50000400
 8002c4c:	50000500 	.word	0x50000500
 8002c50:	50000300 	.word	0x50000300
 8002c54:	50000700 	.word	0x50000700
 8002c58:	50000600 	.word	0x50000600

08002c5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b085      	sub	sp, #20
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f003 0307 	and.w	r3, r3, #7
 8002c6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c6c:	4b0c      	ldr	r3, [pc, #48]	; (8002ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c72:	68ba      	ldr	r2, [r7, #8]
 8002c74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c78:	4013      	ands	r3, r2
 8002c7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c8e:	4a04      	ldr	r2, [pc, #16]	; (8002ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	60d3      	str	r3, [r2, #12]
}
 8002c94:	bf00      	nop
 8002c96:	3714      	adds	r7, #20
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr
 8002ca0:	e000ed00 	.word	0xe000ed00

08002ca4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ca8:	4b04      	ldr	r3, [pc, #16]	; (8002cbc <__NVIC_GetPriorityGrouping+0x18>)
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	0a1b      	lsrs	r3, r3, #8
 8002cae:	f003 0307 	and.w	r3, r3, #7
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr
 8002cbc:	e000ed00 	.word	0xe000ed00

08002cc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	db0b      	blt.n	8002cea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cd2:	79fb      	ldrb	r3, [r7, #7]
 8002cd4:	f003 021f 	and.w	r2, r3, #31
 8002cd8:	4907      	ldr	r1, [pc, #28]	; (8002cf8 <__NVIC_EnableIRQ+0x38>)
 8002cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cde:	095b      	lsrs	r3, r3, #5
 8002ce0:	2001      	movs	r0, #1
 8002ce2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ce6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002cea:	bf00      	nop
 8002cec:	370c      	adds	r7, #12
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr
 8002cf6:	bf00      	nop
 8002cf8:	e000e100 	.word	0xe000e100

08002cfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	4603      	mov	r3, r0
 8002d04:	6039      	str	r1, [r7, #0]
 8002d06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	db0a      	blt.n	8002d26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	b2da      	uxtb	r2, r3
 8002d14:	490c      	ldr	r1, [pc, #48]	; (8002d48 <__NVIC_SetPriority+0x4c>)
 8002d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d1a:	0112      	lsls	r2, r2, #4
 8002d1c:	b2d2      	uxtb	r2, r2
 8002d1e:	440b      	add	r3, r1
 8002d20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d24:	e00a      	b.n	8002d3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	b2da      	uxtb	r2, r3
 8002d2a:	4908      	ldr	r1, [pc, #32]	; (8002d4c <__NVIC_SetPriority+0x50>)
 8002d2c:	79fb      	ldrb	r3, [r7, #7]
 8002d2e:	f003 030f 	and.w	r3, r3, #15
 8002d32:	3b04      	subs	r3, #4
 8002d34:	0112      	lsls	r2, r2, #4
 8002d36:	b2d2      	uxtb	r2, r2
 8002d38:	440b      	add	r3, r1
 8002d3a:	761a      	strb	r2, [r3, #24]
}
 8002d3c:	bf00      	nop
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr
 8002d48:	e000e100 	.word	0xe000e100
 8002d4c:	e000ed00 	.word	0xe000ed00

08002d50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b089      	sub	sp, #36	; 0x24
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	f003 0307 	and.w	r3, r3, #7
 8002d62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	f1c3 0307 	rsb	r3, r3, #7
 8002d6a:	2b04      	cmp	r3, #4
 8002d6c:	bf28      	it	cs
 8002d6e:	2304      	movcs	r3, #4
 8002d70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	3304      	adds	r3, #4
 8002d76:	2b06      	cmp	r3, #6
 8002d78:	d902      	bls.n	8002d80 <NVIC_EncodePriority+0x30>
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	3b03      	subs	r3, #3
 8002d7e:	e000      	b.n	8002d82 <NVIC_EncodePriority+0x32>
 8002d80:	2300      	movs	r3, #0
 8002d82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d88:	69bb      	ldr	r3, [r7, #24]
 8002d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8e:	43da      	mvns	r2, r3
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	401a      	ands	r2, r3
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d98:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002da2:	43d9      	mvns	r1, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002da8:	4313      	orrs	r3, r2
         );
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3724      	adds	r7, #36	; 0x24
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
	...

08002db8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	3b01      	subs	r3, #1
 8002dc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002dc8:	d301      	bcc.n	8002dce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e00f      	b.n	8002dee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dce:	4a0a      	ldr	r2, [pc, #40]	; (8002df8 <SysTick_Config+0x40>)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	3b01      	subs	r3, #1
 8002dd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002dd6:	210f      	movs	r1, #15
 8002dd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ddc:	f7ff ff8e 	bl	8002cfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002de0:	4b05      	ldr	r3, [pc, #20]	; (8002df8 <SysTick_Config+0x40>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002de6:	4b04      	ldr	r3, [pc, #16]	; (8002df8 <SysTick_Config+0x40>)
 8002de8:	2207      	movs	r2, #7
 8002dea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3708      	adds	r7, #8
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	e000e010 	.word	0xe000e010

08002dfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f7ff ff29 	bl	8002c5c <__NVIC_SetPriorityGrouping>
}
 8002e0a:	bf00      	nop
 8002e0c:	3708      	adds	r7, #8
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}

08002e12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e12:	b580      	push	{r7, lr}
 8002e14:	b086      	sub	sp, #24
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	4603      	mov	r3, r0
 8002e1a:	60b9      	str	r1, [r7, #8]
 8002e1c:	607a      	str	r2, [r7, #4]
 8002e1e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002e20:	f7ff ff40 	bl	8002ca4 <__NVIC_GetPriorityGrouping>
 8002e24:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	68b9      	ldr	r1, [r7, #8]
 8002e2a:	6978      	ldr	r0, [r7, #20]
 8002e2c:	f7ff ff90 	bl	8002d50 <NVIC_EncodePriority>
 8002e30:	4602      	mov	r2, r0
 8002e32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e36:	4611      	mov	r1, r2
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7ff ff5f 	bl	8002cfc <__NVIC_SetPriority>
}
 8002e3e:	bf00      	nop
 8002e40:	3718      	adds	r7, #24
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}

08002e46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b082      	sub	sp, #8
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e54:	4618      	mov	r0, r3
 8002e56:	f7ff ff33 	bl	8002cc0 <__NVIC_EnableIRQ>
}
 8002e5a:	bf00      	nop
 8002e5c:	3708      	adds	r7, #8
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}

08002e62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e62:	b580      	push	{r7, lr}
 8002e64:	b082      	sub	sp, #8
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f7ff ffa4 	bl	8002db8 <SysTick_Config>
 8002e70:	4603      	mov	r3, r0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3708      	adds	r7, #8
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
	...

08002e7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b087      	sub	sp, #28
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002e86:	2300      	movs	r3, #0
 8002e88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002e8a:	e15a      	b.n	8003142 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	2101      	movs	r1, #1
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	fa01 f303 	lsl.w	r3, r1, r3
 8002e98:	4013      	ands	r3, r2
 8002e9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	f000 814c 	beq.w	800313c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f003 0303 	and.w	r3, r3, #3
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d005      	beq.n	8002ebc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d130      	bne.n	8002f1e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	005b      	lsls	r3, r3, #1
 8002ec6:	2203      	movs	r2, #3
 8002ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ecc:	43db      	mvns	r3, r3
 8002ece:	693a      	ldr	r2, [r7, #16]
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	68da      	ldr	r2, [r3, #12]
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	005b      	lsls	r3, r3, #1
 8002edc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee0:	693a      	ldr	r2, [r7, #16]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	693a      	ldr	r2, [r7, #16]
 8002eea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8002efa:	43db      	mvns	r3, r3
 8002efc:	693a      	ldr	r2, [r7, #16]
 8002efe:	4013      	ands	r3, r2
 8002f00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	091b      	lsrs	r3, r3, #4
 8002f08:	f003 0201 	and.w	r2, r3, #1
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f12:	693a      	ldr	r2, [r7, #16]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	693a      	ldr	r2, [r7, #16]
 8002f1c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	f003 0303 	and.w	r3, r3, #3
 8002f26:	2b03      	cmp	r3, #3
 8002f28:	d017      	beq.n	8002f5a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	005b      	lsls	r3, r3, #1
 8002f34:	2203      	movs	r2, #3
 8002f36:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3a:	43db      	mvns	r3, r3
 8002f3c:	693a      	ldr	r2, [r7, #16]
 8002f3e:	4013      	ands	r3, r2
 8002f40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	689a      	ldr	r2, [r3, #8]
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	005b      	lsls	r3, r3, #1
 8002f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4e:	693a      	ldr	r2, [r7, #16]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	693a      	ldr	r2, [r7, #16]
 8002f58:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	f003 0303 	and.w	r3, r3, #3
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d123      	bne.n	8002fae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	08da      	lsrs	r2, r3, #3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	3208      	adds	r2, #8
 8002f6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f72:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	f003 0307 	and.w	r3, r3, #7
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	220f      	movs	r2, #15
 8002f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f82:	43db      	mvns	r3, r3
 8002f84:	693a      	ldr	r2, [r7, #16]
 8002f86:	4013      	ands	r3, r2
 8002f88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	691a      	ldr	r2, [r3, #16]
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	f003 0307 	and.w	r3, r3, #7
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9a:	693a      	ldr	r2, [r7, #16]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	08da      	lsrs	r2, r3, #3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	3208      	adds	r2, #8
 8002fa8:	6939      	ldr	r1, [r7, #16]
 8002faa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	005b      	lsls	r3, r3, #1
 8002fb8:	2203      	movs	r2, #3
 8002fba:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbe:	43db      	mvns	r3, r3
 8002fc0:	693a      	ldr	r2, [r7, #16]
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	f003 0203 	and.w	r2, r3, #3
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	005b      	lsls	r3, r3, #1
 8002fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd6:	693a      	ldr	r2, [r7, #16]
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	693a      	ldr	r2, [r7, #16]
 8002fe0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	f000 80a6 	beq.w	800313c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ff0:	4b5b      	ldr	r3, [pc, #364]	; (8003160 <HAL_GPIO_Init+0x2e4>)
 8002ff2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ff4:	4a5a      	ldr	r2, [pc, #360]	; (8003160 <HAL_GPIO_Init+0x2e4>)
 8002ff6:	f043 0301 	orr.w	r3, r3, #1
 8002ffa:	6613      	str	r3, [r2, #96]	; 0x60
 8002ffc:	4b58      	ldr	r3, [pc, #352]	; (8003160 <HAL_GPIO_Init+0x2e4>)
 8002ffe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003000:	f003 0301 	and.w	r3, r3, #1
 8003004:	60bb      	str	r3, [r7, #8]
 8003006:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003008:	4a56      	ldr	r2, [pc, #344]	; (8003164 <HAL_GPIO_Init+0x2e8>)
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	089b      	lsrs	r3, r3, #2
 800300e:	3302      	adds	r3, #2
 8003010:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003014:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	f003 0303 	and.w	r3, r3, #3
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	220f      	movs	r2, #15
 8003020:	fa02 f303 	lsl.w	r3, r2, r3
 8003024:	43db      	mvns	r3, r3
 8003026:	693a      	ldr	r2, [r7, #16]
 8003028:	4013      	ands	r3, r2
 800302a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003032:	d01f      	beq.n	8003074 <HAL_GPIO_Init+0x1f8>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	4a4c      	ldr	r2, [pc, #304]	; (8003168 <HAL_GPIO_Init+0x2ec>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d019      	beq.n	8003070 <HAL_GPIO_Init+0x1f4>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	4a4b      	ldr	r2, [pc, #300]	; (800316c <HAL_GPIO_Init+0x2f0>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d013      	beq.n	800306c <HAL_GPIO_Init+0x1f0>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	4a4a      	ldr	r2, [pc, #296]	; (8003170 <HAL_GPIO_Init+0x2f4>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d00d      	beq.n	8003068 <HAL_GPIO_Init+0x1ec>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	4a49      	ldr	r2, [pc, #292]	; (8003174 <HAL_GPIO_Init+0x2f8>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d007      	beq.n	8003064 <HAL_GPIO_Init+0x1e8>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	4a48      	ldr	r2, [pc, #288]	; (8003178 <HAL_GPIO_Init+0x2fc>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d101      	bne.n	8003060 <HAL_GPIO_Init+0x1e4>
 800305c:	2305      	movs	r3, #5
 800305e:	e00a      	b.n	8003076 <HAL_GPIO_Init+0x1fa>
 8003060:	2306      	movs	r3, #6
 8003062:	e008      	b.n	8003076 <HAL_GPIO_Init+0x1fa>
 8003064:	2304      	movs	r3, #4
 8003066:	e006      	b.n	8003076 <HAL_GPIO_Init+0x1fa>
 8003068:	2303      	movs	r3, #3
 800306a:	e004      	b.n	8003076 <HAL_GPIO_Init+0x1fa>
 800306c:	2302      	movs	r3, #2
 800306e:	e002      	b.n	8003076 <HAL_GPIO_Init+0x1fa>
 8003070:	2301      	movs	r3, #1
 8003072:	e000      	b.n	8003076 <HAL_GPIO_Init+0x1fa>
 8003074:	2300      	movs	r3, #0
 8003076:	697a      	ldr	r2, [r7, #20]
 8003078:	f002 0203 	and.w	r2, r2, #3
 800307c:	0092      	lsls	r2, r2, #2
 800307e:	4093      	lsls	r3, r2
 8003080:	693a      	ldr	r2, [r7, #16]
 8003082:	4313      	orrs	r3, r2
 8003084:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003086:	4937      	ldr	r1, [pc, #220]	; (8003164 <HAL_GPIO_Init+0x2e8>)
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	089b      	lsrs	r3, r3, #2
 800308c:	3302      	adds	r3, #2
 800308e:	693a      	ldr	r2, [r7, #16]
 8003090:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003094:	4b39      	ldr	r3, [pc, #228]	; (800317c <HAL_GPIO_Init+0x300>)
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	43db      	mvns	r3, r3
 800309e:	693a      	ldr	r2, [r7, #16]
 80030a0:	4013      	ands	r3, r2
 80030a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d003      	beq.n	80030b8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80030b0:	693a      	ldr	r2, [r7, #16]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80030b8:	4a30      	ldr	r2, [pc, #192]	; (800317c <HAL_GPIO_Init+0x300>)
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80030be:	4b2f      	ldr	r3, [pc, #188]	; (800317c <HAL_GPIO_Init+0x300>)
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	43db      	mvns	r3, r3
 80030c8:	693a      	ldr	r2, [r7, #16]
 80030ca:	4013      	ands	r3, r2
 80030cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d003      	beq.n	80030e2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80030da:	693a      	ldr	r2, [r7, #16]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	4313      	orrs	r3, r2
 80030e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80030e2:	4a26      	ldr	r2, [pc, #152]	; (800317c <HAL_GPIO_Init+0x300>)
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80030e8:	4b24      	ldr	r3, [pc, #144]	; (800317c <HAL_GPIO_Init+0x300>)
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	43db      	mvns	r3, r3
 80030f2:	693a      	ldr	r2, [r7, #16]
 80030f4:	4013      	ands	r3, r2
 80030f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d003      	beq.n	800310c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003104:	693a      	ldr	r2, [r7, #16]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	4313      	orrs	r3, r2
 800310a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800310c:	4a1b      	ldr	r2, [pc, #108]	; (800317c <HAL_GPIO_Init+0x300>)
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003112:	4b1a      	ldr	r3, [pc, #104]	; (800317c <HAL_GPIO_Init+0x300>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	43db      	mvns	r3, r3
 800311c:	693a      	ldr	r2, [r7, #16]
 800311e:	4013      	ands	r3, r2
 8003120:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d003      	beq.n	8003136 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800312e:	693a      	ldr	r2, [r7, #16]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	4313      	orrs	r3, r2
 8003134:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003136:	4a11      	ldr	r2, [pc, #68]	; (800317c <HAL_GPIO_Init+0x300>)
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	3301      	adds	r3, #1
 8003140:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	fa22 f303 	lsr.w	r3, r2, r3
 800314c:	2b00      	cmp	r3, #0
 800314e:	f47f ae9d 	bne.w	8002e8c <HAL_GPIO_Init+0x10>
  }
}
 8003152:	bf00      	nop
 8003154:	bf00      	nop
 8003156:	371c      	adds	r7, #28
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr
 8003160:	40021000 	.word	0x40021000
 8003164:	40010000 	.word	0x40010000
 8003168:	48000400 	.word	0x48000400
 800316c:	48000800 	.word	0x48000800
 8003170:	48000c00 	.word	0x48000c00
 8003174:	48001000 	.word	0x48001000
 8003178:	48001400 	.word	0x48001400
 800317c:	40010400 	.word	0x40010400

08003180 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	460b      	mov	r3, r1
 800318a:	807b      	strh	r3, [r7, #2]
 800318c:	4613      	mov	r3, r2
 800318e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003190:	787b      	ldrb	r3, [r7, #1]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d003      	beq.n	800319e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003196:	887a      	ldrh	r2, [r7, #2]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800319c:	e002      	b.n	80031a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800319e:	887a      	ldrh	r2, [r7, #2]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80031a4:	bf00      	nop
 80031a6:	370c      	adds	r7, #12
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr

080031b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	4603      	mov	r3, r0
 80031b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80031ba:	4b08      	ldr	r3, [pc, #32]	; (80031dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031bc:	695a      	ldr	r2, [r3, #20]
 80031be:	88fb      	ldrh	r3, [r7, #6]
 80031c0:	4013      	ands	r3, r2
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d006      	beq.n	80031d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80031c6:	4a05      	ldr	r2, [pc, #20]	; (80031dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031c8:	88fb      	ldrh	r3, [r7, #6]
 80031ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80031cc:	88fb      	ldrh	r3, [r7, #6]
 80031ce:	4618      	mov	r0, r3
 80031d0:	f000 f806 	bl	80031e0 <HAL_GPIO_EXTI_Callback>
  }
}
 80031d4:	bf00      	nop
 80031d6:	3708      	adds	r7, #8
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	40010400 	.word	0x40010400

080031e0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	4603      	mov	r3, r0
 80031e8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80031ea:	bf00      	nop
 80031ec:	370c      	adds	r7, #12
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr
	...

080031f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b085      	sub	sp, #20
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d141      	bne.n	800328a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003206:	4b4b      	ldr	r3, [pc, #300]	; (8003334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800320e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003212:	d131      	bne.n	8003278 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003214:	4b47      	ldr	r3, [pc, #284]	; (8003334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003216:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800321a:	4a46      	ldr	r2, [pc, #280]	; (8003334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800321c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003220:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003224:	4b43      	ldr	r3, [pc, #268]	; (8003334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800322c:	4a41      	ldr	r2, [pc, #260]	; (8003334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800322e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003232:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003234:	4b40      	ldr	r3, [pc, #256]	; (8003338 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2232      	movs	r2, #50	; 0x32
 800323a:	fb02 f303 	mul.w	r3, r2, r3
 800323e:	4a3f      	ldr	r2, [pc, #252]	; (800333c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003240:	fba2 2303 	umull	r2, r3, r2, r3
 8003244:	0c9b      	lsrs	r3, r3, #18
 8003246:	3301      	adds	r3, #1
 8003248:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800324a:	e002      	b.n	8003252 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	3b01      	subs	r3, #1
 8003250:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003252:	4b38      	ldr	r3, [pc, #224]	; (8003334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003254:	695b      	ldr	r3, [r3, #20]
 8003256:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800325a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800325e:	d102      	bne.n	8003266 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d1f2      	bne.n	800324c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003266:	4b33      	ldr	r3, [pc, #204]	; (8003334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003268:	695b      	ldr	r3, [r3, #20]
 800326a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800326e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003272:	d158      	bne.n	8003326 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003274:	2303      	movs	r3, #3
 8003276:	e057      	b.n	8003328 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003278:	4b2e      	ldr	r3, [pc, #184]	; (8003334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800327a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800327e:	4a2d      	ldr	r2, [pc, #180]	; (8003334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003280:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003284:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003288:	e04d      	b.n	8003326 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003290:	d141      	bne.n	8003316 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003292:	4b28      	ldr	r3, [pc, #160]	; (8003334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800329a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800329e:	d131      	bne.n	8003304 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80032a0:	4b24      	ldr	r3, [pc, #144]	; (8003334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032a6:	4a23      	ldr	r2, [pc, #140]	; (8003334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032ac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80032b0:	4b20      	ldr	r3, [pc, #128]	; (8003334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80032b8:	4a1e      	ldr	r2, [pc, #120]	; (8003334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032be:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80032c0:	4b1d      	ldr	r3, [pc, #116]	; (8003338 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2232      	movs	r2, #50	; 0x32
 80032c6:	fb02 f303 	mul.w	r3, r2, r3
 80032ca:	4a1c      	ldr	r2, [pc, #112]	; (800333c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80032cc:	fba2 2303 	umull	r2, r3, r2, r3
 80032d0:	0c9b      	lsrs	r3, r3, #18
 80032d2:	3301      	adds	r3, #1
 80032d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032d6:	e002      	b.n	80032de <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	3b01      	subs	r3, #1
 80032dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032de:	4b15      	ldr	r3, [pc, #84]	; (8003334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032e0:	695b      	ldr	r3, [r3, #20]
 80032e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032ea:	d102      	bne.n	80032f2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d1f2      	bne.n	80032d8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80032f2:	4b10      	ldr	r3, [pc, #64]	; (8003334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032f4:	695b      	ldr	r3, [r3, #20]
 80032f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032fe:	d112      	bne.n	8003326 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003300:	2303      	movs	r3, #3
 8003302:	e011      	b.n	8003328 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003304:	4b0b      	ldr	r3, [pc, #44]	; (8003334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003306:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800330a:	4a0a      	ldr	r2, [pc, #40]	; (8003334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800330c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003310:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003314:	e007      	b.n	8003326 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003316:	4b07      	ldr	r3, [pc, #28]	; (8003334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800331e:	4a05      	ldr	r2, [pc, #20]	; (8003334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003320:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003324:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003326:	2300      	movs	r3, #0
}
 8003328:	4618      	mov	r0, r3
 800332a:	3714      	adds	r7, #20
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr
 8003334:	40007000 	.word	0x40007000
 8003338:	20000000 	.word	0x20000000
 800333c:	431bde83 	.word	0x431bde83

08003340 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003340:	b480      	push	{r7}
 8003342:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003344:	4b05      	ldr	r3, [pc, #20]	; (800335c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	4a04      	ldr	r2, [pc, #16]	; (800335c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800334a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800334e:	6093      	str	r3, [r2, #8]
}
 8003350:	bf00      	nop
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	40007000 	.word	0x40007000

08003360 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b088      	sub	sp, #32
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d101      	bne.n	8003372 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e306      	b.n	8003980 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0301 	and.w	r3, r3, #1
 800337a:	2b00      	cmp	r3, #0
 800337c:	d075      	beq.n	800346a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800337e:	4b97      	ldr	r3, [pc, #604]	; (80035dc <HAL_RCC_OscConfig+0x27c>)
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f003 030c 	and.w	r3, r3, #12
 8003386:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003388:	4b94      	ldr	r3, [pc, #592]	; (80035dc <HAL_RCC_OscConfig+0x27c>)
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	f003 0303 	and.w	r3, r3, #3
 8003390:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003392:	69bb      	ldr	r3, [r7, #24]
 8003394:	2b0c      	cmp	r3, #12
 8003396:	d102      	bne.n	800339e <HAL_RCC_OscConfig+0x3e>
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	2b03      	cmp	r3, #3
 800339c:	d002      	beq.n	80033a4 <HAL_RCC_OscConfig+0x44>
 800339e:	69bb      	ldr	r3, [r7, #24]
 80033a0:	2b08      	cmp	r3, #8
 80033a2:	d10b      	bne.n	80033bc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033a4:	4b8d      	ldr	r3, [pc, #564]	; (80035dc <HAL_RCC_OscConfig+0x27c>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d05b      	beq.n	8003468 <HAL_RCC_OscConfig+0x108>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d157      	bne.n	8003468 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e2e1      	b.n	8003980 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033c4:	d106      	bne.n	80033d4 <HAL_RCC_OscConfig+0x74>
 80033c6:	4b85      	ldr	r3, [pc, #532]	; (80035dc <HAL_RCC_OscConfig+0x27c>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a84      	ldr	r2, [pc, #528]	; (80035dc <HAL_RCC_OscConfig+0x27c>)
 80033cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033d0:	6013      	str	r3, [r2, #0]
 80033d2:	e01d      	b.n	8003410 <HAL_RCC_OscConfig+0xb0>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033dc:	d10c      	bne.n	80033f8 <HAL_RCC_OscConfig+0x98>
 80033de:	4b7f      	ldr	r3, [pc, #508]	; (80035dc <HAL_RCC_OscConfig+0x27c>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a7e      	ldr	r2, [pc, #504]	; (80035dc <HAL_RCC_OscConfig+0x27c>)
 80033e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033e8:	6013      	str	r3, [r2, #0]
 80033ea:	4b7c      	ldr	r3, [pc, #496]	; (80035dc <HAL_RCC_OscConfig+0x27c>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a7b      	ldr	r2, [pc, #492]	; (80035dc <HAL_RCC_OscConfig+0x27c>)
 80033f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033f4:	6013      	str	r3, [r2, #0]
 80033f6:	e00b      	b.n	8003410 <HAL_RCC_OscConfig+0xb0>
 80033f8:	4b78      	ldr	r3, [pc, #480]	; (80035dc <HAL_RCC_OscConfig+0x27c>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a77      	ldr	r2, [pc, #476]	; (80035dc <HAL_RCC_OscConfig+0x27c>)
 80033fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003402:	6013      	str	r3, [r2, #0]
 8003404:	4b75      	ldr	r3, [pc, #468]	; (80035dc <HAL_RCC_OscConfig+0x27c>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a74      	ldr	r2, [pc, #464]	; (80035dc <HAL_RCC_OscConfig+0x27c>)
 800340a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800340e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d013      	beq.n	8003440 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003418:	f7fd fe3c 	bl	8001094 <HAL_GetTick>
 800341c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800341e:	e008      	b.n	8003432 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003420:	f7fd fe38 	bl	8001094 <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	2b64      	cmp	r3, #100	; 0x64
 800342c:	d901      	bls.n	8003432 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	e2a6      	b.n	8003980 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003432:	4b6a      	ldr	r3, [pc, #424]	; (80035dc <HAL_RCC_OscConfig+0x27c>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d0f0      	beq.n	8003420 <HAL_RCC_OscConfig+0xc0>
 800343e:	e014      	b.n	800346a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003440:	f7fd fe28 	bl	8001094 <HAL_GetTick>
 8003444:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003446:	e008      	b.n	800345a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003448:	f7fd fe24 	bl	8001094 <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	2b64      	cmp	r3, #100	; 0x64
 8003454:	d901      	bls.n	800345a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e292      	b.n	8003980 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800345a:	4b60      	ldr	r3, [pc, #384]	; (80035dc <HAL_RCC_OscConfig+0x27c>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d1f0      	bne.n	8003448 <HAL_RCC_OscConfig+0xe8>
 8003466:	e000      	b.n	800346a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003468:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0302 	and.w	r3, r3, #2
 8003472:	2b00      	cmp	r3, #0
 8003474:	d075      	beq.n	8003562 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003476:	4b59      	ldr	r3, [pc, #356]	; (80035dc <HAL_RCC_OscConfig+0x27c>)
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	f003 030c 	and.w	r3, r3, #12
 800347e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003480:	4b56      	ldr	r3, [pc, #344]	; (80035dc <HAL_RCC_OscConfig+0x27c>)
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	f003 0303 	and.w	r3, r3, #3
 8003488:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800348a:	69bb      	ldr	r3, [r7, #24]
 800348c:	2b0c      	cmp	r3, #12
 800348e:	d102      	bne.n	8003496 <HAL_RCC_OscConfig+0x136>
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	2b02      	cmp	r3, #2
 8003494:	d002      	beq.n	800349c <HAL_RCC_OscConfig+0x13c>
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	2b04      	cmp	r3, #4
 800349a:	d11f      	bne.n	80034dc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800349c:	4b4f      	ldr	r3, [pc, #316]	; (80035dc <HAL_RCC_OscConfig+0x27c>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d005      	beq.n	80034b4 <HAL_RCC_OscConfig+0x154>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d101      	bne.n	80034b4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e265      	b.n	8003980 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034b4:	4b49      	ldr	r3, [pc, #292]	; (80035dc <HAL_RCC_OscConfig+0x27c>)
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	691b      	ldr	r3, [r3, #16]
 80034c0:	061b      	lsls	r3, r3, #24
 80034c2:	4946      	ldr	r1, [pc, #280]	; (80035dc <HAL_RCC_OscConfig+0x27c>)
 80034c4:	4313      	orrs	r3, r2
 80034c6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80034c8:	4b45      	ldr	r3, [pc, #276]	; (80035e0 <HAL_RCC_OscConfig+0x280>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7fd fd95 	bl	8000ffc <HAL_InitTick>
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d043      	beq.n	8003560 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e251      	b.n	8003980 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d023      	beq.n	800352c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034e4:	4b3d      	ldr	r3, [pc, #244]	; (80035dc <HAL_RCC_OscConfig+0x27c>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a3c      	ldr	r2, [pc, #240]	; (80035dc <HAL_RCC_OscConfig+0x27c>)
 80034ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f0:	f7fd fdd0 	bl	8001094 <HAL_GetTick>
 80034f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034f6:	e008      	b.n	800350a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034f8:	f7fd fdcc 	bl	8001094 <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	2b02      	cmp	r3, #2
 8003504:	d901      	bls.n	800350a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e23a      	b.n	8003980 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800350a:	4b34      	ldr	r3, [pc, #208]	; (80035dc <HAL_RCC_OscConfig+0x27c>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003512:	2b00      	cmp	r3, #0
 8003514:	d0f0      	beq.n	80034f8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003516:	4b31      	ldr	r3, [pc, #196]	; (80035dc <HAL_RCC_OscConfig+0x27c>)
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	061b      	lsls	r3, r3, #24
 8003524:	492d      	ldr	r1, [pc, #180]	; (80035dc <HAL_RCC_OscConfig+0x27c>)
 8003526:	4313      	orrs	r3, r2
 8003528:	604b      	str	r3, [r1, #4]
 800352a:	e01a      	b.n	8003562 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800352c:	4b2b      	ldr	r3, [pc, #172]	; (80035dc <HAL_RCC_OscConfig+0x27c>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a2a      	ldr	r2, [pc, #168]	; (80035dc <HAL_RCC_OscConfig+0x27c>)
 8003532:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003536:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003538:	f7fd fdac 	bl	8001094 <HAL_GetTick>
 800353c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800353e:	e008      	b.n	8003552 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003540:	f7fd fda8 	bl	8001094 <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	2b02      	cmp	r3, #2
 800354c:	d901      	bls.n	8003552 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e216      	b.n	8003980 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003552:	4b22      	ldr	r3, [pc, #136]	; (80035dc <HAL_RCC_OscConfig+0x27c>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800355a:	2b00      	cmp	r3, #0
 800355c:	d1f0      	bne.n	8003540 <HAL_RCC_OscConfig+0x1e0>
 800355e:	e000      	b.n	8003562 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003560:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0308 	and.w	r3, r3, #8
 800356a:	2b00      	cmp	r3, #0
 800356c:	d041      	beq.n	80035f2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	695b      	ldr	r3, [r3, #20]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d01c      	beq.n	80035b0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003576:	4b19      	ldr	r3, [pc, #100]	; (80035dc <HAL_RCC_OscConfig+0x27c>)
 8003578:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800357c:	4a17      	ldr	r2, [pc, #92]	; (80035dc <HAL_RCC_OscConfig+0x27c>)
 800357e:	f043 0301 	orr.w	r3, r3, #1
 8003582:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003586:	f7fd fd85 	bl	8001094 <HAL_GetTick>
 800358a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800358c:	e008      	b.n	80035a0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800358e:	f7fd fd81 	bl	8001094 <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	2b02      	cmp	r3, #2
 800359a:	d901      	bls.n	80035a0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	e1ef      	b.n	8003980 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80035a0:	4b0e      	ldr	r3, [pc, #56]	; (80035dc <HAL_RCC_OscConfig+0x27c>)
 80035a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035a6:	f003 0302 	and.w	r3, r3, #2
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d0ef      	beq.n	800358e <HAL_RCC_OscConfig+0x22e>
 80035ae:	e020      	b.n	80035f2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035b0:	4b0a      	ldr	r3, [pc, #40]	; (80035dc <HAL_RCC_OscConfig+0x27c>)
 80035b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035b6:	4a09      	ldr	r2, [pc, #36]	; (80035dc <HAL_RCC_OscConfig+0x27c>)
 80035b8:	f023 0301 	bic.w	r3, r3, #1
 80035bc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035c0:	f7fd fd68 	bl	8001094 <HAL_GetTick>
 80035c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035c6:	e00d      	b.n	80035e4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035c8:	f7fd fd64 	bl	8001094 <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d906      	bls.n	80035e4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e1d2      	b.n	8003980 <HAL_RCC_OscConfig+0x620>
 80035da:	bf00      	nop
 80035dc:	40021000 	.word	0x40021000
 80035e0:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035e4:	4b8c      	ldr	r3, [pc, #560]	; (8003818 <HAL_RCC_OscConfig+0x4b8>)
 80035e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035ea:	f003 0302 	and.w	r3, r3, #2
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d1ea      	bne.n	80035c8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 0304 	and.w	r3, r3, #4
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	f000 80a6 	beq.w	800374c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003600:	2300      	movs	r3, #0
 8003602:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003604:	4b84      	ldr	r3, [pc, #528]	; (8003818 <HAL_RCC_OscConfig+0x4b8>)
 8003606:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003608:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800360c:	2b00      	cmp	r3, #0
 800360e:	d101      	bne.n	8003614 <HAL_RCC_OscConfig+0x2b4>
 8003610:	2301      	movs	r3, #1
 8003612:	e000      	b.n	8003616 <HAL_RCC_OscConfig+0x2b6>
 8003614:	2300      	movs	r3, #0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d00d      	beq.n	8003636 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800361a:	4b7f      	ldr	r3, [pc, #508]	; (8003818 <HAL_RCC_OscConfig+0x4b8>)
 800361c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800361e:	4a7e      	ldr	r2, [pc, #504]	; (8003818 <HAL_RCC_OscConfig+0x4b8>)
 8003620:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003624:	6593      	str	r3, [r2, #88]	; 0x58
 8003626:	4b7c      	ldr	r3, [pc, #496]	; (8003818 <HAL_RCC_OscConfig+0x4b8>)
 8003628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800362a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800362e:	60fb      	str	r3, [r7, #12]
 8003630:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003632:	2301      	movs	r3, #1
 8003634:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003636:	4b79      	ldr	r3, [pc, #484]	; (800381c <HAL_RCC_OscConfig+0x4bc>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800363e:	2b00      	cmp	r3, #0
 8003640:	d118      	bne.n	8003674 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003642:	4b76      	ldr	r3, [pc, #472]	; (800381c <HAL_RCC_OscConfig+0x4bc>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a75      	ldr	r2, [pc, #468]	; (800381c <HAL_RCC_OscConfig+0x4bc>)
 8003648:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800364c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800364e:	f7fd fd21 	bl	8001094 <HAL_GetTick>
 8003652:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003654:	e008      	b.n	8003668 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003656:	f7fd fd1d 	bl	8001094 <HAL_GetTick>
 800365a:	4602      	mov	r2, r0
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	2b02      	cmp	r3, #2
 8003662:	d901      	bls.n	8003668 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003664:	2303      	movs	r3, #3
 8003666:	e18b      	b.n	8003980 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003668:	4b6c      	ldr	r3, [pc, #432]	; (800381c <HAL_RCC_OscConfig+0x4bc>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003670:	2b00      	cmp	r3, #0
 8003672:	d0f0      	beq.n	8003656 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	2b01      	cmp	r3, #1
 800367a:	d108      	bne.n	800368e <HAL_RCC_OscConfig+0x32e>
 800367c:	4b66      	ldr	r3, [pc, #408]	; (8003818 <HAL_RCC_OscConfig+0x4b8>)
 800367e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003682:	4a65      	ldr	r2, [pc, #404]	; (8003818 <HAL_RCC_OscConfig+0x4b8>)
 8003684:	f043 0301 	orr.w	r3, r3, #1
 8003688:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800368c:	e024      	b.n	80036d8 <HAL_RCC_OscConfig+0x378>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	2b05      	cmp	r3, #5
 8003694:	d110      	bne.n	80036b8 <HAL_RCC_OscConfig+0x358>
 8003696:	4b60      	ldr	r3, [pc, #384]	; (8003818 <HAL_RCC_OscConfig+0x4b8>)
 8003698:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800369c:	4a5e      	ldr	r2, [pc, #376]	; (8003818 <HAL_RCC_OscConfig+0x4b8>)
 800369e:	f043 0304 	orr.w	r3, r3, #4
 80036a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036a6:	4b5c      	ldr	r3, [pc, #368]	; (8003818 <HAL_RCC_OscConfig+0x4b8>)
 80036a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ac:	4a5a      	ldr	r2, [pc, #360]	; (8003818 <HAL_RCC_OscConfig+0x4b8>)
 80036ae:	f043 0301 	orr.w	r3, r3, #1
 80036b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036b6:	e00f      	b.n	80036d8 <HAL_RCC_OscConfig+0x378>
 80036b8:	4b57      	ldr	r3, [pc, #348]	; (8003818 <HAL_RCC_OscConfig+0x4b8>)
 80036ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036be:	4a56      	ldr	r2, [pc, #344]	; (8003818 <HAL_RCC_OscConfig+0x4b8>)
 80036c0:	f023 0301 	bic.w	r3, r3, #1
 80036c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036c8:	4b53      	ldr	r3, [pc, #332]	; (8003818 <HAL_RCC_OscConfig+0x4b8>)
 80036ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ce:	4a52      	ldr	r2, [pc, #328]	; (8003818 <HAL_RCC_OscConfig+0x4b8>)
 80036d0:	f023 0304 	bic.w	r3, r3, #4
 80036d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d016      	beq.n	800370e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036e0:	f7fd fcd8 	bl	8001094 <HAL_GetTick>
 80036e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036e6:	e00a      	b.n	80036fe <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036e8:	f7fd fcd4 	bl	8001094 <HAL_GetTick>
 80036ec:	4602      	mov	r2, r0
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d901      	bls.n	80036fe <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e140      	b.n	8003980 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036fe:	4b46      	ldr	r3, [pc, #280]	; (8003818 <HAL_RCC_OscConfig+0x4b8>)
 8003700:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003704:	f003 0302 	and.w	r3, r3, #2
 8003708:	2b00      	cmp	r3, #0
 800370a:	d0ed      	beq.n	80036e8 <HAL_RCC_OscConfig+0x388>
 800370c:	e015      	b.n	800373a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800370e:	f7fd fcc1 	bl	8001094 <HAL_GetTick>
 8003712:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003714:	e00a      	b.n	800372c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003716:	f7fd fcbd 	bl	8001094 <HAL_GetTick>
 800371a:	4602      	mov	r2, r0
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	f241 3288 	movw	r2, #5000	; 0x1388
 8003724:	4293      	cmp	r3, r2
 8003726:	d901      	bls.n	800372c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003728:	2303      	movs	r3, #3
 800372a:	e129      	b.n	8003980 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800372c:	4b3a      	ldr	r3, [pc, #232]	; (8003818 <HAL_RCC_OscConfig+0x4b8>)
 800372e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003732:	f003 0302 	and.w	r3, r3, #2
 8003736:	2b00      	cmp	r3, #0
 8003738:	d1ed      	bne.n	8003716 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800373a:	7ffb      	ldrb	r3, [r7, #31]
 800373c:	2b01      	cmp	r3, #1
 800373e:	d105      	bne.n	800374c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003740:	4b35      	ldr	r3, [pc, #212]	; (8003818 <HAL_RCC_OscConfig+0x4b8>)
 8003742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003744:	4a34      	ldr	r2, [pc, #208]	; (8003818 <HAL_RCC_OscConfig+0x4b8>)
 8003746:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800374a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0320 	and.w	r3, r3, #32
 8003754:	2b00      	cmp	r3, #0
 8003756:	d03c      	beq.n	80037d2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	699b      	ldr	r3, [r3, #24]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d01c      	beq.n	800379a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003760:	4b2d      	ldr	r3, [pc, #180]	; (8003818 <HAL_RCC_OscConfig+0x4b8>)
 8003762:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003766:	4a2c      	ldr	r2, [pc, #176]	; (8003818 <HAL_RCC_OscConfig+0x4b8>)
 8003768:	f043 0301 	orr.w	r3, r3, #1
 800376c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003770:	f7fd fc90 	bl	8001094 <HAL_GetTick>
 8003774:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003776:	e008      	b.n	800378a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003778:	f7fd fc8c 	bl	8001094 <HAL_GetTick>
 800377c:	4602      	mov	r2, r0
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	2b02      	cmp	r3, #2
 8003784:	d901      	bls.n	800378a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e0fa      	b.n	8003980 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800378a:	4b23      	ldr	r3, [pc, #140]	; (8003818 <HAL_RCC_OscConfig+0x4b8>)
 800378c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003790:	f003 0302 	and.w	r3, r3, #2
 8003794:	2b00      	cmp	r3, #0
 8003796:	d0ef      	beq.n	8003778 <HAL_RCC_OscConfig+0x418>
 8003798:	e01b      	b.n	80037d2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800379a:	4b1f      	ldr	r3, [pc, #124]	; (8003818 <HAL_RCC_OscConfig+0x4b8>)
 800379c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037a0:	4a1d      	ldr	r2, [pc, #116]	; (8003818 <HAL_RCC_OscConfig+0x4b8>)
 80037a2:	f023 0301 	bic.w	r3, r3, #1
 80037a6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037aa:	f7fd fc73 	bl	8001094 <HAL_GetTick>
 80037ae:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80037b0:	e008      	b.n	80037c4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80037b2:	f7fd fc6f 	bl	8001094 <HAL_GetTick>
 80037b6:	4602      	mov	r2, r0
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	1ad3      	subs	r3, r2, r3
 80037bc:	2b02      	cmp	r3, #2
 80037be:	d901      	bls.n	80037c4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80037c0:	2303      	movs	r3, #3
 80037c2:	e0dd      	b.n	8003980 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80037c4:	4b14      	ldr	r3, [pc, #80]	; (8003818 <HAL_RCC_OscConfig+0x4b8>)
 80037c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037ca:	f003 0302 	and.w	r3, r3, #2
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d1ef      	bne.n	80037b2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	69db      	ldr	r3, [r3, #28]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	f000 80d1 	beq.w	800397e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80037dc:	4b0e      	ldr	r3, [pc, #56]	; (8003818 <HAL_RCC_OscConfig+0x4b8>)
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	f003 030c 	and.w	r3, r3, #12
 80037e4:	2b0c      	cmp	r3, #12
 80037e6:	f000 808b 	beq.w	8003900 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	69db      	ldr	r3, [r3, #28]
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d15e      	bne.n	80038b0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037f2:	4b09      	ldr	r3, [pc, #36]	; (8003818 <HAL_RCC_OscConfig+0x4b8>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a08      	ldr	r2, [pc, #32]	; (8003818 <HAL_RCC_OscConfig+0x4b8>)
 80037f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037fe:	f7fd fc49 	bl	8001094 <HAL_GetTick>
 8003802:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003804:	e00c      	b.n	8003820 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003806:	f7fd fc45 	bl	8001094 <HAL_GetTick>
 800380a:	4602      	mov	r2, r0
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	2b02      	cmp	r3, #2
 8003812:	d905      	bls.n	8003820 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003814:	2303      	movs	r3, #3
 8003816:	e0b3      	b.n	8003980 <HAL_RCC_OscConfig+0x620>
 8003818:	40021000 	.word	0x40021000
 800381c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003820:	4b59      	ldr	r3, [pc, #356]	; (8003988 <HAL_RCC_OscConfig+0x628>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003828:	2b00      	cmp	r3, #0
 800382a:	d1ec      	bne.n	8003806 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800382c:	4b56      	ldr	r3, [pc, #344]	; (8003988 <HAL_RCC_OscConfig+0x628>)
 800382e:	68da      	ldr	r2, [r3, #12]
 8003830:	4b56      	ldr	r3, [pc, #344]	; (800398c <HAL_RCC_OscConfig+0x62c>)
 8003832:	4013      	ands	r3, r2
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	6a11      	ldr	r1, [r2, #32]
 8003838:	687a      	ldr	r2, [r7, #4]
 800383a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800383c:	3a01      	subs	r2, #1
 800383e:	0112      	lsls	r2, r2, #4
 8003840:	4311      	orrs	r1, r2
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003846:	0212      	lsls	r2, r2, #8
 8003848:	4311      	orrs	r1, r2
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800384e:	0852      	lsrs	r2, r2, #1
 8003850:	3a01      	subs	r2, #1
 8003852:	0552      	lsls	r2, r2, #21
 8003854:	4311      	orrs	r1, r2
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800385a:	0852      	lsrs	r2, r2, #1
 800385c:	3a01      	subs	r2, #1
 800385e:	0652      	lsls	r2, r2, #25
 8003860:	4311      	orrs	r1, r2
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003866:	06d2      	lsls	r2, r2, #27
 8003868:	430a      	orrs	r2, r1
 800386a:	4947      	ldr	r1, [pc, #284]	; (8003988 <HAL_RCC_OscConfig+0x628>)
 800386c:	4313      	orrs	r3, r2
 800386e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003870:	4b45      	ldr	r3, [pc, #276]	; (8003988 <HAL_RCC_OscConfig+0x628>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a44      	ldr	r2, [pc, #272]	; (8003988 <HAL_RCC_OscConfig+0x628>)
 8003876:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800387a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800387c:	4b42      	ldr	r3, [pc, #264]	; (8003988 <HAL_RCC_OscConfig+0x628>)
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	4a41      	ldr	r2, [pc, #260]	; (8003988 <HAL_RCC_OscConfig+0x628>)
 8003882:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003886:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003888:	f7fd fc04 	bl	8001094 <HAL_GetTick>
 800388c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800388e:	e008      	b.n	80038a2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003890:	f7fd fc00 	bl	8001094 <HAL_GetTick>
 8003894:	4602      	mov	r2, r0
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	2b02      	cmp	r3, #2
 800389c:	d901      	bls.n	80038a2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	e06e      	b.n	8003980 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038a2:	4b39      	ldr	r3, [pc, #228]	; (8003988 <HAL_RCC_OscConfig+0x628>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d0f0      	beq.n	8003890 <HAL_RCC_OscConfig+0x530>
 80038ae:	e066      	b.n	800397e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038b0:	4b35      	ldr	r3, [pc, #212]	; (8003988 <HAL_RCC_OscConfig+0x628>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a34      	ldr	r2, [pc, #208]	; (8003988 <HAL_RCC_OscConfig+0x628>)
 80038b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038ba:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80038bc:	4b32      	ldr	r3, [pc, #200]	; (8003988 <HAL_RCC_OscConfig+0x628>)
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	4a31      	ldr	r2, [pc, #196]	; (8003988 <HAL_RCC_OscConfig+0x628>)
 80038c2:	f023 0303 	bic.w	r3, r3, #3
 80038c6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80038c8:	4b2f      	ldr	r3, [pc, #188]	; (8003988 <HAL_RCC_OscConfig+0x628>)
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	4a2e      	ldr	r2, [pc, #184]	; (8003988 <HAL_RCC_OscConfig+0x628>)
 80038ce:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80038d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038d6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038d8:	f7fd fbdc 	bl	8001094 <HAL_GetTick>
 80038dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038de:	e008      	b.n	80038f2 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038e0:	f7fd fbd8 	bl	8001094 <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	2b02      	cmp	r3, #2
 80038ec:	d901      	bls.n	80038f2 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e046      	b.n	8003980 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038f2:	4b25      	ldr	r3, [pc, #148]	; (8003988 <HAL_RCC_OscConfig+0x628>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d1f0      	bne.n	80038e0 <HAL_RCC_OscConfig+0x580>
 80038fe:	e03e      	b.n	800397e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	69db      	ldr	r3, [r3, #28]
 8003904:	2b01      	cmp	r3, #1
 8003906:	d101      	bne.n	800390c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e039      	b.n	8003980 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800390c:	4b1e      	ldr	r3, [pc, #120]	; (8003988 <HAL_RCC_OscConfig+0x628>)
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	f003 0203 	and.w	r2, r3, #3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6a1b      	ldr	r3, [r3, #32]
 800391c:	429a      	cmp	r2, r3
 800391e:	d12c      	bne.n	800397a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392a:	3b01      	subs	r3, #1
 800392c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800392e:	429a      	cmp	r2, r3
 8003930:	d123      	bne.n	800397a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800393c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800393e:	429a      	cmp	r2, r3
 8003940:	d11b      	bne.n	800397a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800394c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800394e:	429a      	cmp	r2, r3
 8003950:	d113      	bne.n	800397a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395c:	085b      	lsrs	r3, r3, #1
 800395e:	3b01      	subs	r3, #1
 8003960:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003962:	429a      	cmp	r2, r3
 8003964:	d109      	bne.n	800397a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003970:	085b      	lsrs	r3, r3, #1
 8003972:	3b01      	subs	r3, #1
 8003974:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003976:	429a      	cmp	r2, r3
 8003978:	d001      	beq.n	800397e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e000      	b.n	8003980 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800397e:	2300      	movs	r3, #0
}
 8003980:	4618      	mov	r0, r3
 8003982:	3720      	adds	r7, #32
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}
 8003988:	40021000 	.word	0x40021000
 800398c:	019f800c 	.word	0x019f800c

08003990 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b086      	sub	sp, #24
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800399a:	2300      	movs	r3, #0
 800399c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d101      	bne.n	80039a8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e11e      	b.n	8003be6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039a8:	4b91      	ldr	r3, [pc, #580]	; (8003bf0 <HAL_RCC_ClockConfig+0x260>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 030f 	and.w	r3, r3, #15
 80039b0:	683a      	ldr	r2, [r7, #0]
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d910      	bls.n	80039d8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039b6:	4b8e      	ldr	r3, [pc, #568]	; (8003bf0 <HAL_RCC_ClockConfig+0x260>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f023 020f 	bic.w	r2, r3, #15
 80039be:	498c      	ldr	r1, [pc, #560]	; (8003bf0 <HAL_RCC_ClockConfig+0x260>)
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039c6:	4b8a      	ldr	r3, [pc, #552]	; (8003bf0 <HAL_RCC_ClockConfig+0x260>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 030f 	and.w	r3, r3, #15
 80039ce:	683a      	ldr	r2, [r7, #0]
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d001      	beq.n	80039d8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e106      	b.n	8003be6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0301 	and.w	r3, r3, #1
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d073      	beq.n	8003acc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	2b03      	cmp	r3, #3
 80039ea:	d129      	bne.n	8003a40 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039ec:	4b81      	ldr	r3, [pc, #516]	; (8003bf4 <HAL_RCC_ClockConfig+0x264>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d101      	bne.n	80039fc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e0f4      	b.n	8003be6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80039fc:	f000 f99e 	bl	8003d3c <RCC_GetSysClockFreqFromPLLSource>
 8003a00:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	4a7c      	ldr	r2, [pc, #496]	; (8003bf8 <HAL_RCC_ClockConfig+0x268>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d93f      	bls.n	8003a8a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003a0a:	4b7a      	ldr	r3, [pc, #488]	; (8003bf4 <HAL_RCC_ClockConfig+0x264>)
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d009      	beq.n	8003a2a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d033      	beq.n	8003a8a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d12f      	bne.n	8003a8a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003a2a:	4b72      	ldr	r3, [pc, #456]	; (8003bf4 <HAL_RCC_ClockConfig+0x264>)
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a32:	4a70      	ldr	r2, [pc, #448]	; (8003bf4 <HAL_RCC_ClockConfig+0x264>)
 8003a34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a38:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003a3a:	2380      	movs	r3, #128	; 0x80
 8003a3c:	617b      	str	r3, [r7, #20]
 8003a3e:	e024      	b.n	8003a8a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	d107      	bne.n	8003a58 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a48:	4b6a      	ldr	r3, [pc, #424]	; (8003bf4 <HAL_RCC_ClockConfig+0x264>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d109      	bne.n	8003a68 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e0c6      	b.n	8003be6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a58:	4b66      	ldr	r3, [pc, #408]	; (8003bf4 <HAL_RCC_ClockConfig+0x264>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d101      	bne.n	8003a68 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e0be      	b.n	8003be6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003a68:	f000 f8ce 	bl	8003c08 <HAL_RCC_GetSysClockFreq>
 8003a6c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	4a61      	ldr	r2, [pc, #388]	; (8003bf8 <HAL_RCC_ClockConfig+0x268>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d909      	bls.n	8003a8a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003a76:	4b5f      	ldr	r3, [pc, #380]	; (8003bf4 <HAL_RCC_ClockConfig+0x264>)
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a7e:	4a5d      	ldr	r2, [pc, #372]	; (8003bf4 <HAL_RCC_ClockConfig+0x264>)
 8003a80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a84:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003a86:	2380      	movs	r3, #128	; 0x80
 8003a88:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a8a:	4b5a      	ldr	r3, [pc, #360]	; (8003bf4 <HAL_RCC_ClockConfig+0x264>)
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	f023 0203 	bic.w	r2, r3, #3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	4957      	ldr	r1, [pc, #348]	; (8003bf4 <HAL_RCC_ClockConfig+0x264>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a9c:	f7fd fafa 	bl	8001094 <HAL_GetTick>
 8003aa0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aa2:	e00a      	b.n	8003aba <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003aa4:	f7fd faf6 	bl	8001094 <HAL_GetTick>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d901      	bls.n	8003aba <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e095      	b.n	8003be6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aba:	4b4e      	ldr	r3, [pc, #312]	; (8003bf4 <HAL_RCC_ClockConfig+0x264>)
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	f003 020c 	and.w	r2, r3, #12
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d1eb      	bne.n	8003aa4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0302 	and.w	r3, r3, #2
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d023      	beq.n	8003b20 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0304 	and.w	r3, r3, #4
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d005      	beq.n	8003af0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ae4:	4b43      	ldr	r3, [pc, #268]	; (8003bf4 <HAL_RCC_ClockConfig+0x264>)
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	4a42      	ldr	r2, [pc, #264]	; (8003bf4 <HAL_RCC_ClockConfig+0x264>)
 8003aea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003aee:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0308 	and.w	r3, r3, #8
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d007      	beq.n	8003b0c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003afc:	4b3d      	ldr	r3, [pc, #244]	; (8003bf4 <HAL_RCC_ClockConfig+0x264>)
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003b04:	4a3b      	ldr	r2, [pc, #236]	; (8003bf4 <HAL_RCC_ClockConfig+0x264>)
 8003b06:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003b0a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b0c:	4b39      	ldr	r3, [pc, #228]	; (8003bf4 <HAL_RCC_ClockConfig+0x264>)
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	4936      	ldr	r1, [pc, #216]	; (8003bf4 <HAL_RCC_ClockConfig+0x264>)
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	608b      	str	r3, [r1, #8]
 8003b1e:	e008      	b.n	8003b32 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	2b80      	cmp	r3, #128	; 0x80
 8003b24:	d105      	bne.n	8003b32 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003b26:	4b33      	ldr	r3, [pc, #204]	; (8003bf4 <HAL_RCC_ClockConfig+0x264>)
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	4a32      	ldr	r2, [pc, #200]	; (8003bf4 <HAL_RCC_ClockConfig+0x264>)
 8003b2c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b30:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b32:	4b2f      	ldr	r3, [pc, #188]	; (8003bf0 <HAL_RCC_ClockConfig+0x260>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 030f 	and.w	r3, r3, #15
 8003b3a:	683a      	ldr	r2, [r7, #0]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d21d      	bcs.n	8003b7c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b40:	4b2b      	ldr	r3, [pc, #172]	; (8003bf0 <HAL_RCC_ClockConfig+0x260>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f023 020f 	bic.w	r2, r3, #15
 8003b48:	4929      	ldr	r1, [pc, #164]	; (8003bf0 <HAL_RCC_ClockConfig+0x260>)
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003b50:	f7fd faa0 	bl	8001094 <HAL_GetTick>
 8003b54:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b56:	e00a      	b.n	8003b6e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b58:	f7fd fa9c 	bl	8001094 <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d901      	bls.n	8003b6e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e03b      	b.n	8003be6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b6e:	4b20      	ldr	r3, [pc, #128]	; (8003bf0 <HAL_RCC_ClockConfig+0x260>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 030f 	and.w	r3, r3, #15
 8003b76:	683a      	ldr	r2, [r7, #0]
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d1ed      	bne.n	8003b58 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0304 	and.w	r3, r3, #4
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d008      	beq.n	8003b9a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b88:	4b1a      	ldr	r3, [pc, #104]	; (8003bf4 <HAL_RCC_ClockConfig+0x264>)
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	4917      	ldr	r1, [pc, #92]	; (8003bf4 <HAL_RCC_ClockConfig+0x264>)
 8003b96:	4313      	orrs	r3, r2
 8003b98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0308 	and.w	r3, r3, #8
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d009      	beq.n	8003bba <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ba6:	4b13      	ldr	r3, [pc, #76]	; (8003bf4 <HAL_RCC_ClockConfig+0x264>)
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	691b      	ldr	r3, [r3, #16]
 8003bb2:	00db      	lsls	r3, r3, #3
 8003bb4:	490f      	ldr	r1, [pc, #60]	; (8003bf4 <HAL_RCC_ClockConfig+0x264>)
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003bba:	f000 f825 	bl	8003c08 <HAL_RCC_GetSysClockFreq>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	4b0c      	ldr	r3, [pc, #48]	; (8003bf4 <HAL_RCC_ClockConfig+0x264>)
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	091b      	lsrs	r3, r3, #4
 8003bc6:	f003 030f 	and.w	r3, r3, #15
 8003bca:	490c      	ldr	r1, [pc, #48]	; (8003bfc <HAL_RCC_ClockConfig+0x26c>)
 8003bcc:	5ccb      	ldrb	r3, [r1, r3]
 8003bce:	f003 031f 	and.w	r3, r3, #31
 8003bd2:	fa22 f303 	lsr.w	r3, r2, r3
 8003bd6:	4a0a      	ldr	r2, [pc, #40]	; (8003c00 <HAL_RCC_ClockConfig+0x270>)
 8003bd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003bda:	4b0a      	ldr	r3, [pc, #40]	; (8003c04 <HAL_RCC_ClockConfig+0x274>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4618      	mov	r0, r3
 8003be0:	f7fd fa0c 	bl	8000ffc <HAL_InitTick>
 8003be4:	4603      	mov	r3, r0
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3718      	adds	r7, #24
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	40022000 	.word	0x40022000
 8003bf4:	40021000 	.word	0x40021000
 8003bf8:	04c4b400 	.word	0x04c4b400
 8003bfc:	080064c0 	.word	0x080064c0
 8003c00:	20000000 	.word	0x20000000
 8003c04:	20000004 	.word	0x20000004

08003c08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b087      	sub	sp, #28
 8003c0c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003c0e:	4b2c      	ldr	r3, [pc, #176]	; (8003cc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	f003 030c 	and.w	r3, r3, #12
 8003c16:	2b04      	cmp	r3, #4
 8003c18:	d102      	bne.n	8003c20 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003c1a:	4b2a      	ldr	r3, [pc, #168]	; (8003cc4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003c1c:	613b      	str	r3, [r7, #16]
 8003c1e:	e047      	b.n	8003cb0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003c20:	4b27      	ldr	r3, [pc, #156]	; (8003cc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	f003 030c 	and.w	r3, r3, #12
 8003c28:	2b08      	cmp	r3, #8
 8003c2a:	d102      	bne.n	8003c32 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003c2c:	4b26      	ldr	r3, [pc, #152]	; (8003cc8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c2e:	613b      	str	r3, [r7, #16]
 8003c30:	e03e      	b.n	8003cb0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003c32:	4b23      	ldr	r3, [pc, #140]	; (8003cc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	f003 030c 	and.w	r3, r3, #12
 8003c3a:	2b0c      	cmp	r3, #12
 8003c3c:	d136      	bne.n	8003cac <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c3e:	4b20      	ldr	r3, [pc, #128]	; (8003cc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	f003 0303 	and.w	r3, r3, #3
 8003c46:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c48:	4b1d      	ldr	r3, [pc, #116]	; (8003cc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	091b      	lsrs	r3, r3, #4
 8003c4e:	f003 030f 	and.w	r3, r3, #15
 8003c52:	3301      	adds	r3, #1
 8003c54:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2b03      	cmp	r3, #3
 8003c5a:	d10c      	bne.n	8003c76 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c5c:	4a1a      	ldr	r2, [pc, #104]	; (8003cc8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c64:	4a16      	ldr	r2, [pc, #88]	; (8003cc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c66:	68d2      	ldr	r2, [r2, #12]
 8003c68:	0a12      	lsrs	r2, r2, #8
 8003c6a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003c6e:	fb02 f303 	mul.w	r3, r2, r3
 8003c72:	617b      	str	r3, [r7, #20]
      break;
 8003c74:	e00c      	b.n	8003c90 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c76:	4a13      	ldr	r2, [pc, #76]	; (8003cc4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c7e:	4a10      	ldr	r2, [pc, #64]	; (8003cc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c80:	68d2      	ldr	r2, [r2, #12]
 8003c82:	0a12      	lsrs	r2, r2, #8
 8003c84:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003c88:	fb02 f303 	mul.w	r3, r2, r3
 8003c8c:	617b      	str	r3, [r7, #20]
      break;
 8003c8e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003c90:	4b0b      	ldr	r3, [pc, #44]	; (8003cc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	0e5b      	lsrs	r3, r3, #25
 8003c96:	f003 0303 	and.w	r3, r3, #3
 8003c9a:	3301      	adds	r3, #1
 8003c9c:	005b      	lsls	r3, r3, #1
 8003c9e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003ca0:	697a      	ldr	r2, [r7, #20]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ca8:	613b      	str	r3, [r7, #16]
 8003caa:	e001      	b.n	8003cb0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003cac:	2300      	movs	r3, #0
 8003cae:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003cb0:	693b      	ldr	r3, [r7, #16]
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	371c      	adds	r7, #28
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr
 8003cbe:	bf00      	nop
 8003cc0:	40021000 	.word	0x40021000
 8003cc4:	00f42400 	.word	0x00f42400
 8003cc8:	016e3600 	.word	0x016e3600

08003ccc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cd0:	4b03      	ldr	r3, [pc, #12]	; (8003ce0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr
 8003cde:	bf00      	nop
 8003ce0:	20000000 	.word	0x20000000

08003ce4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003ce8:	f7ff fff0 	bl	8003ccc <HAL_RCC_GetHCLKFreq>
 8003cec:	4602      	mov	r2, r0
 8003cee:	4b06      	ldr	r3, [pc, #24]	; (8003d08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	0a1b      	lsrs	r3, r3, #8
 8003cf4:	f003 0307 	and.w	r3, r3, #7
 8003cf8:	4904      	ldr	r1, [pc, #16]	; (8003d0c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003cfa:	5ccb      	ldrb	r3, [r1, r3]
 8003cfc:	f003 031f 	and.w	r3, r3, #31
 8003d00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	40021000 	.word	0x40021000
 8003d0c:	080064d0 	.word	0x080064d0

08003d10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003d14:	f7ff ffda 	bl	8003ccc <HAL_RCC_GetHCLKFreq>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	4b06      	ldr	r3, [pc, #24]	; (8003d34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	0adb      	lsrs	r3, r3, #11
 8003d20:	f003 0307 	and.w	r3, r3, #7
 8003d24:	4904      	ldr	r1, [pc, #16]	; (8003d38 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003d26:	5ccb      	ldrb	r3, [r1, r3]
 8003d28:	f003 031f 	and.w	r3, r3, #31
 8003d2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	40021000 	.word	0x40021000
 8003d38:	080064d0 	.word	0x080064d0

08003d3c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b087      	sub	sp, #28
 8003d40:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d42:	4b1e      	ldr	r3, [pc, #120]	; (8003dbc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d44:	68db      	ldr	r3, [r3, #12]
 8003d46:	f003 0303 	and.w	r3, r3, #3
 8003d4a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d4c:	4b1b      	ldr	r3, [pc, #108]	; (8003dbc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	091b      	lsrs	r3, r3, #4
 8003d52:	f003 030f 	and.w	r3, r3, #15
 8003d56:	3301      	adds	r3, #1
 8003d58:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	2b03      	cmp	r3, #3
 8003d5e:	d10c      	bne.n	8003d7a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d60:	4a17      	ldr	r2, [pc, #92]	; (8003dc0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d68:	4a14      	ldr	r2, [pc, #80]	; (8003dbc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d6a:	68d2      	ldr	r2, [r2, #12]
 8003d6c:	0a12      	lsrs	r2, r2, #8
 8003d6e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003d72:	fb02 f303 	mul.w	r3, r2, r3
 8003d76:	617b      	str	r3, [r7, #20]
    break;
 8003d78:	e00c      	b.n	8003d94 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d7a:	4a12      	ldr	r2, [pc, #72]	; (8003dc4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d82:	4a0e      	ldr	r2, [pc, #56]	; (8003dbc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d84:	68d2      	ldr	r2, [r2, #12]
 8003d86:	0a12      	lsrs	r2, r2, #8
 8003d88:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003d8c:	fb02 f303 	mul.w	r3, r2, r3
 8003d90:	617b      	str	r3, [r7, #20]
    break;
 8003d92:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d94:	4b09      	ldr	r3, [pc, #36]	; (8003dbc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	0e5b      	lsrs	r3, r3, #25
 8003d9a:	f003 0303 	and.w	r3, r3, #3
 8003d9e:	3301      	adds	r3, #1
 8003da0:	005b      	lsls	r3, r3, #1
 8003da2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003da4:	697a      	ldr	r2, [r7, #20]
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dac:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003dae:	687b      	ldr	r3, [r7, #4]
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	371c      	adds	r7, #28
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr
 8003dbc:	40021000 	.word	0x40021000
 8003dc0:	016e3600 	.word	0x016e3600
 8003dc4:	00f42400 	.word	0x00f42400

08003dc8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b086      	sub	sp, #24
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	f000 8098 	beq.w	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003de6:	2300      	movs	r3, #0
 8003de8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dea:	4b43      	ldr	r3, [pc, #268]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d10d      	bne.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003df6:	4b40      	ldr	r3, [pc, #256]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dfa:	4a3f      	ldr	r2, [pc, #252]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e00:	6593      	str	r3, [r2, #88]	; 0x58
 8003e02:	4b3d      	ldr	r3, [pc, #244]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e0a:	60bb      	str	r3, [r7, #8]
 8003e0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e12:	4b3a      	ldr	r3, [pc, #232]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a39      	ldr	r2, [pc, #228]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003e18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e1c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e1e:	f7fd f939 	bl	8001094 <HAL_GetTick>
 8003e22:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e24:	e009      	b.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e26:	f7fd f935 	bl	8001094 <HAL_GetTick>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	d902      	bls.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	74fb      	strb	r3, [r7, #19]
        break;
 8003e38:	e005      	b.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e3a:	4b30      	ldr	r3, [pc, #192]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d0ef      	beq.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003e46:	7cfb      	ldrb	r3, [r7, #19]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d159      	bne.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003e4c:	4b2a      	ldr	r3, [pc, #168]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e56:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d01e      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e62:	697a      	ldr	r2, [r7, #20]
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d019      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003e68:	4b23      	ldr	r3, [pc, #140]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e72:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e74:	4b20      	ldr	r3, [pc, #128]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e7a:	4a1f      	ldr	r2, [pc, #124]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e84:	4b1c      	ldr	r3, [pc, #112]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e8a:	4a1b      	ldr	r2, [pc, #108]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003e94:	4a18      	ldr	r2, [pc, #96]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	f003 0301 	and.w	r3, r3, #1
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d016      	beq.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea6:	f7fd f8f5 	bl	8001094 <HAL_GetTick>
 8003eaa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003eac:	e00b      	b.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eae:	f7fd f8f1 	bl	8001094 <HAL_GetTick>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d902      	bls.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	74fb      	strb	r3, [r7, #19]
            break;
 8003ec4:	e006      	b.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ec6:	4b0c      	ldr	r3, [pc, #48]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ecc:	f003 0302 	and.w	r3, r3, #2
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d0ec      	beq.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003ed4:	7cfb      	ldrb	r3, [r7, #19]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d10b      	bne.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003eda:	4b07      	ldr	r3, [pc, #28]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ee0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ee8:	4903      	ldr	r1, [pc, #12]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003ef0:	e008      	b.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ef2:	7cfb      	ldrb	r3, [r7, #19]
 8003ef4:	74bb      	strb	r3, [r7, #18]
 8003ef6:	e005      	b.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003ef8:	40021000 	.word	0x40021000
 8003efc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f00:	7cfb      	ldrb	r3, [r7, #19]
 8003f02:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f04:	7c7b      	ldrb	r3, [r7, #17]
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d105      	bne.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f0a:	4ba7      	ldr	r3, [pc, #668]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f0e:	4aa6      	ldr	r2, [pc, #664]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f14:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0301 	and.w	r3, r3, #1
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00a      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f22:	4ba1      	ldr	r3, [pc, #644]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f28:	f023 0203 	bic.w	r2, r3, #3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	499d      	ldr	r1, [pc, #628]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f32:	4313      	orrs	r3, r2
 8003f34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0302 	and.w	r3, r3, #2
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d00a      	beq.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f44:	4b98      	ldr	r3, [pc, #608]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f4a:	f023 020c 	bic.w	r2, r3, #12
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	4995      	ldr	r1, [pc, #596]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f54:	4313      	orrs	r3, r2
 8003f56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0304 	and.w	r3, r3, #4
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d00a      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f66:	4b90      	ldr	r3, [pc, #576]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f6c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	498c      	ldr	r1, [pc, #560]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f76:	4313      	orrs	r3, r2
 8003f78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 0308 	and.w	r3, r3, #8
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d00a      	beq.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f88:	4b87      	ldr	r3, [pc, #540]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f8e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	691b      	ldr	r3, [r3, #16]
 8003f96:	4984      	ldr	r1, [pc, #528]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0310 	and.w	r3, r3, #16
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d00a      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003faa:	4b7f      	ldr	r3, [pc, #508]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fb0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	695b      	ldr	r3, [r3, #20]
 8003fb8:	497b      	ldr	r1, [pc, #492]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0320 	and.w	r3, r3, #32
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d00a      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003fcc:	4b76      	ldr	r3, [pc, #472]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fd2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	699b      	ldr	r3, [r3, #24]
 8003fda:	4973      	ldr	r1, [pc, #460]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d00a      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003fee:	4b6e      	ldr	r3, [pc, #440]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ff4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	69db      	ldr	r3, [r3, #28]
 8003ffc:	496a      	ldr	r1, [pc, #424]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800400c:	2b00      	cmp	r3, #0
 800400e:	d00a      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004010:	4b65      	ldr	r3, [pc, #404]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004016:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a1b      	ldr	r3, [r3, #32]
 800401e:	4962      	ldr	r1, [pc, #392]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004020:	4313      	orrs	r3, r2
 8004022:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800402e:	2b00      	cmp	r3, #0
 8004030:	d00a      	beq.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004032:	4b5d      	ldr	r3, [pc, #372]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004034:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004038:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004040:	4959      	ldr	r1, [pc, #356]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004042:	4313      	orrs	r3, r2
 8004044:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004050:	2b00      	cmp	r3, #0
 8004052:	d00a      	beq.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004054:	4b54      	ldr	r3, [pc, #336]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004056:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800405a:	f023 0203 	bic.w	r2, r3, #3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004062:	4951      	ldr	r1, [pc, #324]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004064:	4313      	orrs	r3, r2
 8004066:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004072:	2b00      	cmp	r3, #0
 8004074:	d00a      	beq.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004076:	4b4c      	ldr	r3, [pc, #304]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004078:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800407c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004084:	4948      	ldr	r1, [pc, #288]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004086:	4313      	orrs	r3, r2
 8004088:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004094:	2b00      	cmp	r3, #0
 8004096:	d015      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004098:	4b43      	ldr	r3, [pc, #268]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800409a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800409e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a6:	4940      	ldr	r1, [pc, #256]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040a8:	4313      	orrs	r3, r2
 80040aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040b6:	d105      	bne.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040b8:	4b3b      	ldr	r3, [pc, #236]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	4a3a      	ldr	r2, [pc, #232]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040c2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d015      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80040d0:	4b35      	ldr	r3, [pc, #212]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040d6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040de:	4932      	ldr	r1, [pc, #200]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040e0:	4313      	orrs	r3, r2
 80040e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040ee:	d105      	bne.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040f0:	4b2d      	ldr	r3, [pc, #180]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	4a2c      	ldr	r2, [pc, #176]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040fa:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004104:	2b00      	cmp	r3, #0
 8004106:	d015      	beq.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004108:	4b27      	ldr	r3, [pc, #156]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800410a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800410e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004116:	4924      	ldr	r1, [pc, #144]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004118:	4313      	orrs	r3, r2
 800411a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004122:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004126:	d105      	bne.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004128:	4b1f      	ldr	r3, [pc, #124]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	4a1e      	ldr	r2, [pc, #120]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800412e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004132:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800413c:	2b00      	cmp	r3, #0
 800413e:	d015      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004140:	4b19      	ldr	r3, [pc, #100]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004146:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800414e:	4916      	ldr	r1, [pc, #88]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004150:	4313      	orrs	r3, r2
 8004152:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800415a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800415e:	d105      	bne.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004160:	4b11      	ldr	r3, [pc, #68]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	4a10      	ldr	r2, [pc, #64]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004166:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800416a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004174:	2b00      	cmp	r3, #0
 8004176:	d019      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004178:	4b0b      	ldr	r3, [pc, #44]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800417a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800417e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004186:	4908      	ldr	r1, [pc, #32]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004188:	4313      	orrs	r3, r2
 800418a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004192:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004196:	d109      	bne.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004198:	4b03      	ldr	r3, [pc, #12]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	4a02      	ldr	r2, [pc, #8]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800419e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041a2:	60d3      	str	r3, [r2, #12]
 80041a4:	e002      	b.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80041a6:	bf00      	nop
 80041a8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d015      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80041b8:	4b29      	ldr	r3, [pc, #164]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80041ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041be:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041c6:	4926      	ldr	r1, [pc, #152]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80041c8:	4313      	orrs	r3, r2
 80041ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041d6:	d105      	bne.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80041d8:	4b21      	ldr	r3, [pc, #132]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	4a20      	ldr	r2, [pc, #128]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80041de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041e2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d015      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80041f0:	4b1b      	ldr	r3, [pc, #108]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80041f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041f6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041fe:	4918      	ldr	r1, [pc, #96]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004200:	4313      	orrs	r3, r2
 8004202:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800420a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800420e:	d105      	bne.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004210:	4b13      	ldr	r3, [pc, #76]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	4a12      	ldr	r2, [pc, #72]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004216:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800421a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004224:	2b00      	cmp	r3, #0
 8004226:	d015      	beq.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004228:	4b0d      	ldr	r3, [pc, #52]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800422a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800422e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004236:	490a      	ldr	r1, [pc, #40]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004238:	4313      	orrs	r3, r2
 800423a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004242:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004246:	d105      	bne.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004248:	4b05      	ldr	r3, [pc, #20]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	4a04      	ldr	r2, [pc, #16]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800424e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004252:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004254:	7cbb      	ldrb	r3, [r7, #18]
}
 8004256:	4618      	mov	r0, r3
 8004258:	3718      	adds	r7, #24
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop
 8004260:	40021000 	.word	0x40021000

08004264 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b082      	sub	sp, #8
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d101      	bne.n	8004276 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e049      	b.n	800430a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800427c:	b2db      	uxtb	r3, r3
 800427e:	2b00      	cmp	r3, #0
 8004280:	d106      	bne.n	8004290 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f7fc fd9c 	bl	8000dc8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2202      	movs	r2, #2
 8004294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	3304      	adds	r3, #4
 80042a0:	4619      	mov	r1, r3
 80042a2:	4610      	mov	r0, r2
 80042a4:	f000 fb6c 	bl	8004980 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2201      	movs	r2, #1
 80042bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004308:	2300      	movs	r3, #0
}
 800430a:	4618      	mov	r0, r3
 800430c:	3708      	adds	r7, #8
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
	...

08004314 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004314:	b480      	push	{r7}
 8004316:	b085      	sub	sp, #20
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004322:	b2db      	uxtb	r3, r3
 8004324:	2b01      	cmp	r3, #1
 8004326:	d001      	beq.n	800432c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e054      	b.n	80043d6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2202      	movs	r2, #2
 8004330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	68da      	ldr	r2, [r3, #12]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f042 0201 	orr.w	r2, r2, #1
 8004342:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a26      	ldr	r2, [pc, #152]	; (80043e4 <HAL_TIM_Base_Start_IT+0xd0>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d022      	beq.n	8004394 <HAL_TIM_Base_Start_IT+0x80>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004356:	d01d      	beq.n	8004394 <HAL_TIM_Base_Start_IT+0x80>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a22      	ldr	r2, [pc, #136]	; (80043e8 <HAL_TIM_Base_Start_IT+0xd4>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d018      	beq.n	8004394 <HAL_TIM_Base_Start_IT+0x80>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a21      	ldr	r2, [pc, #132]	; (80043ec <HAL_TIM_Base_Start_IT+0xd8>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d013      	beq.n	8004394 <HAL_TIM_Base_Start_IT+0x80>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a1f      	ldr	r2, [pc, #124]	; (80043f0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d00e      	beq.n	8004394 <HAL_TIM_Base_Start_IT+0x80>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a1e      	ldr	r2, [pc, #120]	; (80043f4 <HAL_TIM_Base_Start_IT+0xe0>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d009      	beq.n	8004394 <HAL_TIM_Base_Start_IT+0x80>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a1c      	ldr	r2, [pc, #112]	; (80043f8 <HAL_TIM_Base_Start_IT+0xe4>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d004      	beq.n	8004394 <HAL_TIM_Base_Start_IT+0x80>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a1b      	ldr	r2, [pc, #108]	; (80043fc <HAL_TIM_Base_Start_IT+0xe8>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d115      	bne.n	80043c0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	689a      	ldr	r2, [r3, #8]
 800439a:	4b19      	ldr	r3, [pc, #100]	; (8004400 <HAL_TIM_Base_Start_IT+0xec>)
 800439c:	4013      	ands	r3, r2
 800439e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2b06      	cmp	r3, #6
 80043a4:	d015      	beq.n	80043d2 <HAL_TIM_Base_Start_IT+0xbe>
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043ac:	d011      	beq.n	80043d2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f042 0201 	orr.w	r2, r2, #1
 80043bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043be:	e008      	b.n	80043d2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f042 0201 	orr.w	r2, r2, #1
 80043ce:	601a      	str	r2, [r3, #0]
 80043d0:	e000      	b.n	80043d4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80043d4:	2300      	movs	r3, #0
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3714      	adds	r7, #20
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr
 80043e2:	bf00      	nop
 80043e4:	40012c00 	.word	0x40012c00
 80043e8:	40000400 	.word	0x40000400
 80043ec:	40000800 	.word	0x40000800
 80043f0:	40000c00 	.word	0x40000c00
 80043f4:	40013400 	.word	0x40013400
 80043f8:	40014000 	.word	0x40014000
 80043fc:	40015000 	.word	0x40015000
 8004400:	00010007 	.word	0x00010007

08004404 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b082      	sub	sp, #8
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	691b      	ldr	r3, [r3, #16]
 8004412:	f003 0302 	and.w	r3, r3, #2
 8004416:	2b02      	cmp	r3, #2
 8004418:	d122      	bne.n	8004460 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	f003 0302 	and.w	r3, r3, #2
 8004424:	2b02      	cmp	r3, #2
 8004426:	d11b      	bne.n	8004460 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f06f 0202 	mvn.w	r2, #2
 8004430:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2201      	movs	r2, #1
 8004436:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	699b      	ldr	r3, [r3, #24]
 800443e:	f003 0303 	and.w	r3, r3, #3
 8004442:	2b00      	cmp	r3, #0
 8004444:	d003      	beq.n	800444e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f000 fa7c 	bl	8004944 <HAL_TIM_IC_CaptureCallback>
 800444c:	e005      	b.n	800445a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 fa6e 	bl	8004930 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f000 fa7f 	bl	8004958 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	691b      	ldr	r3, [r3, #16]
 8004466:	f003 0304 	and.w	r3, r3, #4
 800446a:	2b04      	cmp	r3, #4
 800446c:	d122      	bne.n	80044b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	f003 0304 	and.w	r3, r3, #4
 8004478:	2b04      	cmp	r3, #4
 800447a:	d11b      	bne.n	80044b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f06f 0204 	mvn.w	r2, #4
 8004484:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2202      	movs	r2, #2
 800448a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	699b      	ldr	r3, [r3, #24]
 8004492:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004496:	2b00      	cmp	r3, #0
 8004498:	d003      	beq.n	80044a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f000 fa52 	bl	8004944 <HAL_TIM_IC_CaptureCallback>
 80044a0:	e005      	b.n	80044ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f000 fa44 	bl	8004930 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f000 fa55 	bl	8004958 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	691b      	ldr	r3, [r3, #16]
 80044ba:	f003 0308 	and.w	r3, r3, #8
 80044be:	2b08      	cmp	r3, #8
 80044c0:	d122      	bne.n	8004508 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	f003 0308 	and.w	r3, r3, #8
 80044cc:	2b08      	cmp	r3, #8
 80044ce:	d11b      	bne.n	8004508 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f06f 0208 	mvn.w	r2, #8
 80044d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2204      	movs	r2, #4
 80044de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	69db      	ldr	r3, [r3, #28]
 80044e6:	f003 0303 	and.w	r3, r3, #3
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d003      	beq.n	80044f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f000 fa28 	bl	8004944 <HAL_TIM_IC_CaptureCallback>
 80044f4:	e005      	b.n	8004502 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f000 fa1a 	bl	8004930 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f000 fa2b 	bl	8004958 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	691b      	ldr	r3, [r3, #16]
 800450e:	f003 0310 	and.w	r3, r3, #16
 8004512:	2b10      	cmp	r3, #16
 8004514:	d122      	bne.n	800455c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	f003 0310 	and.w	r3, r3, #16
 8004520:	2b10      	cmp	r3, #16
 8004522:	d11b      	bne.n	800455c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f06f 0210 	mvn.w	r2, #16
 800452c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2208      	movs	r2, #8
 8004532:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	69db      	ldr	r3, [r3, #28]
 800453a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800453e:	2b00      	cmp	r3, #0
 8004540:	d003      	beq.n	800454a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f000 f9fe 	bl	8004944 <HAL_TIM_IC_CaptureCallback>
 8004548:	e005      	b.n	8004556 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f000 f9f0 	bl	8004930 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f000 fa01 	bl	8004958 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	691b      	ldr	r3, [r3, #16]
 8004562:	f003 0301 	and.w	r3, r3, #1
 8004566:	2b01      	cmp	r3, #1
 8004568:	d10e      	bne.n	8004588 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	f003 0301 	and.w	r3, r3, #1
 8004574:	2b01      	cmp	r3, #1
 8004576:	d107      	bne.n	8004588 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f06f 0201 	mvn.w	r2, #1
 8004580:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f7fc fa7c 	bl	8000a80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	691b      	ldr	r3, [r3, #16]
 800458e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004592:	2b80      	cmp	r3, #128	; 0x80
 8004594:	d10e      	bne.n	80045b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045a0:	2b80      	cmp	r3, #128	; 0x80
 80045a2:	d107      	bne.n	80045b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80045ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 fbca 	bl	8004d48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	691b      	ldr	r3, [r3, #16]
 80045ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045c2:	d10e      	bne.n	80045e2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045ce:	2b80      	cmp	r3, #128	; 0x80
 80045d0:	d107      	bne.n	80045e2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80045da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f000 fbbd 	bl	8004d5c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	691b      	ldr	r3, [r3, #16]
 80045e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ec:	2b40      	cmp	r3, #64	; 0x40
 80045ee:	d10e      	bne.n	800460e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045fa:	2b40      	cmp	r3, #64	; 0x40
 80045fc:	d107      	bne.n	800460e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004606:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f000 f9af 	bl	800496c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	691b      	ldr	r3, [r3, #16]
 8004614:	f003 0320 	and.w	r3, r3, #32
 8004618:	2b20      	cmp	r3, #32
 800461a:	d10e      	bne.n	800463a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68db      	ldr	r3, [r3, #12]
 8004622:	f003 0320 	and.w	r3, r3, #32
 8004626:	2b20      	cmp	r3, #32
 8004628:	d107      	bne.n	800463a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f06f 0220 	mvn.w	r2, #32
 8004632:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f000 fb7d 	bl	8004d34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	691b      	ldr	r3, [r3, #16]
 8004640:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004644:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004648:	d10f      	bne.n	800466a <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004654:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004658:	d107      	bne.n	800466a <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004662:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f000 fb83 	bl	8004d70 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	691b      	ldr	r3, [r3, #16]
 8004670:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004674:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004678:	d10f      	bne.n	800469a <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004684:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004688:	d107      	bne.n	800469a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004692:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f000 fb75 	bl	8004d84 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	691b      	ldr	r3, [r3, #16]
 80046a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046a8:	d10f      	bne.n	80046ca <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046b8:	d107      	bne.n	80046ca <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80046c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f000 fb67 	bl	8004d98 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	691b      	ldr	r3, [r3, #16]
 80046d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80046d4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80046d8:	d10f      	bne.n	80046fa <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80046e4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80046e8:	d107      	bne.n	80046fa <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80046f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f000 fb59 	bl	8004dac <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046fa:	bf00      	nop
 80046fc:	3708      	adds	r7, #8
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}
	...

08004704 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b084      	sub	sp, #16
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800470e:	2300      	movs	r3, #0
 8004710:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004718:	2b01      	cmp	r3, #1
 800471a:	d101      	bne.n	8004720 <HAL_TIM_ConfigClockSource+0x1c>
 800471c:	2302      	movs	r3, #2
 800471e:	e0f6      	b.n	800490e <HAL_TIM_ConfigClockSource+0x20a>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2202      	movs	r2, #2
 800472c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800473e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004742:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800474a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	68ba      	ldr	r2, [r7, #8]
 8004752:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a6f      	ldr	r2, [pc, #444]	; (8004918 <HAL_TIM_ConfigClockSource+0x214>)
 800475a:	4293      	cmp	r3, r2
 800475c:	f000 80c1 	beq.w	80048e2 <HAL_TIM_ConfigClockSource+0x1de>
 8004760:	4a6d      	ldr	r2, [pc, #436]	; (8004918 <HAL_TIM_ConfigClockSource+0x214>)
 8004762:	4293      	cmp	r3, r2
 8004764:	f200 80c6 	bhi.w	80048f4 <HAL_TIM_ConfigClockSource+0x1f0>
 8004768:	4a6c      	ldr	r2, [pc, #432]	; (800491c <HAL_TIM_ConfigClockSource+0x218>)
 800476a:	4293      	cmp	r3, r2
 800476c:	f000 80b9 	beq.w	80048e2 <HAL_TIM_ConfigClockSource+0x1de>
 8004770:	4a6a      	ldr	r2, [pc, #424]	; (800491c <HAL_TIM_ConfigClockSource+0x218>)
 8004772:	4293      	cmp	r3, r2
 8004774:	f200 80be 	bhi.w	80048f4 <HAL_TIM_ConfigClockSource+0x1f0>
 8004778:	4a69      	ldr	r2, [pc, #420]	; (8004920 <HAL_TIM_ConfigClockSource+0x21c>)
 800477a:	4293      	cmp	r3, r2
 800477c:	f000 80b1 	beq.w	80048e2 <HAL_TIM_ConfigClockSource+0x1de>
 8004780:	4a67      	ldr	r2, [pc, #412]	; (8004920 <HAL_TIM_ConfigClockSource+0x21c>)
 8004782:	4293      	cmp	r3, r2
 8004784:	f200 80b6 	bhi.w	80048f4 <HAL_TIM_ConfigClockSource+0x1f0>
 8004788:	4a66      	ldr	r2, [pc, #408]	; (8004924 <HAL_TIM_ConfigClockSource+0x220>)
 800478a:	4293      	cmp	r3, r2
 800478c:	f000 80a9 	beq.w	80048e2 <HAL_TIM_ConfigClockSource+0x1de>
 8004790:	4a64      	ldr	r2, [pc, #400]	; (8004924 <HAL_TIM_ConfigClockSource+0x220>)
 8004792:	4293      	cmp	r3, r2
 8004794:	f200 80ae 	bhi.w	80048f4 <HAL_TIM_ConfigClockSource+0x1f0>
 8004798:	4a63      	ldr	r2, [pc, #396]	; (8004928 <HAL_TIM_ConfigClockSource+0x224>)
 800479a:	4293      	cmp	r3, r2
 800479c:	f000 80a1 	beq.w	80048e2 <HAL_TIM_ConfigClockSource+0x1de>
 80047a0:	4a61      	ldr	r2, [pc, #388]	; (8004928 <HAL_TIM_ConfigClockSource+0x224>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	f200 80a6 	bhi.w	80048f4 <HAL_TIM_ConfigClockSource+0x1f0>
 80047a8:	4a60      	ldr	r2, [pc, #384]	; (800492c <HAL_TIM_ConfigClockSource+0x228>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	f000 8099 	beq.w	80048e2 <HAL_TIM_ConfigClockSource+0x1de>
 80047b0:	4a5e      	ldr	r2, [pc, #376]	; (800492c <HAL_TIM_ConfigClockSource+0x228>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	f200 809e 	bhi.w	80048f4 <HAL_TIM_ConfigClockSource+0x1f0>
 80047b8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80047bc:	f000 8091 	beq.w	80048e2 <HAL_TIM_ConfigClockSource+0x1de>
 80047c0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80047c4:	f200 8096 	bhi.w	80048f4 <HAL_TIM_ConfigClockSource+0x1f0>
 80047c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047cc:	f000 8089 	beq.w	80048e2 <HAL_TIM_ConfigClockSource+0x1de>
 80047d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047d4:	f200 808e 	bhi.w	80048f4 <HAL_TIM_ConfigClockSource+0x1f0>
 80047d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047dc:	d03e      	beq.n	800485c <HAL_TIM_ConfigClockSource+0x158>
 80047de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047e2:	f200 8087 	bhi.w	80048f4 <HAL_TIM_ConfigClockSource+0x1f0>
 80047e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047ea:	f000 8086 	beq.w	80048fa <HAL_TIM_ConfigClockSource+0x1f6>
 80047ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047f2:	d87f      	bhi.n	80048f4 <HAL_TIM_ConfigClockSource+0x1f0>
 80047f4:	2b70      	cmp	r3, #112	; 0x70
 80047f6:	d01a      	beq.n	800482e <HAL_TIM_ConfigClockSource+0x12a>
 80047f8:	2b70      	cmp	r3, #112	; 0x70
 80047fa:	d87b      	bhi.n	80048f4 <HAL_TIM_ConfigClockSource+0x1f0>
 80047fc:	2b60      	cmp	r3, #96	; 0x60
 80047fe:	d050      	beq.n	80048a2 <HAL_TIM_ConfigClockSource+0x19e>
 8004800:	2b60      	cmp	r3, #96	; 0x60
 8004802:	d877      	bhi.n	80048f4 <HAL_TIM_ConfigClockSource+0x1f0>
 8004804:	2b50      	cmp	r3, #80	; 0x50
 8004806:	d03c      	beq.n	8004882 <HAL_TIM_ConfigClockSource+0x17e>
 8004808:	2b50      	cmp	r3, #80	; 0x50
 800480a:	d873      	bhi.n	80048f4 <HAL_TIM_ConfigClockSource+0x1f0>
 800480c:	2b40      	cmp	r3, #64	; 0x40
 800480e:	d058      	beq.n	80048c2 <HAL_TIM_ConfigClockSource+0x1be>
 8004810:	2b40      	cmp	r3, #64	; 0x40
 8004812:	d86f      	bhi.n	80048f4 <HAL_TIM_ConfigClockSource+0x1f0>
 8004814:	2b30      	cmp	r3, #48	; 0x30
 8004816:	d064      	beq.n	80048e2 <HAL_TIM_ConfigClockSource+0x1de>
 8004818:	2b30      	cmp	r3, #48	; 0x30
 800481a:	d86b      	bhi.n	80048f4 <HAL_TIM_ConfigClockSource+0x1f0>
 800481c:	2b20      	cmp	r3, #32
 800481e:	d060      	beq.n	80048e2 <HAL_TIM_ConfigClockSource+0x1de>
 8004820:	2b20      	cmp	r3, #32
 8004822:	d867      	bhi.n	80048f4 <HAL_TIM_ConfigClockSource+0x1f0>
 8004824:	2b00      	cmp	r3, #0
 8004826:	d05c      	beq.n	80048e2 <HAL_TIM_ConfigClockSource+0x1de>
 8004828:	2b10      	cmp	r3, #16
 800482a:	d05a      	beq.n	80048e2 <HAL_TIM_ConfigClockSource+0x1de>
 800482c:	e062      	b.n	80048f4 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6818      	ldr	r0, [r3, #0]
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	6899      	ldr	r1, [r3, #8]
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	685a      	ldr	r2, [r3, #4]
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	f000 f9c3 	bl	8004bc8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004850:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	68ba      	ldr	r2, [r7, #8]
 8004858:	609a      	str	r2, [r3, #8]
      break;
 800485a:	e04f      	b.n	80048fc <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6818      	ldr	r0, [r3, #0]
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	6899      	ldr	r1, [r3, #8]
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	685a      	ldr	r2, [r3, #4]
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	f000 f9ac 	bl	8004bc8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	689a      	ldr	r2, [r3, #8]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800487e:	609a      	str	r2, [r3, #8]
      break;
 8004880:	e03c      	b.n	80048fc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6818      	ldr	r0, [r3, #0]
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	6859      	ldr	r1, [r3, #4]
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	68db      	ldr	r3, [r3, #12]
 800488e:	461a      	mov	r2, r3
 8004890:	f000 f91e 	bl	8004ad0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	2150      	movs	r1, #80	; 0x50
 800489a:	4618      	mov	r0, r3
 800489c:	f000 f977 	bl	8004b8e <TIM_ITRx_SetConfig>
      break;
 80048a0:	e02c      	b.n	80048fc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6818      	ldr	r0, [r3, #0]
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	6859      	ldr	r1, [r3, #4]
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	461a      	mov	r2, r3
 80048b0:	f000 f93d 	bl	8004b2e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2160      	movs	r1, #96	; 0x60
 80048ba:	4618      	mov	r0, r3
 80048bc:	f000 f967 	bl	8004b8e <TIM_ITRx_SetConfig>
      break;
 80048c0:	e01c      	b.n	80048fc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6818      	ldr	r0, [r3, #0]
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	6859      	ldr	r1, [r3, #4]
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	68db      	ldr	r3, [r3, #12]
 80048ce:	461a      	mov	r2, r3
 80048d0:	f000 f8fe 	bl	8004ad0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	2140      	movs	r1, #64	; 0x40
 80048da:	4618      	mov	r0, r3
 80048dc:	f000 f957 	bl	8004b8e <TIM_ITRx_SetConfig>
      break;
 80048e0:	e00c      	b.n	80048fc <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4619      	mov	r1, r3
 80048ec:	4610      	mov	r0, r2
 80048ee:	f000 f94e 	bl	8004b8e <TIM_ITRx_SetConfig>
      break;
 80048f2:	e003      	b.n	80048fc <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	73fb      	strb	r3, [r7, #15]
      break;
 80048f8:	e000      	b.n	80048fc <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80048fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800490c:	7bfb      	ldrb	r3, [r7, #15]
}
 800490e:	4618      	mov	r0, r3
 8004910:	3710      	adds	r7, #16
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
 8004916:	bf00      	nop
 8004918:	00100070 	.word	0x00100070
 800491c:	00100060 	.word	0x00100060
 8004920:	00100050 	.word	0x00100050
 8004924:	00100040 	.word	0x00100040
 8004928:	00100030 	.word	0x00100030
 800492c:	00100020 	.word	0x00100020

08004930 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004930:	b480      	push	{r7}
 8004932:	b083      	sub	sp, #12
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004938:	bf00      	nop
 800493a:	370c      	adds	r7, #12
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr

08004944 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004944:	b480      	push	{r7}
 8004946:	b083      	sub	sp, #12
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800494c:	bf00      	nop
 800494e:	370c      	adds	r7, #12
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr

08004958 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004958:	b480      	push	{r7}
 800495a:	b083      	sub	sp, #12
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004960:	bf00      	nop
 8004962:	370c      	adds	r7, #12
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr

0800496c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800496c:	b480      	push	{r7}
 800496e:	b083      	sub	sp, #12
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004974:	bf00      	nop
 8004976:	370c      	adds	r7, #12
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr

08004980 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004980:	b480      	push	{r7}
 8004982:	b085      	sub	sp, #20
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	4a46      	ldr	r2, [pc, #280]	; (8004aac <TIM_Base_SetConfig+0x12c>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d017      	beq.n	80049c8 <TIM_Base_SetConfig+0x48>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800499e:	d013      	beq.n	80049c8 <TIM_Base_SetConfig+0x48>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	4a43      	ldr	r2, [pc, #268]	; (8004ab0 <TIM_Base_SetConfig+0x130>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d00f      	beq.n	80049c8 <TIM_Base_SetConfig+0x48>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	4a42      	ldr	r2, [pc, #264]	; (8004ab4 <TIM_Base_SetConfig+0x134>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d00b      	beq.n	80049c8 <TIM_Base_SetConfig+0x48>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	4a41      	ldr	r2, [pc, #260]	; (8004ab8 <TIM_Base_SetConfig+0x138>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d007      	beq.n	80049c8 <TIM_Base_SetConfig+0x48>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	4a40      	ldr	r2, [pc, #256]	; (8004abc <TIM_Base_SetConfig+0x13c>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d003      	beq.n	80049c8 <TIM_Base_SetConfig+0x48>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	4a3f      	ldr	r2, [pc, #252]	; (8004ac0 <TIM_Base_SetConfig+0x140>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d108      	bne.n	80049da <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	68fa      	ldr	r2, [r7, #12]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a33      	ldr	r2, [pc, #204]	; (8004aac <TIM_Base_SetConfig+0x12c>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d023      	beq.n	8004a2a <TIM_Base_SetConfig+0xaa>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049e8:	d01f      	beq.n	8004a2a <TIM_Base_SetConfig+0xaa>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a30      	ldr	r2, [pc, #192]	; (8004ab0 <TIM_Base_SetConfig+0x130>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d01b      	beq.n	8004a2a <TIM_Base_SetConfig+0xaa>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a2f      	ldr	r2, [pc, #188]	; (8004ab4 <TIM_Base_SetConfig+0x134>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d017      	beq.n	8004a2a <TIM_Base_SetConfig+0xaa>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a2e      	ldr	r2, [pc, #184]	; (8004ab8 <TIM_Base_SetConfig+0x138>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d013      	beq.n	8004a2a <TIM_Base_SetConfig+0xaa>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a2d      	ldr	r2, [pc, #180]	; (8004abc <TIM_Base_SetConfig+0x13c>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d00f      	beq.n	8004a2a <TIM_Base_SetConfig+0xaa>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a2d      	ldr	r2, [pc, #180]	; (8004ac4 <TIM_Base_SetConfig+0x144>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d00b      	beq.n	8004a2a <TIM_Base_SetConfig+0xaa>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a2c      	ldr	r2, [pc, #176]	; (8004ac8 <TIM_Base_SetConfig+0x148>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d007      	beq.n	8004a2a <TIM_Base_SetConfig+0xaa>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a2b      	ldr	r2, [pc, #172]	; (8004acc <TIM_Base_SetConfig+0x14c>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d003      	beq.n	8004a2a <TIM_Base_SetConfig+0xaa>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4a26      	ldr	r2, [pc, #152]	; (8004ac0 <TIM_Base_SetConfig+0x140>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d108      	bne.n	8004a3c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	68fa      	ldr	r2, [r7, #12]
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	695b      	ldr	r3, [r3, #20]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	68fa      	ldr	r2, [r7, #12]
 8004a4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	689a      	ldr	r2, [r3, #8]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	4a12      	ldr	r2, [pc, #72]	; (8004aac <TIM_Base_SetConfig+0x12c>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d013      	beq.n	8004a90 <TIM_Base_SetConfig+0x110>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	4a14      	ldr	r2, [pc, #80]	; (8004abc <TIM_Base_SetConfig+0x13c>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d00f      	beq.n	8004a90 <TIM_Base_SetConfig+0x110>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	4a14      	ldr	r2, [pc, #80]	; (8004ac4 <TIM_Base_SetConfig+0x144>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d00b      	beq.n	8004a90 <TIM_Base_SetConfig+0x110>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	4a13      	ldr	r2, [pc, #76]	; (8004ac8 <TIM_Base_SetConfig+0x148>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d007      	beq.n	8004a90 <TIM_Base_SetConfig+0x110>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	4a12      	ldr	r2, [pc, #72]	; (8004acc <TIM_Base_SetConfig+0x14c>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d003      	beq.n	8004a90 <TIM_Base_SetConfig+0x110>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	4a0d      	ldr	r2, [pc, #52]	; (8004ac0 <TIM_Base_SetConfig+0x140>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d103      	bne.n	8004a98 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	691a      	ldr	r2, [r3, #16]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	615a      	str	r2, [r3, #20]
}
 8004a9e:	bf00      	nop
 8004aa0:	3714      	adds	r7, #20
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr
 8004aaa:	bf00      	nop
 8004aac:	40012c00 	.word	0x40012c00
 8004ab0:	40000400 	.word	0x40000400
 8004ab4:	40000800 	.word	0x40000800
 8004ab8:	40000c00 	.word	0x40000c00
 8004abc:	40013400 	.word	0x40013400
 8004ac0:	40015000 	.word	0x40015000
 8004ac4:	40014000 	.word	0x40014000
 8004ac8:	40014400 	.word	0x40014400
 8004acc:	40014800 	.word	0x40014800

08004ad0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b087      	sub	sp, #28
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	60b9      	str	r1, [r7, #8]
 8004ada:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	6a1b      	ldr	r3, [r3, #32]
 8004ae0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	6a1b      	ldr	r3, [r3, #32]
 8004ae6:	f023 0201 	bic.w	r2, r3, #1
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	699b      	ldr	r3, [r3, #24]
 8004af2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004afa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	011b      	lsls	r3, r3, #4
 8004b00:	693a      	ldr	r2, [r7, #16]
 8004b02:	4313      	orrs	r3, r2
 8004b04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	f023 030a 	bic.w	r3, r3, #10
 8004b0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b0e:	697a      	ldr	r2, [r7, #20]
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	693a      	ldr	r2, [r7, #16]
 8004b1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	697a      	ldr	r2, [r7, #20]
 8004b20:	621a      	str	r2, [r3, #32]
}
 8004b22:	bf00      	nop
 8004b24:	371c      	adds	r7, #28
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr

08004b2e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b2e:	b480      	push	{r7}
 8004b30:	b087      	sub	sp, #28
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	60f8      	str	r0, [r7, #12]
 8004b36:	60b9      	str	r1, [r7, #8]
 8004b38:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	6a1b      	ldr	r3, [r3, #32]
 8004b3e:	f023 0210 	bic.w	r2, r3, #16
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	699b      	ldr	r3, [r3, #24]
 8004b4a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6a1b      	ldr	r3, [r3, #32]
 8004b50:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b58:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	031b      	lsls	r3, r3, #12
 8004b5e:	697a      	ldr	r2, [r7, #20]
 8004b60:	4313      	orrs	r3, r2
 8004b62:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004b6a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	011b      	lsls	r3, r3, #4
 8004b70:	693a      	ldr	r2, [r7, #16]
 8004b72:	4313      	orrs	r3, r2
 8004b74:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	697a      	ldr	r2, [r7, #20]
 8004b7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	693a      	ldr	r2, [r7, #16]
 8004b80:	621a      	str	r2, [r3, #32]
}
 8004b82:	bf00      	nop
 8004b84:	371c      	adds	r7, #28
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr

08004b8e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b8e:	b480      	push	{r7}
 8004b90:	b085      	sub	sp, #20
 8004b92:	af00      	add	r7, sp, #0
 8004b94:	6078      	str	r0, [r7, #4]
 8004b96:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004ba4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ba8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004baa:	683a      	ldr	r2, [r7, #0]
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	f043 0307 	orr.w	r3, r3, #7
 8004bb4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	68fa      	ldr	r2, [r7, #12]
 8004bba:	609a      	str	r2, [r3, #8]
}
 8004bbc:	bf00      	nop
 8004bbe:	3714      	adds	r7, #20
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr

08004bc8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b087      	sub	sp, #28
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	60f8      	str	r0, [r7, #12]
 8004bd0:	60b9      	str	r1, [r7, #8]
 8004bd2:	607a      	str	r2, [r7, #4]
 8004bd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004be2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	021a      	lsls	r2, r3, #8
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	431a      	orrs	r2, r3
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	697a      	ldr	r2, [r7, #20]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	697a      	ldr	r2, [r7, #20]
 8004bfa:	609a      	str	r2, [r3, #8]
}
 8004bfc:	bf00      	nop
 8004bfe:	371c      	adds	r7, #28
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr

08004c08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b085      	sub	sp, #20
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d101      	bne.n	8004c20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c1c:	2302      	movs	r3, #2
 8004c1e:	e074      	b.n	8004d0a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2202      	movs	r2, #2
 8004c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a34      	ldr	r2, [pc, #208]	; (8004d18 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d009      	beq.n	8004c5e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a33      	ldr	r2, [pc, #204]	; (8004d1c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d004      	beq.n	8004c5e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a31      	ldr	r2, [pc, #196]	; (8004d20 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d108      	bne.n	8004c70 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004c64:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	68fa      	ldr	r2, [r7, #12]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004c76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	68fa      	ldr	r2, [r7, #12]
 8004c82:	4313      	orrs	r3, r2
 8004c84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	68fa      	ldr	r2, [r7, #12]
 8004c8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a21      	ldr	r2, [pc, #132]	; (8004d18 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d022      	beq.n	8004cde <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ca0:	d01d      	beq.n	8004cde <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a1f      	ldr	r2, [pc, #124]	; (8004d24 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d018      	beq.n	8004cde <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a1d      	ldr	r2, [pc, #116]	; (8004d28 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d013      	beq.n	8004cde <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a1c      	ldr	r2, [pc, #112]	; (8004d2c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d00e      	beq.n	8004cde <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a15      	ldr	r2, [pc, #84]	; (8004d1c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d009      	beq.n	8004cde <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a18      	ldr	r2, [pc, #96]	; (8004d30 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d004      	beq.n	8004cde <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a11      	ldr	r2, [pc, #68]	; (8004d20 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d10c      	bne.n	8004cf8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ce4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	68ba      	ldr	r2, [r7, #8]
 8004cec:	4313      	orrs	r3, r2
 8004cee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	68ba      	ldr	r2, [r7, #8]
 8004cf6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d08:	2300      	movs	r3, #0
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3714      	adds	r7, #20
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr
 8004d16:	bf00      	nop
 8004d18:	40012c00 	.word	0x40012c00
 8004d1c:	40013400 	.word	0x40013400
 8004d20:	40015000 	.word	0x40015000
 8004d24:	40000400 	.word	0x40000400
 8004d28:	40000800 	.word	0x40000800
 8004d2c:	40000c00 	.word	0x40000c00
 8004d30:	40014000 	.word	0x40014000

08004d34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b083      	sub	sp, #12
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d3c:	bf00      	nop
 8004d3e:	370c      	adds	r7, #12
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr

08004d48 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b083      	sub	sp, #12
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d50:	bf00      	nop
 8004d52:	370c      	adds	r7, #12
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr

08004d5c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b083      	sub	sp, #12
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004d64:	bf00      	nop
 8004d66:	370c      	adds	r7, #12
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr

08004d70 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b083      	sub	sp, #12
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8004d78:	bf00      	nop
 8004d7a:	370c      	adds	r7, #12
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr

08004d84 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b083      	sub	sp, #12
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8004d8c:	bf00      	nop
 8004d8e:	370c      	adds	r7, #12
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr

08004d98 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b083      	sub	sp, #12
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004da0:	bf00      	nop
 8004da2:	370c      	adds	r7, #12
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b083      	sub	sp, #12
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004db4:	bf00      	nop
 8004db6:	370c      	adds	r7, #12
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr

08004dc0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b082      	sub	sp, #8
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d101      	bne.n	8004dd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e042      	b.n	8004e58 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d106      	bne.n	8004dea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f7fb ff97 	bl	8000d18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2224      	movs	r2, #36	; 0x24
 8004dee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f022 0201 	bic.w	r2, r2, #1
 8004e00:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f000 f8c2 	bl	8004f8c <UART_SetConfig>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d101      	bne.n	8004e12 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e022      	b.n	8004e58 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d002      	beq.n	8004e20 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f000 fbb2 	bl	8005584 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	685a      	ldr	r2, [r3, #4]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e2e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	689a      	ldr	r2, [r3, #8]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e3e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f042 0201 	orr.w	r2, r2, #1
 8004e4e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	f000 fc39 	bl	80056c8 <UART_CheckIdleState>
 8004e56:	4603      	mov	r3, r0
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3708      	adds	r7, #8
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}

08004e60 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b08a      	sub	sp, #40	; 0x28
 8004e64:	af02      	add	r7, sp, #8
 8004e66:	60f8      	str	r0, [r7, #12]
 8004e68:	60b9      	str	r1, [r7, #8]
 8004e6a:	603b      	str	r3, [r7, #0]
 8004e6c:	4613      	mov	r3, r2
 8004e6e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e76:	2b20      	cmp	r3, #32
 8004e78:	f040 8083 	bne.w	8004f82 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d002      	beq.n	8004e88 <HAL_UART_Transmit+0x28>
 8004e82:	88fb      	ldrh	r3, [r7, #6]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d101      	bne.n	8004e8c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e07b      	b.n	8004f84 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d101      	bne.n	8004e9a <HAL_UART_Transmit+0x3a>
 8004e96:	2302      	movs	r3, #2
 8004e98:	e074      	b.n	8004f84 <HAL_UART_Transmit+0x124>
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2221      	movs	r2, #33	; 0x21
 8004eae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004eb2:	f7fc f8ef 	bl	8001094 <HAL_GetTick>
 8004eb6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	88fa      	ldrh	r2, [r7, #6]
 8004ebc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	88fa      	ldrh	r2, [r7, #6]
 8004ec4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ed0:	d108      	bne.n	8004ee4 <HAL_UART_Transmit+0x84>
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	691b      	ldr	r3, [r3, #16]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d104      	bne.n	8004ee4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004eda:	2300      	movs	r3, #0
 8004edc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	61bb      	str	r3, [r7, #24]
 8004ee2:	e003      	b.n	8004eec <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004ef4:	e02c      	b.n	8004f50 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	9300      	str	r3, [sp, #0]
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	2200      	movs	r2, #0
 8004efe:	2180      	movs	r1, #128	; 0x80
 8004f00:	68f8      	ldr	r0, [r7, #12]
 8004f02:	f000 fc2c 	bl	800575e <UART_WaitOnFlagUntilTimeout>
 8004f06:	4603      	mov	r3, r0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d001      	beq.n	8004f10 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004f0c:	2303      	movs	r3, #3
 8004f0e:	e039      	b.n	8004f84 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8004f10:	69fb      	ldr	r3, [r7, #28]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d10b      	bne.n	8004f2e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f16:	69bb      	ldr	r3, [r7, #24]
 8004f18:	881b      	ldrh	r3, [r3, #0]
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f24:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004f26:	69bb      	ldr	r3, [r7, #24]
 8004f28:	3302      	adds	r3, #2
 8004f2a:	61bb      	str	r3, [r7, #24]
 8004f2c:	e007      	b.n	8004f3e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f2e:	69fb      	ldr	r3, [r7, #28]
 8004f30:	781a      	ldrb	r2, [r3, #0]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004f38:	69fb      	ldr	r3, [r7, #28]
 8004f3a:	3301      	adds	r3, #1
 8004f3c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	3b01      	subs	r3, #1
 8004f48:	b29a      	uxth	r2, r3
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d1cc      	bne.n	8004ef6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	9300      	str	r3, [sp, #0]
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	2200      	movs	r2, #0
 8004f64:	2140      	movs	r1, #64	; 0x40
 8004f66:	68f8      	ldr	r0, [r7, #12]
 8004f68:	f000 fbf9 	bl	800575e <UART_WaitOnFlagUntilTimeout>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d001      	beq.n	8004f76 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8004f72:	2303      	movs	r3, #3
 8004f74:	e006      	b.n	8004f84 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2220      	movs	r2, #32
 8004f7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	e000      	b.n	8004f84 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8004f82:	2302      	movs	r3, #2
  }
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3720      	adds	r7, #32
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}

08004f8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f90:	b08c      	sub	sp, #48	; 0x30
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f96:	2300      	movs	r3, #0
 8004f98:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	689a      	ldr	r2, [r3, #8]
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	691b      	ldr	r3, [r3, #16]
 8004fa4:	431a      	orrs	r2, r3
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	695b      	ldr	r3, [r3, #20]
 8004faa:	431a      	orrs	r2, r3
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	69db      	ldr	r3, [r3, #28]
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	4baa      	ldr	r3, [pc, #680]	; (8005264 <UART_SetConfig+0x2d8>)
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	697a      	ldr	r2, [r7, #20]
 8004fc0:	6812      	ldr	r2, [r2, #0]
 8004fc2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004fc4:	430b      	orrs	r3, r1
 8004fc6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	68da      	ldr	r2, [r3, #12]
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	430a      	orrs	r2, r1
 8004fdc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	699b      	ldr	r3, [r3, #24]
 8004fe2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a9f      	ldr	r2, [pc, #636]	; (8005268 <UART_SetConfig+0x2dc>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d004      	beq.n	8004ff8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	6a1b      	ldr	r3, [r3, #32]
 8004ff2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005002:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005006:	697a      	ldr	r2, [r7, #20]
 8005008:	6812      	ldr	r2, [r2, #0]
 800500a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800500c:	430b      	orrs	r3, r1
 800500e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005016:	f023 010f 	bic.w	r1, r3, #15
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	430a      	orrs	r2, r1
 8005024:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a90      	ldr	r2, [pc, #576]	; (800526c <UART_SetConfig+0x2e0>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d125      	bne.n	800507c <UART_SetConfig+0xf0>
 8005030:	4b8f      	ldr	r3, [pc, #572]	; (8005270 <UART_SetConfig+0x2e4>)
 8005032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005036:	f003 0303 	and.w	r3, r3, #3
 800503a:	2b03      	cmp	r3, #3
 800503c:	d81a      	bhi.n	8005074 <UART_SetConfig+0xe8>
 800503e:	a201      	add	r2, pc, #4	; (adr r2, 8005044 <UART_SetConfig+0xb8>)
 8005040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005044:	08005055 	.word	0x08005055
 8005048:	08005065 	.word	0x08005065
 800504c:	0800505d 	.word	0x0800505d
 8005050:	0800506d 	.word	0x0800506d
 8005054:	2301      	movs	r3, #1
 8005056:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800505a:	e116      	b.n	800528a <UART_SetConfig+0x2fe>
 800505c:	2302      	movs	r3, #2
 800505e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005062:	e112      	b.n	800528a <UART_SetConfig+0x2fe>
 8005064:	2304      	movs	r3, #4
 8005066:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800506a:	e10e      	b.n	800528a <UART_SetConfig+0x2fe>
 800506c:	2308      	movs	r3, #8
 800506e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005072:	e10a      	b.n	800528a <UART_SetConfig+0x2fe>
 8005074:	2310      	movs	r3, #16
 8005076:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800507a:	e106      	b.n	800528a <UART_SetConfig+0x2fe>
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a7c      	ldr	r2, [pc, #496]	; (8005274 <UART_SetConfig+0x2e8>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d138      	bne.n	80050f8 <UART_SetConfig+0x16c>
 8005086:	4b7a      	ldr	r3, [pc, #488]	; (8005270 <UART_SetConfig+0x2e4>)
 8005088:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800508c:	f003 030c 	and.w	r3, r3, #12
 8005090:	2b0c      	cmp	r3, #12
 8005092:	d82d      	bhi.n	80050f0 <UART_SetConfig+0x164>
 8005094:	a201      	add	r2, pc, #4	; (adr r2, 800509c <UART_SetConfig+0x110>)
 8005096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800509a:	bf00      	nop
 800509c:	080050d1 	.word	0x080050d1
 80050a0:	080050f1 	.word	0x080050f1
 80050a4:	080050f1 	.word	0x080050f1
 80050a8:	080050f1 	.word	0x080050f1
 80050ac:	080050e1 	.word	0x080050e1
 80050b0:	080050f1 	.word	0x080050f1
 80050b4:	080050f1 	.word	0x080050f1
 80050b8:	080050f1 	.word	0x080050f1
 80050bc:	080050d9 	.word	0x080050d9
 80050c0:	080050f1 	.word	0x080050f1
 80050c4:	080050f1 	.word	0x080050f1
 80050c8:	080050f1 	.word	0x080050f1
 80050cc:	080050e9 	.word	0x080050e9
 80050d0:	2300      	movs	r3, #0
 80050d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050d6:	e0d8      	b.n	800528a <UART_SetConfig+0x2fe>
 80050d8:	2302      	movs	r3, #2
 80050da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050de:	e0d4      	b.n	800528a <UART_SetConfig+0x2fe>
 80050e0:	2304      	movs	r3, #4
 80050e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050e6:	e0d0      	b.n	800528a <UART_SetConfig+0x2fe>
 80050e8:	2308      	movs	r3, #8
 80050ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050ee:	e0cc      	b.n	800528a <UART_SetConfig+0x2fe>
 80050f0:	2310      	movs	r3, #16
 80050f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050f6:	e0c8      	b.n	800528a <UART_SetConfig+0x2fe>
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a5e      	ldr	r2, [pc, #376]	; (8005278 <UART_SetConfig+0x2ec>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d125      	bne.n	800514e <UART_SetConfig+0x1c2>
 8005102:	4b5b      	ldr	r3, [pc, #364]	; (8005270 <UART_SetConfig+0x2e4>)
 8005104:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005108:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800510c:	2b30      	cmp	r3, #48	; 0x30
 800510e:	d016      	beq.n	800513e <UART_SetConfig+0x1b2>
 8005110:	2b30      	cmp	r3, #48	; 0x30
 8005112:	d818      	bhi.n	8005146 <UART_SetConfig+0x1ba>
 8005114:	2b20      	cmp	r3, #32
 8005116:	d00a      	beq.n	800512e <UART_SetConfig+0x1a2>
 8005118:	2b20      	cmp	r3, #32
 800511a:	d814      	bhi.n	8005146 <UART_SetConfig+0x1ba>
 800511c:	2b00      	cmp	r3, #0
 800511e:	d002      	beq.n	8005126 <UART_SetConfig+0x19a>
 8005120:	2b10      	cmp	r3, #16
 8005122:	d008      	beq.n	8005136 <UART_SetConfig+0x1aa>
 8005124:	e00f      	b.n	8005146 <UART_SetConfig+0x1ba>
 8005126:	2300      	movs	r3, #0
 8005128:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800512c:	e0ad      	b.n	800528a <UART_SetConfig+0x2fe>
 800512e:	2302      	movs	r3, #2
 8005130:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005134:	e0a9      	b.n	800528a <UART_SetConfig+0x2fe>
 8005136:	2304      	movs	r3, #4
 8005138:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800513c:	e0a5      	b.n	800528a <UART_SetConfig+0x2fe>
 800513e:	2308      	movs	r3, #8
 8005140:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005144:	e0a1      	b.n	800528a <UART_SetConfig+0x2fe>
 8005146:	2310      	movs	r3, #16
 8005148:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800514c:	e09d      	b.n	800528a <UART_SetConfig+0x2fe>
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a4a      	ldr	r2, [pc, #296]	; (800527c <UART_SetConfig+0x2f0>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d125      	bne.n	80051a4 <UART_SetConfig+0x218>
 8005158:	4b45      	ldr	r3, [pc, #276]	; (8005270 <UART_SetConfig+0x2e4>)
 800515a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800515e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005162:	2bc0      	cmp	r3, #192	; 0xc0
 8005164:	d016      	beq.n	8005194 <UART_SetConfig+0x208>
 8005166:	2bc0      	cmp	r3, #192	; 0xc0
 8005168:	d818      	bhi.n	800519c <UART_SetConfig+0x210>
 800516a:	2b80      	cmp	r3, #128	; 0x80
 800516c:	d00a      	beq.n	8005184 <UART_SetConfig+0x1f8>
 800516e:	2b80      	cmp	r3, #128	; 0x80
 8005170:	d814      	bhi.n	800519c <UART_SetConfig+0x210>
 8005172:	2b00      	cmp	r3, #0
 8005174:	d002      	beq.n	800517c <UART_SetConfig+0x1f0>
 8005176:	2b40      	cmp	r3, #64	; 0x40
 8005178:	d008      	beq.n	800518c <UART_SetConfig+0x200>
 800517a:	e00f      	b.n	800519c <UART_SetConfig+0x210>
 800517c:	2300      	movs	r3, #0
 800517e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005182:	e082      	b.n	800528a <UART_SetConfig+0x2fe>
 8005184:	2302      	movs	r3, #2
 8005186:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800518a:	e07e      	b.n	800528a <UART_SetConfig+0x2fe>
 800518c:	2304      	movs	r3, #4
 800518e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005192:	e07a      	b.n	800528a <UART_SetConfig+0x2fe>
 8005194:	2308      	movs	r3, #8
 8005196:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800519a:	e076      	b.n	800528a <UART_SetConfig+0x2fe>
 800519c:	2310      	movs	r3, #16
 800519e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051a2:	e072      	b.n	800528a <UART_SetConfig+0x2fe>
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a35      	ldr	r2, [pc, #212]	; (8005280 <UART_SetConfig+0x2f4>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d12a      	bne.n	8005204 <UART_SetConfig+0x278>
 80051ae:	4b30      	ldr	r3, [pc, #192]	; (8005270 <UART_SetConfig+0x2e4>)
 80051b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051bc:	d01a      	beq.n	80051f4 <UART_SetConfig+0x268>
 80051be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051c2:	d81b      	bhi.n	80051fc <UART_SetConfig+0x270>
 80051c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051c8:	d00c      	beq.n	80051e4 <UART_SetConfig+0x258>
 80051ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051ce:	d815      	bhi.n	80051fc <UART_SetConfig+0x270>
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d003      	beq.n	80051dc <UART_SetConfig+0x250>
 80051d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051d8:	d008      	beq.n	80051ec <UART_SetConfig+0x260>
 80051da:	e00f      	b.n	80051fc <UART_SetConfig+0x270>
 80051dc:	2300      	movs	r3, #0
 80051de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051e2:	e052      	b.n	800528a <UART_SetConfig+0x2fe>
 80051e4:	2302      	movs	r3, #2
 80051e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051ea:	e04e      	b.n	800528a <UART_SetConfig+0x2fe>
 80051ec:	2304      	movs	r3, #4
 80051ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051f2:	e04a      	b.n	800528a <UART_SetConfig+0x2fe>
 80051f4:	2308      	movs	r3, #8
 80051f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051fa:	e046      	b.n	800528a <UART_SetConfig+0x2fe>
 80051fc:	2310      	movs	r3, #16
 80051fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005202:	e042      	b.n	800528a <UART_SetConfig+0x2fe>
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a17      	ldr	r2, [pc, #92]	; (8005268 <UART_SetConfig+0x2dc>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d13a      	bne.n	8005284 <UART_SetConfig+0x2f8>
 800520e:	4b18      	ldr	r3, [pc, #96]	; (8005270 <UART_SetConfig+0x2e4>)
 8005210:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005214:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005218:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800521c:	d01a      	beq.n	8005254 <UART_SetConfig+0x2c8>
 800521e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005222:	d81b      	bhi.n	800525c <UART_SetConfig+0x2d0>
 8005224:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005228:	d00c      	beq.n	8005244 <UART_SetConfig+0x2b8>
 800522a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800522e:	d815      	bhi.n	800525c <UART_SetConfig+0x2d0>
 8005230:	2b00      	cmp	r3, #0
 8005232:	d003      	beq.n	800523c <UART_SetConfig+0x2b0>
 8005234:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005238:	d008      	beq.n	800524c <UART_SetConfig+0x2c0>
 800523a:	e00f      	b.n	800525c <UART_SetConfig+0x2d0>
 800523c:	2300      	movs	r3, #0
 800523e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005242:	e022      	b.n	800528a <UART_SetConfig+0x2fe>
 8005244:	2302      	movs	r3, #2
 8005246:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800524a:	e01e      	b.n	800528a <UART_SetConfig+0x2fe>
 800524c:	2304      	movs	r3, #4
 800524e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005252:	e01a      	b.n	800528a <UART_SetConfig+0x2fe>
 8005254:	2308      	movs	r3, #8
 8005256:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800525a:	e016      	b.n	800528a <UART_SetConfig+0x2fe>
 800525c:	2310      	movs	r3, #16
 800525e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005262:	e012      	b.n	800528a <UART_SetConfig+0x2fe>
 8005264:	cfff69f3 	.word	0xcfff69f3
 8005268:	40008000 	.word	0x40008000
 800526c:	40013800 	.word	0x40013800
 8005270:	40021000 	.word	0x40021000
 8005274:	40004400 	.word	0x40004400
 8005278:	40004800 	.word	0x40004800
 800527c:	40004c00 	.word	0x40004c00
 8005280:	40005000 	.word	0x40005000
 8005284:	2310      	movs	r3, #16
 8005286:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4aae      	ldr	r2, [pc, #696]	; (8005548 <UART_SetConfig+0x5bc>)
 8005290:	4293      	cmp	r3, r2
 8005292:	f040 8097 	bne.w	80053c4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005296:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800529a:	2b08      	cmp	r3, #8
 800529c:	d823      	bhi.n	80052e6 <UART_SetConfig+0x35a>
 800529e:	a201      	add	r2, pc, #4	; (adr r2, 80052a4 <UART_SetConfig+0x318>)
 80052a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052a4:	080052c9 	.word	0x080052c9
 80052a8:	080052e7 	.word	0x080052e7
 80052ac:	080052d1 	.word	0x080052d1
 80052b0:	080052e7 	.word	0x080052e7
 80052b4:	080052d7 	.word	0x080052d7
 80052b8:	080052e7 	.word	0x080052e7
 80052bc:	080052e7 	.word	0x080052e7
 80052c0:	080052e7 	.word	0x080052e7
 80052c4:	080052df 	.word	0x080052df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052c8:	f7fe fd0c 	bl	8003ce4 <HAL_RCC_GetPCLK1Freq>
 80052cc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80052ce:	e010      	b.n	80052f2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052d0:	4b9e      	ldr	r3, [pc, #632]	; (800554c <UART_SetConfig+0x5c0>)
 80052d2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80052d4:	e00d      	b.n	80052f2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052d6:	f7fe fc97 	bl	8003c08 <HAL_RCC_GetSysClockFreq>
 80052da:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80052dc:	e009      	b.n	80052f2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052e2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80052e4:	e005      	b.n	80052f2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80052e6:	2300      	movs	r3, #0
 80052e8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80052f0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80052f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	f000 8130 	beq.w	800555a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052fe:	4a94      	ldr	r2, [pc, #592]	; (8005550 <UART_SetConfig+0x5c4>)
 8005300:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005304:	461a      	mov	r2, r3
 8005306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005308:	fbb3 f3f2 	udiv	r3, r3, r2
 800530c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	685a      	ldr	r2, [r3, #4]
 8005312:	4613      	mov	r3, r2
 8005314:	005b      	lsls	r3, r3, #1
 8005316:	4413      	add	r3, r2
 8005318:	69ba      	ldr	r2, [r7, #24]
 800531a:	429a      	cmp	r2, r3
 800531c:	d305      	bcc.n	800532a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005324:	69ba      	ldr	r2, [r7, #24]
 8005326:	429a      	cmp	r2, r3
 8005328:	d903      	bls.n	8005332 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005330:	e113      	b.n	800555a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005334:	2200      	movs	r2, #0
 8005336:	60bb      	str	r3, [r7, #8]
 8005338:	60fa      	str	r2, [r7, #12]
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533e:	4a84      	ldr	r2, [pc, #528]	; (8005550 <UART_SetConfig+0x5c4>)
 8005340:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005344:	b29b      	uxth	r3, r3
 8005346:	2200      	movs	r2, #0
 8005348:	603b      	str	r3, [r7, #0]
 800534a:	607a      	str	r2, [r7, #4]
 800534c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005350:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005354:	f7fa ffb4 	bl	80002c0 <__aeabi_uldivmod>
 8005358:	4602      	mov	r2, r0
 800535a:	460b      	mov	r3, r1
 800535c:	4610      	mov	r0, r2
 800535e:	4619      	mov	r1, r3
 8005360:	f04f 0200 	mov.w	r2, #0
 8005364:	f04f 0300 	mov.w	r3, #0
 8005368:	020b      	lsls	r3, r1, #8
 800536a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800536e:	0202      	lsls	r2, r0, #8
 8005370:	6979      	ldr	r1, [r7, #20]
 8005372:	6849      	ldr	r1, [r1, #4]
 8005374:	0849      	lsrs	r1, r1, #1
 8005376:	2000      	movs	r0, #0
 8005378:	460c      	mov	r4, r1
 800537a:	4605      	mov	r5, r0
 800537c:	eb12 0804 	adds.w	r8, r2, r4
 8005380:	eb43 0905 	adc.w	r9, r3, r5
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	2200      	movs	r2, #0
 800538a:	469a      	mov	sl, r3
 800538c:	4693      	mov	fp, r2
 800538e:	4652      	mov	r2, sl
 8005390:	465b      	mov	r3, fp
 8005392:	4640      	mov	r0, r8
 8005394:	4649      	mov	r1, r9
 8005396:	f7fa ff93 	bl	80002c0 <__aeabi_uldivmod>
 800539a:	4602      	mov	r2, r0
 800539c:	460b      	mov	r3, r1
 800539e:	4613      	mov	r3, r2
 80053a0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80053a2:	6a3b      	ldr	r3, [r7, #32]
 80053a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053a8:	d308      	bcc.n	80053bc <UART_SetConfig+0x430>
 80053aa:	6a3b      	ldr	r3, [r7, #32]
 80053ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053b0:	d204      	bcs.n	80053bc <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	6a3a      	ldr	r2, [r7, #32]
 80053b8:	60da      	str	r2, [r3, #12]
 80053ba:	e0ce      	b.n	800555a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80053c2:	e0ca      	b.n	800555a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	69db      	ldr	r3, [r3, #28]
 80053c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053cc:	d166      	bne.n	800549c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80053ce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80053d2:	2b08      	cmp	r3, #8
 80053d4:	d827      	bhi.n	8005426 <UART_SetConfig+0x49a>
 80053d6:	a201      	add	r2, pc, #4	; (adr r2, 80053dc <UART_SetConfig+0x450>)
 80053d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053dc:	08005401 	.word	0x08005401
 80053e0:	08005409 	.word	0x08005409
 80053e4:	08005411 	.word	0x08005411
 80053e8:	08005427 	.word	0x08005427
 80053ec:	08005417 	.word	0x08005417
 80053f0:	08005427 	.word	0x08005427
 80053f4:	08005427 	.word	0x08005427
 80053f8:	08005427 	.word	0x08005427
 80053fc:	0800541f 	.word	0x0800541f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005400:	f7fe fc70 	bl	8003ce4 <HAL_RCC_GetPCLK1Freq>
 8005404:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005406:	e014      	b.n	8005432 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005408:	f7fe fc82 	bl	8003d10 <HAL_RCC_GetPCLK2Freq>
 800540c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800540e:	e010      	b.n	8005432 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005410:	4b4e      	ldr	r3, [pc, #312]	; (800554c <UART_SetConfig+0x5c0>)
 8005412:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005414:	e00d      	b.n	8005432 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005416:	f7fe fbf7 	bl	8003c08 <HAL_RCC_GetSysClockFreq>
 800541a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800541c:	e009      	b.n	8005432 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800541e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005422:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005424:	e005      	b.n	8005432 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005426:	2300      	movs	r3, #0
 8005428:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005430:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005434:	2b00      	cmp	r3, #0
 8005436:	f000 8090 	beq.w	800555a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800543e:	4a44      	ldr	r2, [pc, #272]	; (8005550 <UART_SetConfig+0x5c4>)
 8005440:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005444:	461a      	mov	r2, r3
 8005446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005448:	fbb3 f3f2 	udiv	r3, r3, r2
 800544c:	005a      	lsls	r2, r3, #1
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	085b      	lsrs	r3, r3, #1
 8005454:	441a      	add	r2, r3
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	fbb2 f3f3 	udiv	r3, r2, r3
 800545e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005460:	6a3b      	ldr	r3, [r7, #32]
 8005462:	2b0f      	cmp	r3, #15
 8005464:	d916      	bls.n	8005494 <UART_SetConfig+0x508>
 8005466:	6a3b      	ldr	r3, [r7, #32]
 8005468:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800546c:	d212      	bcs.n	8005494 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800546e:	6a3b      	ldr	r3, [r7, #32]
 8005470:	b29b      	uxth	r3, r3
 8005472:	f023 030f 	bic.w	r3, r3, #15
 8005476:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005478:	6a3b      	ldr	r3, [r7, #32]
 800547a:	085b      	lsrs	r3, r3, #1
 800547c:	b29b      	uxth	r3, r3
 800547e:	f003 0307 	and.w	r3, r3, #7
 8005482:	b29a      	uxth	r2, r3
 8005484:	8bfb      	ldrh	r3, [r7, #30]
 8005486:	4313      	orrs	r3, r2
 8005488:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	8bfa      	ldrh	r2, [r7, #30]
 8005490:	60da      	str	r2, [r3, #12]
 8005492:	e062      	b.n	800555a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800549a:	e05e      	b.n	800555a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800549c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80054a0:	2b08      	cmp	r3, #8
 80054a2:	d828      	bhi.n	80054f6 <UART_SetConfig+0x56a>
 80054a4:	a201      	add	r2, pc, #4	; (adr r2, 80054ac <UART_SetConfig+0x520>)
 80054a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054aa:	bf00      	nop
 80054ac:	080054d1 	.word	0x080054d1
 80054b0:	080054d9 	.word	0x080054d9
 80054b4:	080054e1 	.word	0x080054e1
 80054b8:	080054f7 	.word	0x080054f7
 80054bc:	080054e7 	.word	0x080054e7
 80054c0:	080054f7 	.word	0x080054f7
 80054c4:	080054f7 	.word	0x080054f7
 80054c8:	080054f7 	.word	0x080054f7
 80054cc:	080054ef 	.word	0x080054ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054d0:	f7fe fc08 	bl	8003ce4 <HAL_RCC_GetPCLK1Freq>
 80054d4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80054d6:	e014      	b.n	8005502 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054d8:	f7fe fc1a 	bl	8003d10 <HAL_RCC_GetPCLK2Freq>
 80054dc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80054de:	e010      	b.n	8005502 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054e0:	4b1a      	ldr	r3, [pc, #104]	; (800554c <UART_SetConfig+0x5c0>)
 80054e2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80054e4:	e00d      	b.n	8005502 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054e6:	f7fe fb8f 	bl	8003c08 <HAL_RCC_GetSysClockFreq>
 80054ea:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80054ec:	e009      	b.n	8005502 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054f2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80054f4:	e005      	b.n	8005502 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80054f6:	2300      	movs	r3, #0
 80054f8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005500:	bf00      	nop
    }

    if (pclk != 0U)
 8005502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005504:	2b00      	cmp	r3, #0
 8005506:	d028      	beq.n	800555a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550c:	4a10      	ldr	r2, [pc, #64]	; (8005550 <UART_SetConfig+0x5c4>)
 800550e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005512:	461a      	mov	r2, r3
 8005514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005516:	fbb3 f2f2 	udiv	r2, r3, r2
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	085b      	lsrs	r3, r3, #1
 8005520:	441a      	add	r2, r3
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	fbb2 f3f3 	udiv	r3, r2, r3
 800552a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800552c:	6a3b      	ldr	r3, [r7, #32]
 800552e:	2b0f      	cmp	r3, #15
 8005530:	d910      	bls.n	8005554 <UART_SetConfig+0x5c8>
 8005532:	6a3b      	ldr	r3, [r7, #32]
 8005534:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005538:	d20c      	bcs.n	8005554 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800553a:	6a3b      	ldr	r3, [r7, #32]
 800553c:	b29a      	uxth	r2, r3
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	60da      	str	r2, [r3, #12]
 8005544:	e009      	b.n	800555a <UART_SetConfig+0x5ce>
 8005546:	bf00      	nop
 8005548:	40008000 	.word	0x40008000
 800554c:	00f42400 	.word	0x00f42400
 8005550:	080064d8 	.word	0x080064d8
      }
      else
      {
        ret = HAL_ERROR;
 8005554:	2301      	movs	r3, #1
 8005556:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	2201      	movs	r2, #1
 800555e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	2201      	movs	r2, #1
 8005566:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	2200      	movs	r2, #0
 800556e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	2200      	movs	r2, #0
 8005574:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005576:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800557a:	4618      	mov	r0, r3
 800557c:	3730      	adds	r7, #48	; 0x30
 800557e:	46bd      	mov	sp, r7
 8005580:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005584 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005584:	b480      	push	{r7}
 8005586:	b083      	sub	sp, #12
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005590:	f003 0301 	and.w	r3, r3, #1
 8005594:	2b00      	cmp	r3, #0
 8005596:	d00a      	beq.n	80055ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	430a      	orrs	r2, r1
 80055ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055b2:	f003 0302 	and.w	r3, r3, #2
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d00a      	beq.n	80055d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	430a      	orrs	r2, r1
 80055ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055d4:	f003 0304 	and.w	r3, r3, #4
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d00a      	beq.n	80055f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	430a      	orrs	r2, r1
 80055f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055f6:	f003 0308 	and.w	r3, r3, #8
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d00a      	beq.n	8005614 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	430a      	orrs	r2, r1
 8005612:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005618:	f003 0310 	and.w	r3, r3, #16
 800561c:	2b00      	cmp	r3, #0
 800561e:	d00a      	beq.n	8005636 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	430a      	orrs	r2, r1
 8005634:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800563a:	f003 0320 	and.w	r3, r3, #32
 800563e:	2b00      	cmp	r3, #0
 8005640:	d00a      	beq.n	8005658 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	430a      	orrs	r2, r1
 8005656:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800565c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005660:	2b00      	cmp	r3, #0
 8005662:	d01a      	beq.n	800569a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	430a      	orrs	r2, r1
 8005678:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800567e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005682:	d10a      	bne.n	800569a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	430a      	orrs	r2, r1
 8005698:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800569e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d00a      	beq.n	80056bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	430a      	orrs	r2, r1
 80056ba:	605a      	str	r2, [r3, #4]
  }
}
 80056bc:	bf00      	nop
 80056be:	370c      	adds	r7, #12
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr

080056c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b086      	sub	sp, #24
 80056cc:	af02      	add	r7, sp, #8
 80056ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2200      	movs	r2, #0
 80056d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80056d8:	f7fb fcdc 	bl	8001094 <HAL_GetTick>
 80056dc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f003 0308 	and.w	r3, r3, #8
 80056e8:	2b08      	cmp	r3, #8
 80056ea:	d10e      	bne.n	800570a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80056f0:	9300      	str	r3, [sp, #0]
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2200      	movs	r2, #0
 80056f6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f000 f82f 	bl	800575e <UART_WaitOnFlagUntilTimeout>
 8005700:	4603      	mov	r3, r0
 8005702:	2b00      	cmp	r3, #0
 8005704:	d001      	beq.n	800570a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005706:	2303      	movs	r3, #3
 8005708:	e025      	b.n	8005756 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f003 0304 	and.w	r3, r3, #4
 8005714:	2b04      	cmp	r3, #4
 8005716:	d10e      	bne.n	8005736 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005718:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800571c:	9300      	str	r3, [sp, #0]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2200      	movs	r2, #0
 8005722:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f000 f819 	bl	800575e <UART_WaitOnFlagUntilTimeout>
 800572c:	4603      	mov	r3, r0
 800572e:	2b00      	cmp	r3, #0
 8005730:	d001      	beq.n	8005736 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005732:	2303      	movs	r3, #3
 8005734:	e00f      	b.n	8005756 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2220      	movs	r2, #32
 800573a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2220      	movs	r2, #32
 8005742:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2200      	movs	r2, #0
 800574a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2200      	movs	r2, #0
 8005750:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005754:	2300      	movs	r3, #0
}
 8005756:	4618      	mov	r0, r3
 8005758:	3710      	adds	r7, #16
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}

0800575e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800575e:	b580      	push	{r7, lr}
 8005760:	b09c      	sub	sp, #112	; 0x70
 8005762:	af00      	add	r7, sp, #0
 8005764:	60f8      	str	r0, [r7, #12]
 8005766:	60b9      	str	r1, [r7, #8]
 8005768:	603b      	str	r3, [r7, #0]
 800576a:	4613      	mov	r3, r2
 800576c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800576e:	e0a9      	b.n	80058c4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005770:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005772:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005776:	f000 80a5 	beq.w	80058c4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800577a:	f7fb fc8b 	bl	8001094 <HAL_GetTick>
 800577e:	4602      	mov	r2, r0
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	1ad3      	subs	r3, r2, r3
 8005784:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005786:	429a      	cmp	r2, r3
 8005788:	d302      	bcc.n	8005790 <UART_WaitOnFlagUntilTimeout+0x32>
 800578a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800578c:	2b00      	cmp	r3, #0
 800578e:	d140      	bne.n	8005812 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005796:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005798:	e853 3f00 	ldrex	r3, [r3]
 800579c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800579e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057a0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80057a4:	667b      	str	r3, [r7, #100]	; 0x64
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	461a      	mov	r2, r3
 80057ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80057ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80057b0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057b2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80057b4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80057b6:	e841 2300 	strex	r3, r2, [r1]
 80057ba:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80057bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d1e6      	bne.n	8005790 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	3308      	adds	r3, #8
 80057c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057cc:	e853 3f00 	ldrex	r3, [r3]
 80057d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80057d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057d4:	f023 0301 	bic.w	r3, r3, #1
 80057d8:	663b      	str	r3, [r7, #96]	; 0x60
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	3308      	adds	r3, #8
 80057e0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80057e2:	64ba      	str	r2, [r7, #72]	; 0x48
 80057e4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80057e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80057ea:	e841 2300 	strex	r3, r2, [r1]
 80057ee:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80057f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d1e5      	bne.n	80057c2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2220      	movs	r2, #32
 80057fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2220      	movs	r2, #32
 8005802:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2200      	movs	r2, #0
 800580a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800580e:	2303      	movs	r3, #3
 8005810:	e069      	b.n	80058e6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f003 0304 	and.w	r3, r3, #4
 800581c:	2b00      	cmp	r3, #0
 800581e:	d051      	beq.n	80058c4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	69db      	ldr	r3, [r3, #28]
 8005826:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800582a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800582e:	d149      	bne.n	80058c4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005838:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005842:	e853 3f00 	ldrex	r3, [r3]
 8005846:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800584e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	461a      	mov	r2, r3
 8005856:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005858:	637b      	str	r3, [r7, #52]	; 0x34
 800585a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800585c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800585e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005860:	e841 2300 	strex	r3, r2, [r1]
 8005864:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005868:	2b00      	cmp	r3, #0
 800586a:	d1e6      	bne.n	800583a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	3308      	adds	r3, #8
 8005872:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	e853 3f00 	ldrex	r3, [r3]
 800587a:	613b      	str	r3, [r7, #16]
   return(result);
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	f023 0301 	bic.w	r3, r3, #1
 8005882:	66bb      	str	r3, [r7, #104]	; 0x68
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	3308      	adds	r3, #8
 800588a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800588c:	623a      	str	r2, [r7, #32]
 800588e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005890:	69f9      	ldr	r1, [r7, #28]
 8005892:	6a3a      	ldr	r2, [r7, #32]
 8005894:	e841 2300 	strex	r3, r2, [r1]
 8005898:	61bb      	str	r3, [r7, #24]
   return(result);
 800589a:	69bb      	ldr	r3, [r7, #24]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d1e5      	bne.n	800586c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2220      	movs	r2, #32
 80058a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2220      	movs	r2, #32
 80058ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2220      	movs	r2, #32
 80058b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2200      	movs	r2, #0
 80058bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80058c0:	2303      	movs	r3, #3
 80058c2:	e010      	b.n	80058e6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	69da      	ldr	r2, [r3, #28]
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	4013      	ands	r3, r2
 80058ce:	68ba      	ldr	r2, [r7, #8]
 80058d0:	429a      	cmp	r2, r3
 80058d2:	bf0c      	ite	eq
 80058d4:	2301      	moveq	r3, #1
 80058d6:	2300      	movne	r3, #0
 80058d8:	b2db      	uxtb	r3, r3
 80058da:	461a      	mov	r2, r3
 80058dc:	79fb      	ldrb	r3, [r7, #7]
 80058de:	429a      	cmp	r2, r3
 80058e0:	f43f af46 	beq.w	8005770 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80058e4:	2300      	movs	r3, #0
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3770      	adds	r7, #112	; 0x70
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}

080058ee <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80058ee:	b480      	push	{r7}
 80058f0:	b085      	sub	sp, #20
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d101      	bne.n	8005904 <HAL_UARTEx_DisableFifoMode+0x16>
 8005900:	2302      	movs	r3, #2
 8005902:	e027      	b.n	8005954 <HAL_UARTEx_DisableFifoMode+0x66>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2201      	movs	r2, #1
 8005908:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2224      	movs	r2, #36	; 0x24
 8005910:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f022 0201 	bic.w	r2, r2, #1
 800592a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005932:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2200      	movs	r2, #0
 8005938:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	68fa      	ldr	r2, [r7, #12]
 8005940:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2220      	movs	r2, #32
 8005946:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005952:	2300      	movs	r3, #0
}
 8005954:	4618      	mov	r0, r3
 8005956:	3714      	adds	r7, #20
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr

08005960 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b084      	sub	sp, #16
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005970:	2b01      	cmp	r3, #1
 8005972:	d101      	bne.n	8005978 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005974:	2302      	movs	r3, #2
 8005976:	e02d      	b.n	80059d4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2201      	movs	r2, #1
 800597c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2224      	movs	r2, #36	; 0x24
 8005984:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	681a      	ldr	r2, [r3, #0]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f022 0201 	bic.w	r2, r2, #1
 800599e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	683a      	ldr	r2, [r7, #0]
 80059b0:	430a      	orrs	r2, r1
 80059b2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f000 f84f 	bl	8005a58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	68fa      	ldr	r2, [r7, #12]
 80059c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2220      	movs	r2, #32
 80059c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80059d2:	2300      	movs	r3, #0
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3710      	adds	r7, #16
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}

080059dc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b084      	sub	sp, #16
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	d101      	bne.n	80059f4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80059f0:	2302      	movs	r3, #2
 80059f2:	e02d      	b.n	8005a50 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2201      	movs	r2, #1
 80059f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2224      	movs	r2, #36	; 0x24
 8005a00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	681a      	ldr	r2, [r3, #0]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f022 0201 	bic.w	r2, r2, #1
 8005a1a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	683a      	ldr	r2, [r7, #0]
 8005a2c:	430a      	orrs	r2, r1
 8005a2e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f000 f811 	bl	8005a58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	68fa      	ldr	r2, [r7, #12]
 8005a3c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2220      	movs	r2, #32
 8005a42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005a4e:	2300      	movs	r3, #0
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3710      	adds	r7, #16
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}

08005a58 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b085      	sub	sp, #20
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d108      	bne.n	8005a7a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2201      	movs	r2, #1
 8005a74:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005a78:	e031      	b.n	8005ade <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005a7a:	2308      	movs	r3, #8
 8005a7c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005a7e:	2308      	movs	r3, #8
 8005a80:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	0e5b      	lsrs	r3, r3, #25
 8005a8a:	b2db      	uxtb	r3, r3
 8005a8c:	f003 0307 	and.w	r3, r3, #7
 8005a90:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	0f5b      	lsrs	r3, r3, #29
 8005a9a:	b2db      	uxtb	r3, r3
 8005a9c:	f003 0307 	and.w	r3, r3, #7
 8005aa0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005aa2:	7bbb      	ldrb	r3, [r7, #14]
 8005aa4:	7b3a      	ldrb	r2, [r7, #12]
 8005aa6:	4911      	ldr	r1, [pc, #68]	; (8005aec <UARTEx_SetNbDataToProcess+0x94>)
 8005aa8:	5c8a      	ldrb	r2, [r1, r2]
 8005aaa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005aae:	7b3a      	ldrb	r2, [r7, #12]
 8005ab0:	490f      	ldr	r1, [pc, #60]	; (8005af0 <UARTEx_SetNbDataToProcess+0x98>)
 8005ab2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005ab4:	fb93 f3f2 	sdiv	r3, r3, r2
 8005ab8:	b29a      	uxth	r2, r3
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005ac0:	7bfb      	ldrb	r3, [r7, #15]
 8005ac2:	7b7a      	ldrb	r2, [r7, #13]
 8005ac4:	4909      	ldr	r1, [pc, #36]	; (8005aec <UARTEx_SetNbDataToProcess+0x94>)
 8005ac6:	5c8a      	ldrb	r2, [r1, r2]
 8005ac8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005acc:	7b7a      	ldrb	r2, [r7, #13]
 8005ace:	4908      	ldr	r1, [pc, #32]	; (8005af0 <UARTEx_SetNbDataToProcess+0x98>)
 8005ad0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005ad2:	fb93 f3f2 	sdiv	r3, r3, r2
 8005ad6:	b29a      	uxth	r2, r3
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005ade:	bf00      	nop
 8005ae0:	3714      	adds	r7, #20
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae8:	4770      	bx	lr
 8005aea:	bf00      	nop
 8005aec:	080064f0 	.word	0x080064f0
 8005af0:	080064f8 	.word	0x080064f8

08005af4 <siprintf>:
 8005af4:	b40e      	push	{r1, r2, r3}
 8005af6:	b500      	push	{lr}
 8005af8:	b09c      	sub	sp, #112	; 0x70
 8005afa:	ab1d      	add	r3, sp, #116	; 0x74
 8005afc:	9002      	str	r0, [sp, #8]
 8005afe:	9006      	str	r0, [sp, #24]
 8005b00:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005b04:	4809      	ldr	r0, [pc, #36]	; (8005b2c <siprintf+0x38>)
 8005b06:	9107      	str	r1, [sp, #28]
 8005b08:	9104      	str	r1, [sp, #16]
 8005b0a:	4909      	ldr	r1, [pc, #36]	; (8005b30 <siprintf+0x3c>)
 8005b0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b10:	9105      	str	r1, [sp, #20]
 8005b12:	6800      	ldr	r0, [r0, #0]
 8005b14:	9301      	str	r3, [sp, #4]
 8005b16:	a902      	add	r1, sp, #8
 8005b18:	f000 f89a 	bl	8005c50 <_svfiprintf_r>
 8005b1c:	9b02      	ldr	r3, [sp, #8]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	701a      	strb	r2, [r3, #0]
 8005b22:	b01c      	add	sp, #112	; 0x70
 8005b24:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b28:	b003      	add	sp, #12
 8005b2a:	4770      	bx	lr
 8005b2c:	20000058 	.word	0x20000058
 8005b30:	ffff0208 	.word	0xffff0208

08005b34 <memset>:
 8005b34:	4402      	add	r2, r0
 8005b36:	4603      	mov	r3, r0
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d100      	bne.n	8005b3e <memset+0xa>
 8005b3c:	4770      	bx	lr
 8005b3e:	f803 1b01 	strb.w	r1, [r3], #1
 8005b42:	e7f9      	b.n	8005b38 <memset+0x4>

08005b44 <__errno>:
 8005b44:	4b01      	ldr	r3, [pc, #4]	; (8005b4c <__errno+0x8>)
 8005b46:	6818      	ldr	r0, [r3, #0]
 8005b48:	4770      	bx	lr
 8005b4a:	bf00      	nop
 8005b4c:	20000058 	.word	0x20000058

08005b50 <__libc_init_array>:
 8005b50:	b570      	push	{r4, r5, r6, lr}
 8005b52:	4d0d      	ldr	r5, [pc, #52]	; (8005b88 <__libc_init_array+0x38>)
 8005b54:	4c0d      	ldr	r4, [pc, #52]	; (8005b8c <__libc_init_array+0x3c>)
 8005b56:	1b64      	subs	r4, r4, r5
 8005b58:	10a4      	asrs	r4, r4, #2
 8005b5a:	2600      	movs	r6, #0
 8005b5c:	42a6      	cmp	r6, r4
 8005b5e:	d109      	bne.n	8005b74 <__libc_init_array+0x24>
 8005b60:	4d0b      	ldr	r5, [pc, #44]	; (8005b90 <__libc_init_array+0x40>)
 8005b62:	4c0c      	ldr	r4, [pc, #48]	; (8005b94 <__libc_init_array+0x44>)
 8005b64:	f000 fc6a 	bl	800643c <_init>
 8005b68:	1b64      	subs	r4, r4, r5
 8005b6a:	10a4      	asrs	r4, r4, #2
 8005b6c:	2600      	movs	r6, #0
 8005b6e:	42a6      	cmp	r6, r4
 8005b70:	d105      	bne.n	8005b7e <__libc_init_array+0x2e>
 8005b72:	bd70      	pop	{r4, r5, r6, pc}
 8005b74:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b78:	4798      	blx	r3
 8005b7a:	3601      	adds	r6, #1
 8005b7c:	e7ee      	b.n	8005b5c <__libc_init_array+0xc>
 8005b7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b82:	4798      	blx	r3
 8005b84:	3601      	adds	r6, #1
 8005b86:	e7f2      	b.n	8005b6e <__libc_init_array+0x1e>
 8005b88:	0800653c 	.word	0x0800653c
 8005b8c:	0800653c 	.word	0x0800653c
 8005b90:	0800653c 	.word	0x0800653c
 8005b94:	08006540 	.word	0x08006540

08005b98 <__retarget_lock_acquire_recursive>:
 8005b98:	4770      	bx	lr

08005b9a <__retarget_lock_release_recursive>:
 8005b9a:	4770      	bx	lr

08005b9c <__ssputs_r>:
 8005b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ba0:	688e      	ldr	r6, [r1, #8]
 8005ba2:	461f      	mov	r7, r3
 8005ba4:	42be      	cmp	r6, r7
 8005ba6:	680b      	ldr	r3, [r1, #0]
 8005ba8:	4682      	mov	sl, r0
 8005baa:	460c      	mov	r4, r1
 8005bac:	4690      	mov	r8, r2
 8005bae:	d82c      	bhi.n	8005c0a <__ssputs_r+0x6e>
 8005bb0:	898a      	ldrh	r2, [r1, #12]
 8005bb2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005bb6:	d026      	beq.n	8005c06 <__ssputs_r+0x6a>
 8005bb8:	6965      	ldr	r5, [r4, #20]
 8005bba:	6909      	ldr	r1, [r1, #16]
 8005bbc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005bc0:	eba3 0901 	sub.w	r9, r3, r1
 8005bc4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005bc8:	1c7b      	adds	r3, r7, #1
 8005bca:	444b      	add	r3, r9
 8005bcc:	106d      	asrs	r5, r5, #1
 8005bce:	429d      	cmp	r5, r3
 8005bd0:	bf38      	it	cc
 8005bd2:	461d      	movcc	r5, r3
 8005bd4:	0553      	lsls	r3, r2, #21
 8005bd6:	d527      	bpl.n	8005c28 <__ssputs_r+0x8c>
 8005bd8:	4629      	mov	r1, r5
 8005bda:	f000 f957 	bl	8005e8c <_malloc_r>
 8005bde:	4606      	mov	r6, r0
 8005be0:	b360      	cbz	r0, 8005c3c <__ssputs_r+0xa0>
 8005be2:	6921      	ldr	r1, [r4, #16]
 8005be4:	464a      	mov	r2, r9
 8005be6:	f000 fbc7 	bl	8006378 <memcpy>
 8005bea:	89a3      	ldrh	r3, [r4, #12]
 8005bec:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005bf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bf4:	81a3      	strh	r3, [r4, #12]
 8005bf6:	6126      	str	r6, [r4, #16]
 8005bf8:	6165      	str	r5, [r4, #20]
 8005bfa:	444e      	add	r6, r9
 8005bfc:	eba5 0509 	sub.w	r5, r5, r9
 8005c00:	6026      	str	r6, [r4, #0]
 8005c02:	60a5      	str	r5, [r4, #8]
 8005c04:	463e      	mov	r6, r7
 8005c06:	42be      	cmp	r6, r7
 8005c08:	d900      	bls.n	8005c0c <__ssputs_r+0x70>
 8005c0a:	463e      	mov	r6, r7
 8005c0c:	6820      	ldr	r0, [r4, #0]
 8005c0e:	4632      	mov	r2, r6
 8005c10:	4641      	mov	r1, r8
 8005c12:	f000 fb86 	bl	8006322 <memmove>
 8005c16:	68a3      	ldr	r3, [r4, #8]
 8005c18:	1b9b      	subs	r3, r3, r6
 8005c1a:	60a3      	str	r3, [r4, #8]
 8005c1c:	6823      	ldr	r3, [r4, #0]
 8005c1e:	4433      	add	r3, r6
 8005c20:	6023      	str	r3, [r4, #0]
 8005c22:	2000      	movs	r0, #0
 8005c24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c28:	462a      	mov	r2, r5
 8005c2a:	f000 fb4b 	bl	80062c4 <_realloc_r>
 8005c2e:	4606      	mov	r6, r0
 8005c30:	2800      	cmp	r0, #0
 8005c32:	d1e0      	bne.n	8005bf6 <__ssputs_r+0x5a>
 8005c34:	6921      	ldr	r1, [r4, #16]
 8005c36:	4650      	mov	r0, sl
 8005c38:	f000 fbac 	bl	8006394 <_free_r>
 8005c3c:	230c      	movs	r3, #12
 8005c3e:	f8ca 3000 	str.w	r3, [sl]
 8005c42:	89a3      	ldrh	r3, [r4, #12]
 8005c44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c48:	81a3      	strh	r3, [r4, #12]
 8005c4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c4e:	e7e9      	b.n	8005c24 <__ssputs_r+0x88>

08005c50 <_svfiprintf_r>:
 8005c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c54:	4698      	mov	r8, r3
 8005c56:	898b      	ldrh	r3, [r1, #12]
 8005c58:	061b      	lsls	r3, r3, #24
 8005c5a:	b09d      	sub	sp, #116	; 0x74
 8005c5c:	4607      	mov	r7, r0
 8005c5e:	460d      	mov	r5, r1
 8005c60:	4614      	mov	r4, r2
 8005c62:	d50e      	bpl.n	8005c82 <_svfiprintf_r+0x32>
 8005c64:	690b      	ldr	r3, [r1, #16]
 8005c66:	b963      	cbnz	r3, 8005c82 <_svfiprintf_r+0x32>
 8005c68:	2140      	movs	r1, #64	; 0x40
 8005c6a:	f000 f90f 	bl	8005e8c <_malloc_r>
 8005c6e:	6028      	str	r0, [r5, #0]
 8005c70:	6128      	str	r0, [r5, #16]
 8005c72:	b920      	cbnz	r0, 8005c7e <_svfiprintf_r+0x2e>
 8005c74:	230c      	movs	r3, #12
 8005c76:	603b      	str	r3, [r7, #0]
 8005c78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c7c:	e0d0      	b.n	8005e20 <_svfiprintf_r+0x1d0>
 8005c7e:	2340      	movs	r3, #64	; 0x40
 8005c80:	616b      	str	r3, [r5, #20]
 8005c82:	2300      	movs	r3, #0
 8005c84:	9309      	str	r3, [sp, #36]	; 0x24
 8005c86:	2320      	movs	r3, #32
 8005c88:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005c8c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c90:	2330      	movs	r3, #48	; 0x30
 8005c92:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005e38 <_svfiprintf_r+0x1e8>
 8005c96:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005c9a:	f04f 0901 	mov.w	r9, #1
 8005c9e:	4623      	mov	r3, r4
 8005ca0:	469a      	mov	sl, r3
 8005ca2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ca6:	b10a      	cbz	r2, 8005cac <_svfiprintf_r+0x5c>
 8005ca8:	2a25      	cmp	r2, #37	; 0x25
 8005caa:	d1f9      	bne.n	8005ca0 <_svfiprintf_r+0x50>
 8005cac:	ebba 0b04 	subs.w	fp, sl, r4
 8005cb0:	d00b      	beq.n	8005cca <_svfiprintf_r+0x7a>
 8005cb2:	465b      	mov	r3, fp
 8005cb4:	4622      	mov	r2, r4
 8005cb6:	4629      	mov	r1, r5
 8005cb8:	4638      	mov	r0, r7
 8005cba:	f7ff ff6f 	bl	8005b9c <__ssputs_r>
 8005cbe:	3001      	adds	r0, #1
 8005cc0:	f000 80a9 	beq.w	8005e16 <_svfiprintf_r+0x1c6>
 8005cc4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005cc6:	445a      	add	r2, fp
 8005cc8:	9209      	str	r2, [sp, #36]	; 0x24
 8005cca:	f89a 3000 	ldrb.w	r3, [sl]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	f000 80a1 	beq.w	8005e16 <_svfiprintf_r+0x1c6>
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005cda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005cde:	f10a 0a01 	add.w	sl, sl, #1
 8005ce2:	9304      	str	r3, [sp, #16]
 8005ce4:	9307      	str	r3, [sp, #28]
 8005ce6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005cea:	931a      	str	r3, [sp, #104]	; 0x68
 8005cec:	4654      	mov	r4, sl
 8005cee:	2205      	movs	r2, #5
 8005cf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cf4:	4850      	ldr	r0, [pc, #320]	; (8005e38 <_svfiprintf_r+0x1e8>)
 8005cf6:	f7fa fa93 	bl	8000220 <memchr>
 8005cfa:	9a04      	ldr	r2, [sp, #16]
 8005cfc:	b9d8      	cbnz	r0, 8005d36 <_svfiprintf_r+0xe6>
 8005cfe:	06d0      	lsls	r0, r2, #27
 8005d00:	bf44      	itt	mi
 8005d02:	2320      	movmi	r3, #32
 8005d04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d08:	0711      	lsls	r1, r2, #28
 8005d0a:	bf44      	itt	mi
 8005d0c:	232b      	movmi	r3, #43	; 0x2b
 8005d0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d12:	f89a 3000 	ldrb.w	r3, [sl]
 8005d16:	2b2a      	cmp	r3, #42	; 0x2a
 8005d18:	d015      	beq.n	8005d46 <_svfiprintf_r+0xf6>
 8005d1a:	9a07      	ldr	r2, [sp, #28]
 8005d1c:	4654      	mov	r4, sl
 8005d1e:	2000      	movs	r0, #0
 8005d20:	f04f 0c0a 	mov.w	ip, #10
 8005d24:	4621      	mov	r1, r4
 8005d26:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d2a:	3b30      	subs	r3, #48	; 0x30
 8005d2c:	2b09      	cmp	r3, #9
 8005d2e:	d94d      	bls.n	8005dcc <_svfiprintf_r+0x17c>
 8005d30:	b1b0      	cbz	r0, 8005d60 <_svfiprintf_r+0x110>
 8005d32:	9207      	str	r2, [sp, #28]
 8005d34:	e014      	b.n	8005d60 <_svfiprintf_r+0x110>
 8005d36:	eba0 0308 	sub.w	r3, r0, r8
 8005d3a:	fa09 f303 	lsl.w	r3, r9, r3
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	9304      	str	r3, [sp, #16]
 8005d42:	46a2      	mov	sl, r4
 8005d44:	e7d2      	b.n	8005cec <_svfiprintf_r+0x9c>
 8005d46:	9b03      	ldr	r3, [sp, #12]
 8005d48:	1d19      	adds	r1, r3, #4
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	9103      	str	r1, [sp, #12]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	bfbb      	ittet	lt
 8005d52:	425b      	neglt	r3, r3
 8005d54:	f042 0202 	orrlt.w	r2, r2, #2
 8005d58:	9307      	strge	r3, [sp, #28]
 8005d5a:	9307      	strlt	r3, [sp, #28]
 8005d5c:	bfb8      	it	lt
 8005d5e:	9204      	strlt	r2, [sp, #16]
 8005d60:	7823      	ldrb	r3, [r4, #0]
 8005d62:	2b2e      	cmp	r3, #46	; 0x2e
 8005d64:	d10c      	bne.n	8005d80 <_svfiprintf_r+0x130>
 8005d66:	7863      	ldrb	r3, [r4, #1]
 8005d68:	2b2a      	cmp	r3, #42	; 0x2a
 8005d6a:	d134      	bne.n	8005dd6 <_svfiprintf_r+0x186>
 8005d6c:	9b03      	ldr	r3, [sp, #12]
 8005d6e:	1d1a      	adds	r2, r3, #4
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	9203      	str	r2, [sp, #12]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	bfb8      	it	lt
 8005d78:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005d7c:	3402      	adds	r4, #2
 8005d7e:	9305      	str	r3, [sp, #20]
 8005d80:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005e48 <_svfiprintf_r+0x1f8>
 8005d84:	7821      	ldrb	r1, [r4, #0]
 8005d86:	2203      	movs	r2, #3
 8005d88:	4650      	mov	r0, sl
 8005d8a:	f7fa fa49 	bl	8000220 <memchr>
 8005d8e:	b138      	cbz	r0, 8005da0 <_svfiprintf_r+0x150>
 8005d90:	9b04      	ldr	r3, [sp, #16]
 8005d92:	eba0 000a 	sub.w	r0, r0, sl
 8005d96:	2240      	movs	r2, #64	; 0x40
 8005d98:	4082      	lsls	r2, r0
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	3401      	adds	r4, #1
 8005d9e:	9304      	str	r3, [sp, #16]
 8005da0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005da4:	4825      	ldr	r0, [pc, #148]	; (8005e3c <_svfiprintf_r+0x1ec>)
 8005da6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005daa:	2206      	movs	r2, #6
 8005dac:	f7fa fa38 	bl	8000220 <memchr>
 8005db0:	2800      	cmp	r0, #0
 8005db2:	d038      	beq.n	8005e26 <_svfiprintf_r+0x1d6>
 8005db4:	4b22      	ldr	r3, [pc, #136]	; (8005e40 <_svfiprintf_r+0x1f0>)
 8005db6:	bb1b      	cbnz	r3, 8005e00 <_svfiprintf_r+0x1b0>
 8005db8:	9b03      	ldr	r3, [sp, #12]
 8005dba:	3307      	adds	r3, #7
 8005dbc:	f023 0307 	bic.w	r3, r3, #7
 8005dc0:	3308      	adds	r3, #8
 8005dc2:	9303      	str	r3, [sp, #12]
 8005dc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005dc6:	4433      	add	r3, r6
 8005dc8:	9309      	str	r3, [sp, #36]	; 0x24
 8005dca:	e768      	b.n	8005c9e <_svfiprintf_r+0x4e>
 8005dcc:	fb0c 3202 	mla	r2, ip, r2, r3
 8005dd0:	460c      	mov	r4, r1
 8005dd2:	2001      	movs	r0, #1
 8005dd4:	e7a6      	b.n	8005d24 <_svfiprintf_r+0xd4>
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	3401      	adds	r4, #1
 8005dda:	9305      	str	r3, [sp, #20]
 8005ddc:	4619      	mov	r1, r3
 8005dde:	f04f 0c0a 	mov.w	ip, #10
 8005de2:	4620      	mov	r0, r4
 8005de4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005de8:	3a30      	subs	r2, #48	; 0x30
 8005dea:	2a09      	cmp	r2, #9
 8005dec:	d903      	bls.n	8005df6 <_svfiprintf_r+0x1a6>
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d0c6      	beq.n	8005d80 <_svfiprintf_r+0x130>
 8005df2:	9105      	str	r1, [sp, #20]
 8005df4:	e7c4      	b.n	8005d80 <_svfiprintf_r+0x130>
 8005df6:	fb0c 2101 	mla	r1, ip, r1, r2
 8005dfa:	4604      	mov	r4, r0
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	e7f0      	b.n	8005de2 <_svfiprintf_r+0x192>
 8005e00:	ab03      	add	r3, sp, #12
 8005e02:	9300      	str	r3, [sp, #0]
 8005e04:	462a      	mov	r2, r5
 8005e06:	4b0f      	ldr	r3, [pc, #60]	; (8005e44 <_svfiprintf_r+0x1f4>)
 8005e08:	a904      	add	r1, sp, #16
 8005e0a:	4638      	mov	r0, r7
 8005e0c:	f3af 8000 	nop.w
 8005e10:	1c42      	adds	r2, r0, #1
 8005e12:	4606      	mov	r6, r0
 8005e14:	d1d6      	bne.n	8005dc4 <_svfiprintf_r+0x174>
 8005e16:	89ab      	ldrh	r3, [r5, #12]
 8005e18:	065b      	lsls	r3, r3, #25
 8005e1a:	f53f af2d 	bmi.w	8005c78 <_svfiprintf_r+0x28>
 8005e1e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005e20:	b01d      	add	sp, #116	; 0x74
 8005e22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e26:	ab03      	add	r3, sp, #12
 8005e28:	9300      	str	r3, [sp, #0]
 8005e2a:	462a      	mov	r2, r5
 8005e2c:	4b05      	ldr	r3, [pc, #20]	; (8005e44 <_svfiprintf_r+0x1f4>)
 8005e2e:	a904      	add	r1, sp, #16
 8005e30:	4638      	mov	r0, r7
 8005e32:	f000 f919 	bl	8006068 <_printf_i>
 8005e36:	e7eb      	b.n	8005e10 <_svfiprintf_r+0x1c0>
 8005e38:	08006500 	.word	0x08006500
 8005e3c:	0800650a 	.word	0x0800650a
 8005e40:	00000000 	.word	0x00000000
 8005e44:	08005b9d 	.word	0x08005b9d
 8005e48:	08006506 	.word	0x08006506

08005e4c <sbrk_aligned>:
 8005e4c:	b570      	push	{r4, r5, r6, lr}
 8005e4e:	4e0e      	ldr	r6, [pc, #56]	; (8005e88 <sbrk_aligned+0x3c>)
 8005e50:	460c      	mov	r4, r1
 8005e52:	6831      	ldr	r1, [r6, #0]
 8005e54:	4605      	mov	r5, r0
 8005e56:	b911      	cbnz	r1, 8005e5e <sbrk_aligned+0x12>
 8005e58:	f000 fa7e 	bl	8006358 <_sbrk_r>
 8005e5c:	6030      	str	r0, [r6, #0]
 8005e5e:	4621      	mov	r1, r4
 8005e60:	4628      	mov	r0, r5
 8005e62:	f000 fa79 	bl	8006358 <_sbrk_r>
 8005e66:	1c43      	adds	r3, r0, #1
 8005e68:	d00a      	beq.n	8005e80 <sbrk_aligned+0x34>
 8005e6a:	1cc4      	adds	r4, r0, #3
 8005e6c:	f024 0403 	bic.w	r4, r4, #3
 8005e70:	42a0      	cmp	r0, r4
 8005e72:	d007      	beq.n	8005e84 <sbrk_aligned+0x38>
 8005e74:	1a21      	subs	r1, r4, r0
 8005e76:	4628      	mov	r0, r5
 8005e78:	f000 fa6e 	bl	8006358 <_sbrk_r>
 8005e7c:	3001      	adds	r0, #1
 8005e7e:	d101      	bne.n	8005e84 <sbrk_aligned+0x38>
 8005e80:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005e84:	4620      	mov	r0, r4
 8005e86:	bd70      	pop	{r4, r5, r6, pc}
 8005e88:	2000038c 	.word	0x2000038c

08005e8c <_malloc_r>:
 8005e8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e90:	1ccd      	adds	r5, r1, #3
 8005e92:	f025 0503 	bic.w	r5, r5, #3
 8005e96:	3508      	adds	r5, #8
 8005e98:	2d0c      	cmp	r5, #12
 8005e9a:	bf38      	it	cc
 8005e9c:	250c      	movcc	r5, #12
 8005e9e:	2d00      	cmp	r5, #0
 8005ea0:	4607      	mov	r7, r0
 8005ea2:	db01      	blt.n	8005ea8 <_malloc_r+0x1c>
 8005ea4:	42a9      	cmp	r1, r5
 8005ea6:	d905      	bls.n	8005eb4 <_malloc_r+0x28>
 8005ea8:	230c      	movs	r3, #12
 8005eaa:	603b      	str	r3, [r7, #0]
 8005eac:	2600      	movs	r6, #0
 8005eae:	4630      	mov	r0, r6
 8005eb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005eb4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005f88 <_malloc_r+0xfc>
 8005eb8:	f000 f9f8 	bl	80062ac <__malloc_lock>
 8005ebc:	f8d8 3000 	ldr.w	r3, [r8]
 8005ec0:	461c      	mov	r4, r3
 8005ec2:	bb5c      	cbnz	r4, 8005f1c <_malloc_r+0x90>
 8005ec4:	4629      	mov	r1, r5
 8005ec6:	4638      	mov	r0, r7
 8005ec8:	f7ff ffc0 	bl	8005e4c <sbrk_aligned>
 8005ecc:	1c43      	adds	r3, r0, #1
 8005ece:	4604      	mov	r4, r0
 8005ed0:	d155      	bne.n	8005f7e <_malloc_r+0xf2>
 8005ed2:	f8d8 4000 	ldr.w	r4, [r8]
 8005ed6:	4626      	mov	r6, r4
 8005ed8:	2e00      	cmp	r6, #0
 8005eda:	d145      	bne.n	8005f68 <_malloc_r+0xdc>
 8005edc:	2c00      	cmp	r4, #0
 8005ede:	d048      	beq.n	8005f72 <_malloc_r+0xe6>
 8005ee0:	6823      	ldr	r3, [r4, #0]
 8005ee2:	4631      	mov	r1, r6
 8005ee4:	4638      	mov	r0, r7
 8005ee6:	eb04 0903 	add.w	r9, r4, r3
 8005eea:	f000 fa35 	bl	8006358 <_sbrk_r>
 8005eee:	4581      	cmp	r9, r0
 8005ef0:	d13f      	bne.n	8005f72 <_malloc_r+0xe6>
 8005ef2:	6821      	ldr	r1, [r4, #0]
 8005ef4:	1a6d      	subs	r5, r5, r1
 8005ef6:	4629      	mov	r1, r5
 8005ef8:	4638      	mov	r0, r7
 8005efa:	f7ff ffa7 	bl	8005e4c <sbrk_aligned>
 8005efe:	3001      	adds	r0, #1
 8005f00:	d037      	beq.n	8005f72 <_malloc_r+0xe6>
 8005f02:	6823      	ldr	r3, [r4, #0]
 8005f04:	442b      	add	r3, r5
 8005f06:	6023      	str	r3, [r4, #0]
 8005f08:	f8d8 3000 	ldr.w	r3, [r8]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d038      	beq.n	8005f82 <_malloc_r+0xf6>
 8005f10:	685a      	ldr	r2, [r3, #4]
 8005f12:	42a2      	cmp	r2, r4
 8005f14:	d12b      	bne.n	8005f6e <_malloc_r+0xe2>
 8005f16:	2200      	movs	r2, #0
 8005f18:	605a      	str	r2, [r3, #4]
 8005f1a:	e00f      	b.n	8005f3c <_malloc_r+0xb0>
 8005f1c:	6822      	ldr	r2, [r4, #0]
 8005f1e:	1b52      	subs	r2, r2, r5
 8005f20:	d41f      	bmi.n	8005f62 <_malloc_r+0xd6>
 8005f22:	2a0b      	cmp	r2, #11
 8005f24:	d917      	bls.n	8005f56 <_malloc_r+0xca>
 8005f26:	1961      	adds	r1, r4, r5
 8005f28:	42a3      	cmp	r3, r4
 8005f2a:	6025      	str	r5, [r4, #0]
 8005f2c:	bf18      	it	ne
 8005f2e:	6059      	strne	r1, [r3, #4]
 8005f30:	6863      	ldr	r3, [r4, #4]
 8005f32:	bf08      	it	eq
 8005f34:	f8c8 1000 	streq.w	r1, [r8]
 8005f38:	5162      	str	r2, [r4, r5]
 8005f3a:	604b      	str	r3, [r1, #4]
 8005f3c:	4638      	mov	r0, r7
 8005f3e:	f104 060b 	add.w	r6, r4, #11
 8005f42:	f000 f9b9 	bl	80062b8 <__malloc_unlock>
 8005f46:	f026 0607 	bic.w	r6, r6, #7
 8005f4a:	1d23      	adds	r3, r4, #4
 8005f4c:	1af2      	subs	r2, r6, r3
 8005f4e:	d0ae      	beq.n	8005eae <_malloc_r+0x22>
 8005f50:	1b9b      	subs	r3, r3, r6
 8005f52:	50a3      	str	r3, [r4, r2]
 8005f54:	e7ab      	b.n	8005eae <_malloc_r+0x22>
 8005f56:	42a3      	cmp	r3, r4
 8005f58:	6862      	ldr	r2, [r4, #4]
 8005f5a:	d1dd      	bne.n	8005f18 <_malloc_r+0x8c>
 8005f5c:	f8c8 2000 	str.w	r2, [r8]
 8005f60:	e7ec      	b.n	8005f3c <_malloc_r+0xb0>
 8005f62:	4623      	mov	r3, r4
 8005f64:	6864      	ldr	r4, [r4, #4]
 8005f66:	e7ac      	b.n	8005ec2 <_malloc_r+0x36>
 8005f68:	4634      	mov	r4, r6
 8005f6a:	6876      	ldr	r6, [r6, #4]
 8005f6c:	e7b4      	b.n	8005ed8 <_malloc_r+0x4c>
 8005f6e:	4613      	mov	r3, r2
 8005f70:	e7cc      	b.n	8005f0c <_malloc_r+0x80>
 8005f72:	230c      	movs	r3, #12
 8005f74:	603b      	str	r3, [r7, #0]
 8005f76:	4638      	mov	r0, r7
 8005f78:	f000 f99e 	bl	80062b8 <__malloc_unlock>
 8005f7c:	e797      	b.n	8005eae <_malloc_r+0x22>
 8005f7e:	6025      	str	r5, [r4, #0]
 8005f80:	e7dc      	b.n	8005f3c <_malloc_r+0xb0>
 8005f82:	605b      	str	r3, [r3, #4]
 8005f84:	deff      	udf	#255	; 0xff
 8005f86:	bf00      	nop
 8005f88:	20000388 	.word	0x20000388

08005f8c <_printf_common>:
 8005f8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f90:	4616      	mov	r6, r2
 8005f92:	4699      	mov	r9, r3
 8005f94:	688a      	ldr	r2, [r1, #8]
 8005f96:	690b      	ldr	r3, [r1, #16]
 8005f98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	bfb8      	it	lt
 8005fa0:	4613      	movlt	r3, r2
 8005fa2:	6033      	str	r3, [r6, #0]
 8005fa4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005fa8:	4607      	mov	r7, r0
 8005faa:	460c      	mov	r4, r1
 8005fac:	b10a      	cbz	r2, 8005fb2 <_printf_common+0x26>
 8005fae:	3301      	adds	r3, #1
 8005fb0:	6033      	str	r3, [r6, #0]
 8005fb2:	6823      	ldr	r3, [r4, #0]
 8005fb4:	0699      	lsls	r1, r3, #26
 8005fb6:	bf42      	ittt	mi
 8005fb8:	6833      	ldrmi	r3, [r6, #0]
 8005fba:	3302      	addmi	r3, #2
 8005fbc:	6033      	strmi	r3, [r6, #0]
 8005fbe:	6825      	ldr	r5, [r4, #0]
 8005fc0:	f015 0506 	ands.w	r5, r5, #6
 8005fc4:	d106      	bne.n	8005fd4 <_printf_common+0x48>
 8005fc6:	f104 0a19 	add.w	sl, r4, #25
 8005fca:	68e3      	ldr	r3, [r4, #12]
 8005fcc:	6832      	ldr	r2, [r6, #0]
 8005fce:	1a9b      	subs	r3, r3, r2
 8005fd0:	42ab      	cmp	r3, r5
 8005fd2:	dc26      	bgt.n	8006022 <_printf_common+0x96>
 8005fd4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005fd8:	1e13      	subs	r3, r2, #0
 8005fda:	6822      	ldr	r2, [r4, #0]
 8005fdc:	bf18      	it	ne
 8005fde:	2301      	movne	r3, #1
 8005fe0:	0692      	lsls	r2, r2, #26
 8005fe2:	d42b      	bmi.n	800603c <_printf_common+0xb0>
 8005fe4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005fe8:	4649      	mov	r1, r9
 8005fea:	4638      	mov	r0, r7
 8005fec:	47c0      	blx	r8
 8005fee:	3001      	adds	r0, #1
 8005ff0:	d01e      	beq.n	8006030 <_printf_common+0xa4>
 8005ff2:	6823      	ldr	r3, [r4, #0]
 8005ff4:	6922      	ldr	r2, [r4, #16]
 8005ff6:	f003 0306 	and.w	r3, r3, #6
 8005ffa:	2b04      	cmp	r3, #4
 8005ffc:	bf02      	ittt	eq
 8005ffe:	68e5      	ldreq	r5, [r4, #12]
 8006000:	6833      	ldreq	r3, [r6, #0]
 8006002:	1aed      	subeq	r5, r5, r3
 8006004:	68a3      	ldr	r3, [r4, #8]
 8006006:	bf0c      	ite	eq
 8006008:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800600c:	2500      	movne	r5, #0
 800600e:	4293      	cmp	r3, r2
 8006010:	bfc4      	itt	gt
 8006012:	1a9b      	subgt	r3, r3, r2
 8006014:	18ed      	addgt	r5, r5, r3
 8006016:	2600      	movs	r6, #0
 8006018:	341a      	adds	r4, #26
 800601a:	42b5      	cmp	r5, r6
 800601c:	d11a      	bne.n	8006054 <_printf_common+0xc8>
 800601e:	2000      	movs	r0, #0
 8006020:	e008      	b.n	8006034 <_printf_common+0xa8>
 8006022:	2301      	movs	r3, #1
 8006024:	4652      	mov	r2, sl
 8006026:	4649      	mov	r1, r9
 8006028:	4638      	mov	r0, r7
 800602a:	47c0      	blx	r8
 800602c:	3001      	adds	r0, #1
 800602e:	d103      	bne.n	8006038 <_printf_common+0xac>
 8006030:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006034:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006038:	3501      	adds	r5, #1
 800603a:	e7c6      	b.n	8005fca <_printf_common+0x3e>
 800603c:	18e1      	adds	r1, r4, r3
 800603e:	1c5a      	adds	r2, r3, #1
 8006040:	2030      	movs	r0, #48	; 0x30
 8006042:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006046:	4422      	add	r2, r4
 8006048:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800604c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006050:	3302      	adds	r3, #2
 8006052:	e7c7      	b.n	8005fe4 <_printf_common+0x58>
 8006054:	2301      	movs	r3, #1
 8006056:	4622      	mov	r2, r4
 8006058:	4649      	mov	r1, r9
 800605a:	4638      	mov	r0, r7
 800605c:	47c0      	blx	r8
 800605e:	3001      	adds	r0, #1
 8006060:	d0e6      	beq.n	8006030 <_printf_common+0xa4>
 8006062:	3601      	adds	r6, #1
 8006064:	e7d9      	b.n	800601a <_printf_common+0x8e>
	...

08006068 <_printf_i>:
 8006068:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800606c:	7e0f      	ldrb	r7, [r1, #24]
 800606e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006070:	2f78      	cmp	r7, #120	; 0x78
 8006072:	4691      	mov	r9, r2
 8006074:	4680      	mov	r8, r0
 8006076:	460c      	mov	r4, r1
 8006078:	469a      	mov	sl, r3
 800607a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800607e:	d807      	bhi.n	8006090 <_printf_i+0x28>
 8006080:	2f62      	cmp	r7, #98	; 0x62
 8006082:	d80a      	bhi.n	800609a <_printf_i+0x32>
 8006084:	2f00      	cmp	r7, #0
 8006086:	f000 80d4 	beq.w	8006232 <_printf_i+0x1ca>
 800608a:	2f58      	cmp	r7, #88	; 0x58
 800608c:	f000 80c0 	beq.w	8006210 <_printf_i+0x1a8>
 8006090:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006094:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006098:	e03a      	b.n	8006110 <_printf_i+0xa8>
 800609a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800609e:	2b15      	cmp	r3, #21
 80060a0:	d8f6      	bhi.n	8006090 <_printf_i+0x28>
 80060a2:	a101      	add	r1, pc, #4	; (adr r1, 80060a8 <_printf_i+0x40>)
 80060a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80060a8:	08006101 	.word	0x08006101
 80060ac:	08006115 	.word	0x08006115
 80060b0:	08006091 	.word	0x08006091
 80060b4:	08006091 	.word	0x08006091
 80060b8:	08006091 	.word	0x08006091
 80060bc:	08006091 	.word	0x08006091
 80060c0:	08006115 	.word	0x08006115
 80060c4:	08006091 	.word	0x08006091
 80060c8:	08006091 	.word	0x08006091
 80060cc:	08006091 	.word	0x08006091
 80060d0:	08006091 	.word	0x08006091
 80060d4:	08006219 	.word	0x08006219
 80060d8:	08006141 	.word	0x08006141
 80060dc:	080061d3 	.word	0x080061d3
 80060e0:	08006091 	.word	0x08006091
 80060e4:	08006091 	.word	0x08006091
 80060e8:	0800623b 	.word	0x0800623b
 80060ec:	08006091 	.word	0x08006091
 80060f0:	08006141 	.word	0x08006141
 80060f4:	08006091 	.word	0x08006091
 80060f8:	08006091 	.word	0x08006091
 80060fc:	080061db 	.word	0x080061db
 8006100:	682b      	ldr	r3, [r5, #0]
 8006102:	1d1a      	adds	r2, r3, #4
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	602a      	str	r2, [r5, #0]
 8006108:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800610c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006110:	2301      	movs	r3, #1
 8006112:	e09f      	b.n	8006254 <_printf_i+0x1ec>
 8006114:	6820      	ldr	r0, [r4, #0]
 8006116:	682b      	ldr	r3, [r5, #0]
 8006118:	0607      	lsls	r7, r0, #24
 800611a:	f103 0104 	add.w	r1, r3, #4
 800611e:	6029      	str	r1, [r5, #0]
 8006120:	d501      	bpl.n	8006126 <_printf_i+0xbe>
 8006122:	681e      	ldr	r6, [r3, #0]
 8006124:	e003      	b.n	800612e <_printf_i+0xc6>
 8006126:	0646      	lsls	r6, r0, #25
 8006128:	d5fb      	bpl.n	8006122 <_printf_i+0xba>
 800612a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800612e:	2e00      	cmp	r6, #0
 8006130:	da03      	bge.n	800613a <_printf_i+0xd2>
 8006132:	232d      	movs	r3, #45	; 0x2d
 8006134:	4276      	negs	r6, r6
 8006136:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800613a:	485a      	ldr	r0, [pc, #360]	; (80062a4 <_printf_i+0x23c>)
 800613c:	230a      	movs	r3, #10
 800613e:	e012      	b.n	8006166 <_printf_i+0xfe>
 8006140:	682b      	ldr	r3, [r5, #0]
 8006142:	6820      	ldr	r0, [r4, #0]
 8006144:	1d19      	adds	r1, r3, #4
 8006146:	6029      	str	r1, [r5, #0]
 8006148:	0605      	lsls	r5, r0, #24
 800614a:	d501      	bpl.n	8006150 <_printf_i+0xe8>
 800614c:	681e      	ldr	r6, [r3, #0]
 800614e:	e002      	b.n	8006156 <_printf_i+0xee>
 8006150:	0641      	lsls	r1, r0, #25
 8006152:	d5fb      	bpl.n	800614c <_printf_i+0xe4>
 8006154:	881e      	ldrh	r6, [r3, #0]
 8006156:	4853      	ldr	r0, [pc, #332]	; (80062a4 <_printf_i+0x23c>)
 8006158:	2f6f      	cmp	r7, #111	; 0x6f
 800615a:	bf0c      	ite	eq
 800615c:	2308      	moveq	r3, #8
 800615e:	230a      	movne	r3, #10
 8006160:	2100      	movs	r1, #0
 8006162:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006166:	6865      	ldr	r5, [r4, #4]
 8006168:	60a5      	str	r5, [r4, #8]
 800616a:	2d00      	cmp	r5, #0
 800616c:	bfa2      	ittt	ge
 800616e:	6821      	ldrge	r1, [r4, #0]
 8006170:	f021 0104 	bicge.w	r1, r1, #4
 8006174:	6021      	strge	r1, [r4, #0]
 8006176:	b90e      	cbnz	r6, 800617c <_printf_i+0x114>
 8006178:	2d00      	cmp	r5, #0
 800617a:	d04b      	beq.n	8006214 <_printf_i+0x1ac>
 800617c:	4615      	mov	r5, r2
 800617e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006182:	fb03 6711 	mls	r7, r3, r1, r6
 8006186:	5dc7      	ldrb	r7, [r0, r7]
 8006188:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800618c:	4637      	mov	r7, r6
 800618e:	42bb      	cmp	r3, r7
 8006190:	460e      	mov	r6, r1
 8006192:	d9f4      	bls.n	800617e <_printf_i+0x116>
 8006194:	2b08      	cmp	r3, #8
 8006196:	d10b      	bne.n	80061b0 <_printf_i+0x148>
 8006198:	6823      	ldr	r3, [r4, #0]
 800619a:	07de      	lsls	r6, r3, #31
 800619c:	d508      	bpl.n	80061b0 <_printf_i+0x148>
 800619e:	6923      	ldr	r3, [r4, #16]
 80061a0:	6861      	ldr	r1, [r4, #4]
 80061a2:	4299      	cmp	r1, r3
 80061a4:	bfde      	ittt	le
 80061a6:	2330      	movle	r3, #48	; 0x30
 80061a8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80061ac:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80061b0:	1b52      	subs	r2, r2, r5
 80061b2:	6122      	str	r2, [r4, #16]
 80061b4:	f8cd a000 	str.w	sl, [sp]
 80061b8:	464b      	mov	r3, r9
 80061ba:	aa03      	add	r2, sp, #12
 80061bc:	4621      	mov	r1, r4
 80061be:	4640      	mov	r0, r8
 80061c0:	f7ff fee4 	bl	8005f8c <_printf_common>
 80061c4:	3001      	adds	r0, #1
 80061c6:	d14a      	bne.n	800625e <_printf_i+0x1f6>
 80061c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80061cc:	b004      	add	sp, #16
 80061ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061d2:	6823      	ldr	r3, [r4, #0]
 80061d4:	f043 0320 	orr.w	r3, r3, #32
 80061d8:	6023      	str	r3, [r4, #0]
 80061da:	4833      	ldr	r0, [pc, #204]	; (80062a8 <_printf_i+0x240>)
 80061dc:	2778      	movs	r7, #120	; 0x78
 80061de:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80061e2:	6823      	ldr	r3, [r4, #0]
 80061e4:	6829      	ldr	r1, [r5, #0]
 80061e6:	061f      	lsls	r7, r3, #24
 80061e8:	f851 6b04 	ldr.w	r6, [r1], #4
 80061ec:	d402      	bmi.n	80061f4 <_printf_i+0x18c>
 80061ee:	065f      	lsls	r7, r3, #25
 80061f0:	bf48      	it	mi
 80061f2:	b2b6      	uxthmi	r6, r6
 80061f4:	07df      	lsls	r7, r3, #31
 80061f6:	bf48      	it	mi
 80061f8:	f043 0320 	orrmi.w	r3, r3, #32
 80061fc:	6029      	str	r1, [r5, #0]
 80061fe:	bf48      	it	mi
 8006200:	6023      	strmi	r3, [r4, #0]
 8006202:	b91e      	cbnz	r6, 800620c <_printf_i+0x1a4>
 8006204:	6823      	ldr	r3, [r4, #0]
 8006206:	f023 0320 	bic.w	r3, r3, #32
 800620a:	6023      	str	r3, [r4, #0]
 800620c:	2310      	movs	r3, #16
 800620e:	e7a7      	b.n	8006160 <_printf_i+0xf8>
 8006210:	4824      	ldr	r0, [pc, #144]	; (80062a4 <_printf_i+0x23c>)
 8006212:	e7e4      	b.n	80061de <_printf_i+0x176>
 8006214:	4615      	mov	r5, r2
 8006216:	e7bd      	b.n	8006194 <_printf_i+0x12c>
 8006218:	682b      	ldr	r3, [r5, #0]
 800621a:	6826      	ldr	r6, [r4, #0]
 800621c:	6961      	ldr	r1, [r4, #20]
 800621e:	1d18      	adds	r0, r3, #4
 8006220:	6028      	str	r0, [r5, #0]
 8006222:	0635      	lsls	r5, r6, #24
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	d501      	bpl.n	800622c <_printf_i+0x1c4>
 8006228:	6019      	str	r1, [r3, #0]
 800622a:	e002      	b.n	8006232 <_printf_i+0x1ca>
 800622c:	0670      	lsls	r0, r6, #25
 800622e:	d5fb      	bpl.n	8006228 <_printf_i+0x1c0>
 8006230:	8019      	strh	r1, [r3, #0]
 8006232:	2300      	movs	r3, #0
 8006234:	6123      	str	r3, [r4, #16]
 8006236:	4615      	mov	r5, r2
 8006238:	e7bc      	b.n	80061b4 <_printf_i+0x14c>
 800623a:	682b      	ldr	r3, [r5, #0]
 800623c:	1d1a      	adds	r2, r3, #4
 800623e:	602a      	str	r2, [r5, #0]
 8006240:	681d      	ldr	r5, [r3, #0]
 8006242:	6862      	ldr	r2, [r4, #4]
 8006244:	2100      	movs	r1, #0
 8006246:	4628      	mov	r0, r5
 8006248:	f7f9 ffea 	bl	8000220 <memchr>
 800624c:	b108      	cbz	r0, 8006252 <_printf_i+0x1ea>
 800624e:	1b40      	subs	r0, r0, r5
 8006250:	6060      	str	r0, [r4, #4]
 8006252:	6863      	ldr	r3, [r4, #4]
 8006254:	6123      	str	r3, [r4, #16]
 8006256:	2300      	movs	r3, #0
 8006258:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800625c:	e7aa      	b.n	80061b4 <_printf_i+0x14c>
 800625e:	6923      	ldr	r3, [r4, #16]
 8006260:	462a      	mov	r2, r5
 8006262:	4649      	mov	r1, r9
 8006264:	4640      	mov	r0, r8
 8006266:	47d0      	blx	sl
 8006268:	3001      	adds	r0, #1
 800626a:	d0ad      	beq.n	80061c8 <_printf_i+0x160>
 800626c:	6823      	ldr	r3, [r4, #0]
 800626e:	079b      	lsls	r3, r3, #30
 8006270:	d413      	bmi.n	800629a <_printf_i+0x232>
 8006272:	68e0      	ldr	r0, [r4, #12]
 8006274:	9b03      	ldr	r3, [sp, #12]
 8006276:	4298      	cmp	r0, r3
 8006278:	bfb8      	it	lt
 800627a:	4618      	movlt	r0, r3
 800627c:	e7a6      	b.n	80061cc <_printf_i+0x164>
 800627e:	2301      	movs	r3, #1
 8006280:	4632      	mov	r2, r6
 8006282:	4649      	mov	r1, r9
 8006284:	4640      	mov	r0, r8
 8006286:	47d0      	blx	sl
 8006288:	3001      	adds	r0, #1
 800628a:	d09d      	beq.n	80061c8 <_printf_i+0x160>
 800628c:	3501      	adds	r5, #1
 800628e:	68e3      	ldr	r3, [r4, #12]
 8006290:	9903      	ldr	r1, [sp, #12]
 8006292:	1a5b      	subs	r3, r3, r1
 8006294:	42ab      	cmp	r3, r5
 8006296:	dcf2      	bgt.n	800627e <_printf_i+0x216>
 8006298:	e7eb      	b.n	8006272 <_printf_i+0x20a>
 800629a:	2500      	movs	r5, #0
 800629c:	f104 0619 	add.w	r6, r4, #25
 80062a0:	e7f5      	b.n	800628e <_printf_i+0x226>
 80062a2:	bf00      	nop
 80062a4:	08006511 	.word	0x08006511
 80062a8:	08006522 	.word	0x08006522

080062ac <__malloc_lock>:
 80062ac:	4801      	ldr	r0, [pc, #4]	; (80062b4 <__malloc_lock+0x8>)
 80062ae:	f7ff bc73 	b.w	8005b98 <__retarget_lock_acquire_recursive>
 80062b2:	bf00      	nop
 80062b4:	20000384 	.word	0x20000384

080062b8 <__malloc_unlock>:
 80062b8:	4801      	ldr	r0, [pc, #4]	; (80062c0 <__malloc_unlock+0x8>)
 80062ba:	f7ff bc6e 	b.w	8005b9a <__retarget_lock_release_recursive>
 80062be:	bf00      	nop
 80062c0:	20000384 	.word	0x20000384

080062c4 <_realloc_r>:
 80062c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062c8:	4680      	mov	r8, r0
 80062ca:	4614      	mov	r4, r2
 80062cc:	460e      	mov	r6, r1
 80062ce:	b921      	cbnz	r1, 80062da <_realloc_r+0x16>
 80062d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80062d4:	4611      	mov	r1, r2
 80062d6:	f7ff bdd9 	b.w	8005e8c <_malloc_r>
 80062da:	b92a      	cbnz	r2, 80062e8 <_realloc_r+0x24>
 80062dc:	f000 f85a 	bl	8006394 <_free_r>
 80062e0:	4625      	mov	r5, r4
 80062e2:	4628      	mov	r0, r5
 80062e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062e8:	f000 f8a0 	bl	800642c <_malloc_usable_size_r>
 80062ec:	4284      	cmp	r4, r0
 80062ee:	4607      	mov	r7, r0
 80062f0:	d802      	bhi.n	80062f8 <_realloc_r+0x34>
 80062f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80062f6:	d812      	bhi.n	800631e <_realloc_r+0x5a>
 80062f8:	4621      	mov	r1, r4
 80062fa:	4640      	mov	r0, r8
 80062fc:	f7ff fdc6 	bl	8005e8c <_malloc_r>
 8006300:	4605      	mov	r5, r0
 8006302:	2800      	cmp	r0, #0
 8006304:	d0ed      	beq.n	80062e2 <_realloc_r+0x1e>
 8006306:	42bc      	cmp	r4, r7
 8006308:	4622      	mov	r2, r4
 800630a:	4631      	mov	r1, r6
 800630c:	bf28      	it	cs
 800630e:	463a      	movcs	r2, r7
 8006310:	f000 f832 	bl	8006378 <memcpy>
 8006314:	4631      	mov	r1, r6
 8006316:	4640      	mov	r0, r8
 8006318:	f000 f83c 	bl	8006394 <_free_r>
 800631c:	e7e1      	b.n	80062e2 <_realloc_r+0x1e>
 800631e:	4635      	mov	r5, r6
 8006320:	e7df      	b.n	80062e2 <_realloc_r+0x1e>

08006322 <memmove>:
 8006322:	4288      	cmp	r0, r1
 8006324:	b510      	push	{r4, lr}
 8006326:	eb01 0402 	add.w	r4, r1, r2
 800632a:	d902      	bls.n	8006332 <memmove+0x10>
 800632c:	4284      	cmp	r4, r0
 800632e:	4623      	mov	r3, r4
 8006330:	d807      	bhi.n	8006342 <memmove+0x20>
 8006332:	1e43      	subs	r3, r0, #1
 8006334:	42a1      	cmp	r1, r4
 8006336:	d008      	beq.n	800634a <memmove+0x28>
 8006338:	f811 2b01 	ldrb.w	r2, [r1], #1
 800633c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006340:	e7f8      	b.n	8006334 <memmove+0x12>
 8006342:	4402      	add	r2, r0
 8006344:	4601      	mov	r1, r0
 8006346:	428a      	cmp	r2, r1
 8006348:	d100      	bne.n	800634c <memmove+0x2a>
 800634a:	bd10      	pop	{r4, pc}
 800634c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006350:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006354:	e7f7      	b.n	8006346 <memmove+0x24>
	...

08006358 <_sbrk_r>:
 8006358:	b538      	push	{r3, r4, r5, lr}
 800635a:	4d06      	ldr	r5, [pc, #24]	; (8006374 <_sbrk_r+0x1c>)
 800635c:	2300      	movs	r3, #0
 800635e:	4604      	mov	r4, r0
 8006360:	4608      	mov	r0, r1
 8006362:	602b      	str	r3, [r5, #0]
 8006364:	f7fa fdc0 	bl	8000ee8 <_sbrk>
 8006368:	1c43      	adds	r3, r0, #1
 800636a:	d102      	bne.n	8006372 <_sbrk_r+0x1a>
 800636c:	682b      	ldr	r3, [r5, #0]
 800636e:	b103      	cbz	r3, 8006372 <_sbrk_r+0x1a>
 8006370:	6023      	str	r3, [r4, #0]
 8006372:	bd38      	pop	{r3, r4, r5, pc}
 8006374:	20000390 	.word	0x20000390

08006378 <memcpy>:
 8006378:	440a      	add	r2, r1
 800637a:	4291      	cmp	r1, r2
 800637c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006380:	d100      	bne.n	8006384 <memcpy+0xc>
 8006382:	4770      	bx	lr
 8006384:	b510      	push	{r4, lr}
 8006386:	f811 4b01 	ldrb.w	r4, [r1], #1
 800638a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800638e:	4291      	cmp	r1, r2
 8006390:	d1f9      	bne.n	8006386 <memcpy+0xe>
 8006392:	bd10      	pop	{r4, pc}

08006394 <_free_r>:
 8006394:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006396:	2900      	cmp	r1, #0
 8006398:	d044      	beq.n	8006424 <_free_r+0x90>
 800639a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800639e:	9001      	str	r0, [sp, #4]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	f1a1 0404 	sub.w	r4, r1, #4
 80063a6:	bfb8      	it	lt
 80063a8:	18e4      	addlt	r4, r4, r3
 80063aa:	f7ff ff7f 	bl	80062ac <__malloc_lock>
 80063ae:	4a1e      	ldr	r2, [pc, #120]	; (8006428 <_free_r+0x94>)
 80063b0:	9801      	ldr	r0, [sp, #4]
 80063b2:	6813      	ldr	r3, [r2, #0]
 80063b4:	b933      	cbnz	r3, 80063c4 <_free_r+0x30>
 80063b6:	6063      	str	r3, [r4, #4]
 80063b8:	6014      	str	r4, [r2, #0]
 80063ba:	b003      	add	sp, #12
 80063bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80063c0:	f7ff bf7a 	b.w	80062b8 <__malloc_unlock>
 80063c4:	42a3      	cmp	r3, r4
 80063c6:	d908      	bls.n	80063da <_free_r+0x46>
 80063c8:	6825      	ldr	r5, [r4, #0]
 80063ca:	1961      	adds	r1, r4, r5
 80063cc:	428b      	cmp	r3, r1
 80063ce:	bf01      	itttt	eq
 80063d0:	6819      	ldreq	r1, [r3, #0]
 80063d2:	685b      	ldreq	r3, [r3, #4]
 80063d4:	1949      	addeq	r1, r1, r5
 80063d6:	6021      	streq	r1, [r4, #0]
 80063d8:	e7ed      	b.n	80063b6 <_free_r+0x22>
 80063da:	461a      	mov	r2, r3
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	b10b      	cbz	r3, 80063e4 <_free_r+0x50>
 80063e0:	42a3      	cmp	r3, r4
 80063e2:	d9fa      	bls.n	80063da <_free_r+0x46>
 80063e4:	6811      	ldr	r1, [r2, #0]
 80063e6:	1855      	adds	r5, r2, r1
 80063e8:	42a5      	cmp	r5, r4
 80063ea:	d10b      	bne.n	8006404 <_free_r+0x70>
 80063ec:	6824      	ldr	r4, [r4, #0]
 80063ee:	4421      	add	r1, r4
 80063f0:	1854      	adds	r4, r2, r1
 80063f2:	42a3      	cmp	r3, r4
 80063f4:	6011      	str	r1, [r2, #0]
 80063f6:	d1e0      	bne.n	80063ba <_free_r+0x26>
 80063f8:	681c      	ldr	r4, [r3, #0]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	6053      	str	r3, [r2, #4]
 80063fe:	440c      	add	r4, r1
 8006400:	6014      	str	r4, [r2, #0]
 8006402:	e7da      	b.n	80063ba <_free_r+0x26>
 8006404:	d902      	bls.n	800640c <_free_r+0x78>
 8006406:	230c      	movs	r3, #12
 8006408:	6003      	str	r3, [r0, #0]
 800640a:	e7d6      	b.n	80063ba <_free_r+0x26>
 800640c:	6825      	ldr	r5, [r4, #0]
 800640e:	1961      	adds	r1, r4, r5
 8006410:	428b      	cmp	r3, r1
 8006412:	bf04      	itt	eq
 8006414:	6819      	ldreq	r1, [r3, #0]
 8006416:	685b      	ldreq	r3, [r3, #4]
 8006418:	6063      	str	r3, [r4, #4]
 800641a:	bf04      	itt	eq
 800641c:	1949      	addeq	r1, r1, r5
 800641e:	6021      	streq	r1, [r4, #0]
 8006420:	6054      	str	r4, [r2, #4]
 8006422:	e7ca      	b.n	80063ba <_free_r+0x26>
 8006424:	b003      	add	sp, #12
 8006426:	bd30      	pop	{r4, r5, pc}
 8006428:	20000388 	.word	0x20000388

0800642c <_malloc_usable_size_r>:
 800642c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006430:	1f18      	subs	r0, r3, #4
 8006432:	2b00      	cmp	r3, #0
 8006434:	bfbc      	itt	lt
 8006436:	580b      	ldrlt	r3, [r1, r0]
 8006438:	18c0      	addlt	r0, r0, r3
 800643a:	4770      	bx	lr

0800643c <_init>:
 800643c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800643e:	bf00      	nop
 8006440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006442:	bc08      	pop	{r3}
 8006444:	469e      	mov	lr, r3
 8006446:	4770      	bx	lr

08006448 <_fini>:
 8006448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800644a:	bf00      	nop
 800644c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800644e:	bc08      	pop	{r3}
 8006450:	469e      	mov	lr, r3
 8006452:	4770      	bx	lr
